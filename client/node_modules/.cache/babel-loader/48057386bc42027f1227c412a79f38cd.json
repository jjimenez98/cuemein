{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar DominantSpeakerSignaling = require('./dominantspeakersignaling');\n\nvar NetworkQualityMonitor = require('./networkqualitymonitor');\n\nvar NetworkQualitySignaling = require('./networkqualitysignaling');\n\nvar RecordingV2 = require('./recording');\n\nvar RoomSignaling = require('../room');\n\nvar RemoteParticipantV2 = require('./remoteparticipant');\n\nvar StatsReport = require('../../stats/statsreport');\n\nvar TrackPrioritySignaling = require('./trackprioritysignaling');\n\nvar TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\n\nvar RenderHintsSignaling = require('./renderhintssignaling');\n\nvar _a = require('../../util'),\n    DEFAULT_SESSION_TIMEOUT_SEC = _a.constants.DEFAULT_SESSION_TIMEOUT_SEC,\n    createBandwidthProfilePayload = _a.createBandwidthProfilePayload,\n    defer = _a.defer,\n    difference = _a.difference,\n    filterObject = _a.filterObject,\n    flatMap = _a.flatMap,\n    oncePerTick = _a.oncePerTick;\n\nvar MovingAverageDelta = require('../../util/movingaveragedelta');\n\nvar createTwilioError = require('../../util/twilio-video-errors').createTwilioError;\n\nvar STATS_PUBLISH_INTERVAL_MS = 10000;\n/**\n * @extends RoomSignaling\n */\n\nvar RoomV2 = function (_super) {\n  __extends(RoomV2, _super);\n\n  function RoomV2(localParticipant, initialState, transport, peerConnectionManager, options) {\n    var _this = this;\n\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n    options = Object.assign({\n      DominantSpeakerSignaling: DominantSpeakerSignaling,\n      NetworkQualityMonitor: NetworkQualityMonitor,\n      NetworkQualitySignaling: NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2: RemoteParticipantV2,\n      TrackPrioritySignaling: TrackPrioritySignaling,\n      TrackSwitchOffSignaling: TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n    _this = _super.call(this, localParticipant, initialState.sid, initialState.name, options) || this;\n\n    var getTrackReceiver = function getTrackReceiver(id) {\n      return _this._getTrackReceiver(id);\n    };\n\n    var log = _this._log;\n    Object.defineProperties(_this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(getTrackReceiver, localParticipant.networkQualityConfiguration, {\n          log: log\n        })\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n\n    _this._initTrackSwitchOffSignaling();\n\n    _this._initDominantSpeakerSignaling();\n\n    _this._initNetworkQualityMonitorSignaling();\n\n    handleLocalParticipantEvents(_this, localParticipant);\n    handlePeerConnectionEvents(_this, peerConnectionManager);\n    handleTransportEvents(_this, transport);\n    periodicallyPublishStats(_this, transport, options.statsPublishIntervalMs);\n\n    _this._update(initialState);\n\n    return _this;\n  }\n\n  Object.defineProperty(RoomV2.prototype, \"connectionState\", {\n    /**\n     * The PeerConnection state.\n     * @property {RTCPeerConnectionState}\n     */\n    get: function get() {\n      return this._peerConnectionManager.connectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"signalingConnectionState\", {\n    /**\n     * The Signaling Connection State.\n     * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n     */\n    get: function get() {\n      return this._transport.state === 'syncing' ? 'reconnecting' : this._transport.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"iceConnectionState\", {\n    /**\n     * The Ice Connection State.\n     * @property {RTCIceConnectionState}\n     */\n    get: function get() {\n      return this._peerConnectionManager.iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @private\n   */\n\n  RoomV2.prototype._deleteTrackReceiverDeferred = function (id) {\n    return this._trackReceiverDeferreds.delete(id);\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getOrCreateTrackReceiverDeferred = function (id) {\n    var deferred = this._trackReceiverDeferreds.get(id) || defer();\n\n    var trackReceivers = this._peerConnectionManager.getTrackReceivers(); // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n\n\n    var trackReceiver = trackReceivers.find(function (trackReceiver) {\n      return trackReceiver.id === id && trackReceiver.readyState !== 'ended';\n    });\n\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n\n    return deferred;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._addTrackReceiver = function (trackReceiver) {\n    var deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n\n    deferred.resolve(trackReceiver);\n    return this;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._disconnect = function (error) {\n    var didDisconnect = _super.prototype._disconnect.call(this, error);\n\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n\n      this._transport.disconnect();\n\n      this._peerConnectionManager.close();\n    }\n\n    this.localParticipant.tracks.forEach(function (track) {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n    return didDisconnect;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getTrackReceiver = function (id) {\n    var _this = this;\n\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(function (trackReceiver) {\n      _this._deleteTrackReceiverDeferred(id);\n\n      return trackReceiver;\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getInitialTrackSwitchOffState = function (trackSid) {\n    var initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n\n    this._pendingSwitchOffStates.delete(trackSid);\n\n    if (initiallySwitchedOff) {\n      this._log.warn(\"[\" + trackSid + \"] was initially switched off! \");\n    }\n\n    return initiallySwitchedOff;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getTrackSidsToTrackSignalings = function () {\n    var trackSidsToTrackSignalings = flatMap(this.participants, function (participant) {\n      return Array.from(participant.tracks);\n    });\n    return new Map(trackSidsToTrackSignalings);\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getOrCreateRemoteParticipant = function (participantState) {\n    var _this = this;\n\n    var RemoteParticipantV2 = this._RemoteParticipantV2;\n    var participant = this.participants.get(participantState.sid);\n    var self = this;\n\n    if (!participant) {\n      participant = new RemoteParticipantV2(participantState, function (trackSid) {\n        return _this._getInitialTrackSwitchOffState(trackSid);\n      }, function (trackSid, priority) {\n        return _this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority);\n      }, function (trackSid, hint) {\n        return _this._renderHintsSignaling.setTrackHint(trackSid, hint);\n      }, function (trackSid) {\n        return _this._renderHintsSignaling.clearTrackHint(trackSid);\n      });\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n\n    return participant;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._getState = function () {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._maybeAddBandwidthProfile = function (update) {\n    var _a = this.localParticipant,\n        bandwidthProfile = _a.bandwidthProfile,\n        bandwidthProfileRevision = _a.bandwidthProfileRevision;\n\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n\n    return update;\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._publishNewLocalParticipantState = function () {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._publishPeerConnectionState = function (peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  };\n  /**\n   * @private\n   */\n\n\n  RoomV2.prototype._update = function (roomState) {\n    var _this = this;\n\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(function (trackState) {\n        if (trackState.id) {\n          _this._subscriptionFailures.delete(trackState.sid);\n\n          _this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !_this._subscriptionFailures.has(trackState.sid)) {\n          _this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n      var subscribedTrackSids_1 = new Set(roomState.subscribed.tracks.filter(function (trackState) {\n        return !!trackState.id;\n      }).map(function (trackState) {\n        return trackState.sid;\n      }));\n\n      this._subscribed.forEach(function (trackId, trackSid) {\n        if (!subscribedTrackSids_1.has(trackSid)) {\n          _this._subscribed.delete(trackSid);\n        }\n      });\n    }\n\n    var participantsToKeep = new Set(); // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n\n    (roomState.participants || []).forEach(function (participantState) {\n      if (participantState.sid === _this.localParticipant.sid) {\n        return;\n      } // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n\n\n      var disconnectedParticipantRevision = _this._disconnectedParticipantRevisions.get(participantState.sid);\n\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n\n      if (disconnectedParticipantRevision) {\n        _this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n\n      var participant = _this._getOrCreateRemoteParticipant(participantState);\n\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n\n    if (roomState.type === 'synced') {\n      this.participants.forEach(function (participant) {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n\n    handleSubscriptions(this); // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n\n    /* eslint camelcase:0 */\n\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(function (track) {\n        if (track.sid) {\n          _this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n\n    if (roomState.participant) {\n      this.localParticipant.connect(roomState.participant.sid, roomState.participant.identity);\n    }\n\n    [this._dominantSpeakerSignaling, this._networkQualitySignaling, this._trackPrioritySignaling, this._trackSwitchOffSignaling, this._renderHintsSignaling].forEach(function (mediaSignaling) {\n      var channel = mediaSignaling.channel;\n\n      if (!mediaSignaling.isSetup && roomState.media_signaling && roomState.media_signaling[channel] && roomState.media_signaling[channel].transport && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n    return this;\n  };\n\n  RoomV2.prototype._initTrackSwitchOffSignaling = function () {\n    var _this = this;\n\n    this._trackSwitchOffSignaling.on('updated', function (tracksOff, tracksOn) {\n      try {\n        _this._log.debug('received trackSwitch: ', {\n          tracksOn: tracksOn,\n          tracksOff: tracksOff\n        });\n\n        var trackUpdates_1 = new Map();\n        tracksOn.forEach(function (trackSid) {\n          return trackUpdates_1.set(trackSid, true);\n        });\n        tracksOff.forEach(function (trackSid) {\n          if (trackUpdates_1.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            _this._log.warn(trackSid + \" is DUPLICATED in both tracksOff and tracksOn list\");\n          }\n\n          trackUpdates_1.set(trackSid, false);\n        });\n\n        _this.participants.forEach(function (participant) {\n          participant.tracks.forEach(function (track) {\n            var isOn = trackUpdates_1.get(track.sid);\n\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates_1.delete(track.sid);\n            }\n          });\n        }); // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n\n\n        trackUpdates_1.forEach(function (isOn, trackSid) {\n          return _this._pendingSwitchOffStates.set(trackSid, !isOn);\n        });\n      } catch (ex) {\n        _this._log.error('error processing track switch off:', ex);\n      }\n    });\n  };\n\n  RoomV2.prototype._initDominantSpeakerSignaling = function () {\n    var _this = this;\n\n    this._dominantSpeakerSignaling.on('updated', function () {\n      return _this.setDominantSpeaker(_this._dominantSpeakerSignaling.loudestParticipantSid);\n    });\n  };\n\n  RoomV2.prototype._initNetworkQualityMonitorSignaling = function () {\n    var _this = this;\n\n    this._networkQualitySignaling.on('ready', function () {\n      var networkQualityMonitor = new _this._NetworkQualityMonitor(_this._peerConnectionManager, _this._networkQualitySignaling);\n      _this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', function () {\n        if (_this.iceConnectionState === 'failed') {\n          return;\n        }\n\n        _this.localParticipant.setNetworkQualityLevel(networkQualityMonitor.level, networkQualityMonitor.levels);\n\n        _this.participants.forEach(function (participant) {\n          var levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n\n    this._networkQualitySignaling.on('teardown', function () {\n      return _this._teardownNetworkQualityMonitor();\n    });\n  };\n\n  RoomV2.prototype._teardownNetworkQualityMonitor = function () {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n\n      this._networkQualityMonitor = null;\n    }\n  };\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n\n\n  RoomV2.prototype.getStats = function () {\n    var _this = this;\n\n    return this._peerConnectionManager.getStats().then(function (responses) {\n      return new Map(Array.from(responses).map(function (_a) {\n        var _b = __read(_a, 2),\n            id = _b[0],\n            response = _b[1];\n\n        return [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(_this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(_this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteVideoTrackStats)\n        })];\n      }));\n    });\n  };\n\n  return RoomV2;\n}(RoomSignaling);\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\n\n\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var trackSid = idToSid.get(trackStat.trackId);\n    return trackSid ? [Object.assign({}, trackStat, {\n      trackSid: trackSid\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\n\n\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\n\n\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  var idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(function (_a) {\n    var _b = __read(_a, 2),\n        sid = _b[0],\n        id = _b[1];\n\n    return [id, sid];\n  }));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\n\n\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  var localParticipantUpdated = oncePerTick(function () {\n    roomV2._publishNewLocalParticipantState();\n  });\n  var renegotiate = oncePerTick(function () {\n    var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n      return trackV2.trackTransceiver;\n    });\n\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n  roomV2.on('signalingConnectionStateChanged', function () {\n    var localParticipant = roomV2.localParticipant,\n        signalingConnectionState = roomV2.signalingConnectionState;\n    var identity = localParticipant.identity,\n        sid = localParticipant.sid;\n\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\n\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n  peerConnectionManager.on('connectionStateChanged', function () {\n    roomV2.emit('connectionStateChanged');\n  });\n  peerConnectionManager.on('iceConnectionStateChanged', function () {\n    roomV2.emit('iceConnectionStateChanged');\n\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n\n      roomV2.participants.forEach(function (participant) {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\n\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n\n      transport.removeListener('stateChanged', stateChanged);\n    }\n\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\n\n\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  var movingAverageDeltas = new Map();\n  var oddPublishCount = false;\n  var interval = setInterval(function () {\n    roomV2.getStats().then(function (stats) {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach(function (response, id) {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        var report = new StatsReport(id, response, true\n        /* prepareForInsights */\n        ); // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localAudioTrackStats: report.localAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localVideoTrackStats: report.localVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas);\n          }),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas);\n          })\n        }); // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n\n        var keys = flatMap(['localAudioTrackStats', 'localVideoTrackStats', 'remoteAudioTrackStats', 'remoteVideoTrackStats'], function (prop) {\n          return report[prop].map(function (_a) {\n            var ssrc = _a.ssrc,\n                trackSid = _a.trackSid;\n            return trackSid + \"+\" + ssrc;\n          });\n        });\n        var movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(function (key) {\n          return movingAverageDeltas.delete(key);\n        });\n\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          var activeIceCandidatePair = replaceNullsWithDefaults(response.activeIceCandidatePair, report.peerConnectionId);\n          transport.publishEvent('quality', 'active-ice-candidate-pair', 'info', activeIceCandidatePair);\n        }\n      });\n    }, function () {// Do nothing.\n    });\n  }, intervalMs);\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\n\nfunction handleSubscriptions(room) {\n  var trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n\n  room._subscriptionFailures.forEach(function (error, trackSid) {\n    var trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n\n  trackSidsToTrackSignalings.forEach(function (trackSignaling) {\n    var trackId = room._subscribed.get(trackSignaling.sid);\n\n    if (!trackId || trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(function (trackReceiver) {\n        return trackSignaling.setTrackTransceiver(trackReceiver);\n      });\n    }\n  });\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\n\n\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var framesEncoded = trackResponse.framesEncoded,\n      packetsSent = trackResponse.packetsSent,\n      totalEncodeTime = trackResponse.totalEncodeTime,\n      totalPacketSendDelay = trackResponse.totalPacketSendDelay;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    var trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay') || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    var trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay') || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\n\n\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var estimatedPlayoutTimestamp = trackResponse.estimatedPlayoutTimestamp,\n      framesDecoded = trackResponse.framesDecoded,\n      jitterBufferDelay = trackResponse.jitterBufferDelay,\n      jitterBufferEmittedCount = trackResponse.jitterBufferEmittedCount,\n      totalDecodeTime = trackResponse.totalDecodeTime;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    var trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay') || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    var trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay') || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n  return activeIceCandidatePair;\n}\n\nmodule.exports = RoomV2;","map":{"version":3,"sources":["../../../lib/signaling/v2/room.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar DominantSpeakerSignaling = require('./dominantspeakersignaling');\nvar NetworkQualityMonitor = require('./networkqualitymonitor');\nvar NetworkQualitySignaling = require('./networkqualitysignaling');\nvar RecordingV2 = require('./recording');\nvar RoomSignaling = require('../room');\nvar RemoteParticipantV2 = require('./remoteparticipant');\nvar StatsReport = require('../../stats/statsreport');\nvar TrackPrioritySignaling = require('./trackprioritysignaling');\nvar TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\nvar RenderHintsSignaling = require('./renderhintssignaling');\nvar _a = require('../../util'), DEFAULT_SESSION_TIMEOUT_SEC = _a.constants.DEFAULT_SESSION_TIMEOUT_SEC, createBandwidthProfilePayload = _a.createBandwidthProfilePayload, defer = _a.defer, difference = _a.difference, filterObject = _a.filterObject, flatMap = _a.flatMap, oncePerTick = _a.oncePerTick;\nvar MovingAverageDelta = require('../../util/movingaveragedelta');\nvar createTwilioError = require('../../util/twilio-video-errors').createTwilioError;\nvar STATS_PUBLISH_INTERVAL_MS = 10000;\n/**\n * @extends RoomSignaling\n */\nvar RoomV2 = /** @class */ (function (_super) {\n    __extends(RoomV2, _super);\n    function RoomV2(localParticipant, initialState, transport, peerConnectionManager, options) {\n        var _this = this;\n        initialState.options = Object.assign({\n            session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n        }, initialState.options);\n        options = Object.assign({\n            DominantSpeakerSignaling: DominantSpeakerSignaling,\n            NetworkQualityMonitor: NetworkQualityMonitor,\n            NetworkQualitySignaling: NetworkQualitySignaling,\n            RecordingSignaling: RecordingV2,\n            RemoteParticipantV2: RemoteParticipantV2,\n            TrackPrioritySignaling: TrackPrioritySignaling,\n            TrackSwitchOffSignaling: TrackSwitchOffSignaling,\n            bandwidthProfile: null,\n            sessionTimeout: initialState.options.session_timeout * 1000,\n            statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n        }, options);\n        localParticipant.setBandwidthProfile(options.bandwidthProfile);\n        peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n        _this = _super.call(this, localParticipant, initialState.sid, initialState.name, options) || this;\n        var getTrackReceiver = function (id) { return _this._getTrackReceiver(id); };\n        var log = _this._log;\n        Object.defineProperties(_this, {\n            _disconnectedParticipantRevisions: {\n                value: new Map()\n            },\n            _NetworkQualityMonitor: {\n                value: options.NetworkQualityMonitor\n            },\n            _lastBandwidthProfileRevision: {\n                value: localParticipant.bandwidthProfileRevision,\n                writable: true\n            },\n            _networkQualityMonitor: {\n                value: null,\n                writable: true\n            },\n            _networkQualityConfiguration: {\n                value: localParticipant.networkQualityConfiguration\n            },\n            _peerConnectionManager: {\n                value: peerConnectionManager\n            },\n            _published: {\n                value: new Map()\n            },\n            _publishedRevision: {\n                value: 0,\n                writable: true\n            },\n            _RemoteParticipantV2: {\n                value: options.RemoteParticipantV2\n            },\n            _subscribed: {\n                value: new Map()\n            },\n            _subscribedRevision: {\n                value: 0,\n                writable: true\n            },\n            _subscriptionFailures: {\n                value: new Map()\n            },\n            _dominantSpeakerSignaling: {\n                value: new options.DominantSpeakerSignaling(getTrackReceiver, { log: log })\n            },\n            _networkQualitySignaling: {\n                value: new options.NetworkQualitySignaling(getTrackReceiver, localParticipant.networkQualityConfiguration, { log: log })\n            },\n            _renderHintsSignaling: {\n                value: new RenderHintsSignaling(getTrackReceiver, { log: log }),\n            },\n            _trackPrioritySignaling: {\n                value: new options.TrackPrioritySignaling(getTrackReceiver, { log: log }),\n            },\n            _trackSwitchOffSignaling: {\n                value: new options.TrackSwitchOffSignaling(getTrackReceiver, { log: log }),\n            },\n            _pendingSwitchOffStates: {\n                value: new Map()\n            },\n            _transport: {\n                value: transport\n            },\n            _trackReceiverDeferreds: {\n                value: new Map()\n            },\n            mediaRegion: {\n                enumerable: true,\n                value: initialState.options.media_region || null\n            }\n        });\n        _this._initTrackSwitchOffSignaling();\n        _this._initDominantSpeakerSignaling();\n        _this._initNetworkQualityMonitorSignaling();\n        handleLocalParticipantEvents(_this, localParticipant);\n        handlePeerConnectionEvents(_this, peerConnectionManager);\n        handleTransportEvents(_this, transport);\n        periodicallyPublishStats(_this, transport, options.statsPublishIntervalMs);\n        _this._update(initialState);\n        return _this;\n    }\n    Object.defineProperty(RoomV2.prototype, \"connectionState\", {\n        /**\n         * The PeerConnection state.\n         * @property {RTCPeerConnectionState}\n         */\n        get: function () {\n            return this._peerConnectionManager.connectionState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RoomV2.prototype, \"signalingConnectionState\", {\n        /**\n         * The Signaling Connection State.\n         * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n         */\n        get: function () {\n            return this._transport.state === 'syncing'\n                ? 'reconnecting'\n                : this._transport.state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RoomV2.prototype, \"iceConnectionState\", {\n        /**\n         * The Ice Connection State.\n         * @property {RTCIceConnectionState}\n         */\n        get: function () {\n            return this._peerConnectionManager.iceConnectionState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @private\n     */\n    RoomV2.prototype._deleteTrackReceiverDeferred = function (id) {\n        return this._trackReceiverDeferreds.delete(id);\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._getOrCreateTrackReceiverDeferred = function (id) {\n        var deferred = this._trackReceiverDeferreds.get(id) || defer();\n        var trackReceivers = this._peerConnectionManager.getTrackReceivers();\n        // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n        // for the given Track ID already exists, for example, when a Track is removed\n        // and added back. If that is the case, then we should resolve 'deferred'.\n        var trackReceiver = trackReceivers.find(function (trackReceiver) { return trackReceiver.id === id && trackReceiver.readyState !== 'ended'; });\n        if (trackReceiver) {\n            deferred.resolve(trackReceiver);\n        }\n        else {\n            // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n            // resolved. This will prevent old copies of the MediaStreamTrack from\n            // being used when the remote peer removes and re-adds a MediaStreamTrack.\n            this._trackReceiverDeferreds.set(id, deferred);\n        }\n        return deferred;\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._addTrackReceiver = function (trackReceiver) {\n        var deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n        deferred.resolve(trackReceiver);\n        return this;\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._disconnect = function (error) {\n        var didDisconnect = _super.prototype._disconnect.call(this, error);\n        if (didDisconnect) {\n            this._teardownNetworkQualityMonitor();\n            this._transport.disconnect();\n            this._peerConnectionManager.close();\n        }\n        this.localParticipant.tracks.forEach(function (track) {\n            track.publishFailed(error || new Error('LocalParticipant disconnected'));\n        });\n        return didDisconnect;\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._getTrackReceiver = function (id) {\n        var _this = this;\n        return this._getOrCreateTrackReceiverDeferred(id).promise.then(function (trackReceiver) {\n            _this._deleteTrackReceiverDeferred(id);\n            return trackReceiver;\n        });\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._getInitialTrackSwitchOffState = function (trackSid) {\n        var initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n        this._pendingSwitchOffStates.delete(trackSid);\n        if (initiallySwitchedOff) {\n            this._log.warn(\"[\" + trackSid + \"] was initially switched off! \");\n        }\n        return initiallySwitchedOff;\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._getTrackSidsToTrackSignalings = function () {\n        var trackSidsToTrackSignalings = flatMap(this.participants, function (participant) { return Array.from(participant.tracks); });\n        return new Map(trackSidsToTrackSignalings);\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._getOrCreateRemoteParticipant = function (participantState) {\n        var _this = this;\n        var RemoteParticipantV2 = this._RemoteParticipantV2;\n        var participant = this.participants.get(participantState.sid);\n        var self = this;\n        if (!participant) {\n            participant = new RemoteParticipantV2(participantState, function (trackSid) { return _this._getInitialTrackSwitchOffState(trackSid); }, function (trackSid, priority) { return _this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority); }, function (trackSid, hint) { return _this._renderHintsSignaling.setTrackHint(trackSid, hint); }, function (trackSid) { return _this._renderHintsSignaling.clearTrackHint(trackSid); });\n            participant.on('stateChanged', function stateChanged(state) {\n                if (state === 'disconnected') {\n                    participant.removeListener('stateChanged', stateChanged);\n                    self.participants.delete(participant.sid);\n                    self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n                }\n            });\n            this.connectParticipant(participant);\n        }\n        return participant;\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._getState = function () {\n        return {\n            participant: this.localParticipant.getState()\n        };\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._maybeAddBandwidthProfile = function (update) {\n        var _a = this.localParticipant, bandwidthProfile = _a.bandwidthProfile, bandwidthProfileRevision = _a.bandwidthProfileRevision;\n        if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n            this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n            return Object.assign({\n                bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n            }, update);\n        }\n        return update;\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._publishNewLocalParticipantState = function () {\n        this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._publishPeerConnectionState = function (peerConnectionState) {\n        /* eslint camelcase:0 */\n        this._transport.publish(Object.assign({\n            peer_connections: [peerConnectionState]\n        }, this._getState()));\n    };\n    /**\n     * @private\n     */\n    RoomV2.prototype._update = function (roomState) {\n        var _this = this;\n        if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n            this._subscribedRevision = roomState.subscribed.revision;\n            roomState.subscribed.tracks.forEach(function (trackState) {\n                if (trackState.id) {\n                    _this._subscriptionFailures.delete(trackState.sid);\n                    _this._subscribed.set(trackState.sid, trackState.id);\n                }\n                else if (trackState.error && !_this._subscriptionFailures.has(trackState.sid)) {\n                    _this._subscriptionFailures.set(trackState.sid, trackState.error);\n                }\n            });\n            var subscribedTrackSids_1 = new Set(roomState.subscribed.tracks\n                .filter(function (trackState) { return !!trackState.id; })\n                .map(function (trackState) { return trackState.sid; }));\n            this._subscribed.forEach(function (trackId, trackSid) {\n                if (!subscribedTrackSids_1.has(trackSid)) {\n                    _this._subscribed.delete(trackSid);\n                }\n            });\n        }\n        var participantsToKeep = new Set();\n        // eslint-disable-next-line no-warning-comments\n        // TODO(mroberts): Remove me once the Server is fixed.\n        (roomState.participants || []).forEach(function (participantState) {\n            if (participantState.sid === _this.localParticipant.sid) {\n                return;\n            }\n            // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n            // equal to the revision when it was disconnected, then the state is old and can be ignored.\n            // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n            // stopped publishing media, and hence needs to be re-added.\n            var disconnectedParticipantRevision = _this._disconnectedParticipantRevisions.get(participantState.sid);\n            if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n                return;\n            }\n            if (disconnectedParticipantRevision) {\n                _this._disconnectedParticipantRevisions.delete(participantState.sid);\n            }\n            var participant = _this._getOrCreateRemoteParticipant(participantState);\n            participant.update(participantState);\n            participantsToKeep.add(participant);\n        });\n        if (roomState.type === 'synced') {\n            this.participants.forEach(function (participant) {\n                if (!participantsToKeep.has(participant)) {\n                    participant.disconnect();\n                }\n            });\n        }\n        handleSubscriptions(this);\n        // eslint-disable-next-line no-warning-comments\n        // TODO(mroberts): Remove me once the Server is fixed.\n        /* eslint camelcase:0 */\n        if (roomState.peer_connections) {\n            this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n        }\n        if (roomState.recording) {\n            this.recording.update(roomState.recording);\n        }\n        if (roomState.published && roomState.published.revision > this._publishedRevision) {\n            this._publishedRevision = roomState.published.revision;\n            roomState.published.tracks.forEach(function (track) {\n                if (track.sid) {\n                    _this._published.set(track.id, track.sid);\n                }\n            });\n            this.localParticipant.update(roomState.published);\n        }\n        if (roomState.participant) {\n            this.localParticipant.connect(roomState.participant.sid, roomState.participant.identity);\n        }\n        [\n            this._dominantSpeakerSignaling,\n            this._networkQualitySignaling,\n            this._trackPrioritySignaling,\n            this._trackSwitchOffSignaling,\n            this._renderHintsSignaling\n        ].forEach(function (mediaSignaling) {\n            var channel = mediaSignaling.channel;\n            if (!mediaSignaling.isSetup\n                && roomState.media_signaling\n                && roomState.media_signaling[channel]\n                && roomState.media_signaling[channel].transport\n                && roomState.media_signaling[channel].transport.type === 'data-channel') {\n                mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n            }\n        });\n        return this;\n    };\n    RoomV2.prototype._initTrackSwitchOffSignaling = function () {\n        var _this = this;\n        this._trackSwitchOffSignaling.on('updated', function (tracksOff, tracksOn) {\n            try {\n                _this._log.debug('received trackSwitch: ', { tracksOn: tracksOn, tracksOff: tracksOff });\n                var trackUpdates_1 = new Map();\n                tracksOn.forEach(function (trackSid) { return trackUpdates_1.set(trackSid, true); });\n                tracksOff.forEach(function (trackSid) {\n                    if (trackUpdates_1.get(trackSid)) {\n                        // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n                        _this._log.warn(trackSid + \" is DUPLICATED in both tracksOff and tracksOn list\");\n                    }\n                    trackUpdates_1.set(trackSid, false);\n                });\n                _this.participants.forEach(function (participant) {\n                    participant.tracks.forEach(function (track) {\n                        var isOn = trackUpdates_1.get(track.sid);\n                        if (typeof isOn !== 'undefined') {\n                            track.setSwitchedOff(!isOn);\n                            trackUpdates_1.delete(track.sid);\n                        }\n                    });\n                });\n                // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n                trackUpdates_1.forEach(function (isOn, trackSid) { return _this._pendingSwitchOffStates.set(trackSid, !isOn); });\n            }\n            catch (ex) {\n                _this._log.error('error processing track switch off:', ex);\n            }\n        });\n    };\n    RoomV2.prototype._initDominantSpeakerSignaling = function () {\n        var _this = this;\n        this._dominantSpeakerSignaling.on('updated', function () { return _this.setDominantSpeaker(_this._dominantSpeakerSignaling.loudestParticipantSid); });\n    };\n    RoomV2.prototype._initNetworkQualityMonitorSignaling = function () {\n        var _this = this;\n        this._networkQualitySignaling.on('ready', function () {\n            var networkQualityMonitor = new _this._NetworkQualityMonitor(_this._peerConnectionManager, _this._networkQualitySignaling);\n            _this._networkQualityMonitor = networkQualityMonitor;\n            networkQualityMonitor.on('updated', function () {\n                if (_this.iceConnectionState === 'failed') {\n                    return;\n                }\n                _this.localParticipant.setNetworkQualityLevel(networkQualityMonitor.level, networkQualityMonitor.levels);\n                _this.participants.forEach(function (participant) {\n                    var levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n                    if (levels) {\n                        participant.setNetworkQualityLevel(levels.level, levels);\n                    }\n                });\n            });\n            networkQualityMonitor.start();\n        });\n        this._networkQualitySignaling.on('teardown', function () { return _this._teardownNetworkQualityMonitor(); });\n    };\n    RoomV2.prototype._teardownNetworkQualityMonitor = function () {\n        if (this._networkQualityMonitor) {\n            this._networkQualityMonitor.stop();\n            this._networkQualityMonitor = null;\n        }\n    };\n    /**\n     * Get the {@link RoomV2}'s media statistics.\n     * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n     */\n    RoomV2.prototype.getStats = function () {\n        var _this = this;\n        return this._peerConnectionManager.getStats().then(function (responses) {\n            return new Map(Array.from(responses).map(function (_a) {\n                var _b = __read(_a, 2), id = _b[0], response = _b[1];\n                return [id, Object.assign({}, response, {\n                        localAudioTrackStats: filterAndAddLocalTrackSids(_this, response.localAudioTrackStats),\n                        localVideoTrackStats: filterAndAddLocalTrackSids(_this, response.localVideoTrackStats),\n                        remoteAudioTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteAudioTrackStats),\n                        remoteVideoTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteVideoTrackStats)\n                    })];\n            }));\n        });\n    };\n    return RoomV2;\n}(RoomSignaling));\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n    return trackStats.reduce(function (trackStats, trackStat) {\n        var trackSid = idToSid.get(trackStat.trackId);\n        return trackSid\n            ? [Object.assign({}, trackStat, { trackSid: trackSid })].concat(trackStats)\n            : trackStats;\n    }, []);\n}\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n    return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n    var idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(function (_a) {\n        var _b = __read(_a, 2), sid = _b[0], id = _b[1];\n        return [id, sid];\n    }));\n    return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n    var localParticipantUpdated = oncePerTick(function () {\n        roomV2._publishNewLocalParticipantState();\n    });\n    var renegotiate = oncePerTick(function () {\n        var trackSenders = flatMap(localParticipant.tracks, function (trackV2) { return trackV2.trackTransceiver; });\n        roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n    });\n    localParticipant.on('trackAdded', renegotiate);\n    localParticipant.on('trackRemoved', renegotiate);\n    localParticipant.on('updated', localParticipantUpdated);\n    roomV2.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n            localParticipant.removeListener('trackAdded', renegotiate);\n            localParticipant.removeListener('trackRemoved', renegotiate);\n            localParticipant.removeListener('updated', localParticipantUpdated);\n            roomV2.removeListener('stateChanged', stateChanged);\n            localParticipant.disconnect();\n        }\n    });\n    roomV2.on('signalingConnectionStateChanged', function () {\n        var localParticipant = roomV2.localParticipant, signalingConnectionState = roomV2.signalingConnectionState;\n        var identity = localParticipant.identity, sid = localParticipant.sid;\n        switch (signalingConnectionState) {\n            case 'connected':\n                localParticipant.connect(sid, identity);\n                break;\n            case 'reconnecting':\n                localParticipant.reconnecting();\n                break;\n        }\n    });\n}\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n    peerConnectionManager.on('description', function onDescription(description) {\n        roomV2._publishPeerConnectionState(description);\n    });\n    peerConnectionManager.dequeue('description');\n    peerConnectionManager.on('candidates', function onCandidates(candidates) {\n        roomV2._publishPeerConnectionState(candidates);\n    });\n    peerConnectionManager.dequeue('candidates');\n    peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n    peerConnectionManager.dequeue('trackAdded');\n    peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n    peerConnectionManager.on('connectionStateChanged', function () {\n        roomV2.emit('connectionStateChanged');\n    });\n    peerConnectionManager.on('iceConnectionStateChanged', function () {\n        roomV2.emit('iceConnectionStateChanged');\n        if (roomV2.iceConnectionState === 'failed') {\n            if (roomV2.localParticipant.networkQualityLevel !== null) {\n                roomV2.localParticipant.setNetworkQualityLevel(0);\n            }\n            roomV2.participants.forEach(function (participant) {\n                if (participant.networkQualityLevel !== null) {\n                    participant.setNetworkQualityLevel(0);\n                }\n            });\n        }\n    });\n}\nfunction handleTransportEvents(roomV2, transport) {\n    transport.on('message', roomV2._update.bind(roomV2));\n    transport.on('stateChanged', function stateChanged(state, error) {\n        if (state === 'disconnected') {\n            if (roomV2.state !== 'disconnected') {\n                roomV2._disconnect(error);\n            }\n            transport.removeListener('stateChanged', stateChanged);\n        }\n        roomV2.emit('signalingConnectionStateChanged');\n    });\n}\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n    var movingAverageDeltas = new Map();\n    var oddPublishCount = false;\n    var interval = setInterval(function () {\n        roomV2.getStats().then(function (stats) {\n            oddPublishCount = !oddPublishCount;\n            stats.forEach(function (response, id) {\n                // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n                // event instead of using StandardizedStatsResponse directly because\n                // StatsReport will add zeros to properties that do not exist.\n                var report = new StatsReport(id, response, true /* prepareForInsights */);\n                // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n                // we add them to the insights payload here.\n                transport.publishEvent('quality', 'stats-report', 'info', {\n                    audioTrackStats: report.remoteAudioTrackStats.map(function (trackStat, i) {\n                        return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas);\n                    }),\n                    localAudioTrackStats: report.localAudioTrackStats.map(function (trackStat, i) {\n                        return addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas);\n                    }),\n                    localVideoTrackStats: report.localVideoTrackStats.map(function (trackStat, i) {\n                        return addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas);\n                    }),\n                    peerConnectionId: report.peerConnectionId,\n                    videoTrackStats: report.remoteVideoTrackStats.map(function (trackStat, i) {\n                        return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas);\n                    }),\n                });\n                // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n                var keys = flatMap([\n                    'localAudioTrackStats',\n                    'localVideoTrackStats',\n                    'remoteAudioTrackStats',\n                    'remoteVideoTrackStats'\n                ], function (prop) { return report[prop].map(function (_a) {\n                    var ssrc = _a.ssrc, trackSid = _a.trackSid;\n                    return trackSid + \"+\" + ssrc;\n                }); });\n                var movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n                movingAverageDeltaKeysToBeRemoved.forEach(function (key) { return movingAverageDeltas.delete(key); });\n                if (oddPublishCount) {\n                    // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n                    // payload are assigned default values until the Insights gateway\n                    // accepts null values.\n                    var activeIceCandidatePair = replaceNullsWithDefaults(response.activeIceCandidatePair, report.peerConnectionId);\n                    transport.publishEvent('quality', 'active-ice-candidate-pair', 'info', activeIceCandidatePair);\n                }\n            });\n        }, function () {\n            // Do nothing.\n        });\n    }, intervalMs);\n    roomV2.on('stateChanged', function onStateChanged(state) {\n        if (state === 'disconnected') {\n            clearInterval(interval);\n            roomV2.removeListener('stateChanged', onStateChanged);\n        }\n    });\n}\nfunction handleSubscriptions(room) {\n    var trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n    room._subscriptionFailures.forEach(function (error, trackSid) {\n        var trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n        if (trackSignaling) {\n            room._subscriptionFailures.delete(trackSid);\n            trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n        }\n    });\n    trackSidsToTrackSignalings.forEach(function (trackSignaling) {\n        var trackId = room._subscribed.get(trackSignaling.sid);\n        if (!trackId || (trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId)) {\n            trackSignaling.setTrackTransceiver(null);\n        }\n        if (trackId) {\n            room._getTrackReceiver(trackId).then(function (trackReceiver) { return trackSignaling.setTrackTransceiver(trackReceiver); });\n        }\n    });\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n    var framesEncoded = trackResponse.framesEncoded, packetsSent = trackResponse.packetsSent, totalEncodeTime = trackResponse.totalEncodeTime, totalPacketSendDelay = trackResponse.totalPacketSendDelay;\n    var augmentedTrackStats = Object.assign({}, trackStats);\n    var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n    var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n    if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n        var trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay')\n            || new MovingAverageDelta();\n        trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n        augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n        trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n    }\n    if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n        var trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay')\n            || new MovingAverageDelta();\n        trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n        augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n        trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n    }\n    movingAverageDeltas.set(key, trackMovingAverageDeltas);\n    return augmentedTrackStats;\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n    var estimatedPlayoutTimestamp = trackResponse.estimatedPlayoutTimestamp, framesDecoded = trackResponse.framesDecoded, jitterBufferDelay = trackResponse.jitterBufferDelay, jitterBufferEmittedCount = trackResponse.jitterBufferEmittedCount, totalDecodeTime = trackResponse.totalDecodeTime;\n    var augmentedTrackStats = Object.assign({}, trackStats);\n    var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n    var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n        augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n    if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n        var trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay')\n            || new MovingAverageDelta();\n        trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n        augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n        trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n    }\n    if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n        var trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay')\n            || new MovingAverageDelta();\n        trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n        augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n        trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n    }\n    movingAverageDeltas.set(key, trackMovingAverageDeltas);\n    return augmentedTrackStats;\n}\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n    activeIceCandidatePair = Object.assign({\n        availableIncomingBitrate: 0,\n        availableOutgoingBitrate: 0,\n        bytesReceived: 0,\n        bytesSent: 0,\n        consentRequestsSent: 0,\n        currentRoundTripTime: 0,\n        lastPacketReceivedTimestamp: 0,\n        lastPacketSentTimestamp: 0,\n        nominated: false,\n        peerConnectionId: peerConnectionId,\n        priority: 0,\n        readable: false,\n        requestsReceived: 0,\n        requestsSent: 0,\n        responsesReceived: 0,\n        responsesSent: 0,\n        retransmissionsReceived: 0,\n        retransmissionsSent: 0,\n        state: 'failed',\n        totalRoundTripTime: 0,\n        transportId: '',\n        writable: false\n    }, filterObject(activeIceCandidatePair || {}, null));\n    activeIceCandidatePair.localCandidate = Object.assign({\n        candidateType: 'host',\n        deleted: false,\n        ip: '',\n        port: 0,\n        priority: 0,\n        protocol: 'udp',\n        url: ''\n    }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n    activeIceCandidatePair.remoteCandidate = Object.assign({\n        candidateType: 'host',\n        ip: '',\n        port: 0,\n        priority: 0,\n        protocol: 'udp',\n        url: ''\n    }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n    return activeIceCandidatePair;\n}\nmodule.exports = RoomV2;\n//# sourceMappingURL=room.js.map"]},"metadata":{},"sourceType":"script"}