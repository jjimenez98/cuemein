{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\n\n\nvar EncodingParametersImpl = function (_super) {\n  __extends(EncodingParametersImpl, _super);\n  /**\n   * Construct an {@link EncodingParametersImpl}.\n   * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n   */\n\n\n  function EncodingParametersImpl(encodingParameters) {\n    var _this = _super.call(this) || this;\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: null,\n      maxVideoBitrate: null\n    }, encodingParameters);\n    Object.defineProperties(_this, {\n      maxAudioBitrate: {\n        value: encodingParameters.maxAudioBitrate,\n        writable: true\n      },\n      maxVideoBitrate: {\n        value: encodingParameters.maxVideoBitrate,\n        writable: true\n      }\n    });\n    return _this;\n  }\n  /**\n   * Returns the bitrate values in an {@link EncodingParameters}.\n   * @returns {EncodingParameters}\n   */\n\n\n  EncodingParametersImpl.prototype.toJSON = function () {\n    return {\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    };\n  };\n  /**\n   * Update the bitrate values with those in the given {@link EncodingParameters}.\n   * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n   * @fires EncodingParametersImpl#changed\n   */\n\n\n  EncodingParametersImpl.prototype.update = function (encodingParameters) {\n    var _this = this;\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    }, encodingParameters);\n    var shouldEmitChanged = ['maxAudioBitrate', 'maxVideoBitrate'].reduce(function (shouldEmitChanged, maxKindBitrate) {\n      if (_this[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n        _this[maxKindBitrate] = encodingParameters[maxKindBitrate];\n        shouldEmitChanged = true;\n      }\n\n      return shouldEmitChanged;\n    }, false);\n\n    if (shouldEmitChanged) {\n      this.emit('changed');\n    }\n  };\n\n  return EncodingParametersImpl;\n}(EventEmitter);\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\n\n\nmodule.exports = EncodingParametersImpl;","map":{"version":3,"sources":["../lib/encodingparameters.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,YAAY,GAAG,OAAO,CAAC,QAAD,CAAP,CAAkB,YAAvC;AAEA;;;;;;;;AAQG;;;AACH,IAAA,sBAAA,GAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;AACnC;;;AAGG;;;AACH,WAAA,sBAAA,CAAY,kBAAZ,EAA8B;AAA9B,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAGE,IAAA,kBAAkB,GAAG,MAAM,CAAC,MAAP,CAAc;AACjC,MAAA,eAAe,EAAE,IADgB;AAEjC,MAAA,eAAe,EAAE;AAFgB,KAAd,EAGlB,kBAHkB,CAArB;AAKA,IAAA,MAAM,CAAC,gBAAP,CAAwB,KAAxB,EAA8B;AAC5B,MAAA,eAAe,EAAE;AACf,QAAA,KAAK,EAAE,kBAAkB,CAAC,eADX;AAEf,QAAA,QAAQ,EAAE;AAFK,OADW;AAK5B,MAAA,eAAe,EAAE;AACf,QAAA,KAAK,EAAE,kBAAkB,CAAC,eADX;AAEf,QAAA,QAAQ,EAAE;AAFK;AALW,KAA9B;;AAUD;AAED;;;AAGG;;;AACH,EAAA,sBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,eAAe,EAAE,KAAK,eADjB;AAEL,MAAA,eAAe,EAAE,KAAK;AAFjB,KAAP;AAID,GALD;AAOA;;;;AAIG;;;AACH,EAAA,sBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,kBAAP,EAAyB;AAAzB,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,kBAAkB,GAAG,MAAM,CAAC,MAAP,CAAc;AACjC,MAAA,eAAe,EAAE,KAAK,eADW;AAEjC,MAAA,eAAe,EAAE,KAAK;AAFW,KAAd,EAGlB,kBAHkB,CAArB;AAKA,QAAM,iBAAiB,GAAG,CACxB,iBADwB,EAExB,iBAFwB,EAGxB,MAHwB,CAGjB,UAAC,iBAAD,EAAoB,cAApB,EAAkC;AACzC,UAAI,KAAI,CAAC,cAAD,CAAJ,KAAyB,kBAAkB,CAAC,cAAD,CAA/C,EAAiE;AAC/D,QAAA,KAAI,CAAC,cAAD,CAAJ,GAAuB,kBAAkB,CAAC,cAAD,CAAzC;AACA,QAAA,iBAAiB,GAAG,IAApB;AACD;;AACD,aAAO,iBAAP;AACD,KATyB,EASvB,KATuB,CAA1B;;AAWA,QAAI,iBAAJ,EAAuB;AACrB,WAAK,IAAL,CAAU,SAAV;AACD;AACF,GApBD;;AAqBF,SAAA,sBAAA;AAAC,CA9DD,CAAqC,YAArC,CAAA;AAgEA;;;AAGG;;;AAEH,MAAM,CAAC,OAAP,GAAiB,sBAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar EventEmitter = require('events').EventEmitter;\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\nvar EncodingParametersImpl = /** @class */ (function (_super) {\n    __extends(EncodingParametersImpl, _super);\n    /**\n     * Construct an {@link EncodingParametersImpl}.\n     * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n     */\n    function EncodingParametersImpl(encodingParameters) {\n        var _this = _super.call(this) || this;\n        encodingParameters = Object.assign({\n            maxAudioBitrate: null,\n            maxVideoBitrate: null\n        }, encodingParameters);\n        Object.defineProperties(_this, {\n            maxAudioBitrate: {\n                value: encodingParameters.maxAudioBitrate,\n                writable: true\n            },\n            maxVideoBitrate: {\n                value: encodingParameters.maxVideoBitrate,\n                writable: true\n            }\n        });\n        return _this;\n    }\n    /**\n     * Returns the bitrate values in an {@link EncodingParameters}.\n     * @returns {EncodingParameters}\n     */\n    EncodingParametersImpl.prototype.toJSON = function () {\n        return {\n            maxAudioBitrate: this.maxAudioBitrate,\n            maxVideoBitrate: this.maxVideoBitrate\n        };\n    };\n    /**\n     * Update the bitrate values with those in the given {@link EncodingParameters}.\n     * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n     * @fires EncodingParametersImpl#changed\n     */\n    EncodingParametersImpl.prototype.update = function (encodingParameters) {\n        var _this = this;\n        encodingParameters = Object.assign({\n            maxAudioBitrate: this.maxAudioBitrate,\n            maxVideoBitrate: this.maxVideoBitrate\n        }, encodingParameters);\n        var shouldEmitChanged = [\n            'maxAudioBitrate',\n            'maxVideoBitrate'\n        ].reduce(function (shouldEmitChanged, maxKindBitrate) {\n            if (_this[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n                _this[maxKindBitrate] = encodingParameters[maxKindBitrate];\n                shouldEmitChanged = true;\n            }\n            return shouldEmitChanged;\n        }, false);\n        if (shouldEmitChanged) {\n            this.emit('changed');\n        }\n    };\n    return EncodingParametersImpl;\n}(EventEmitter));\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\nmodule.exports = EncodingParametersImpl;\n//# sourceMappingURL=encodingparameters.js.map"]},"metadata":{},"sourceType":"script"}