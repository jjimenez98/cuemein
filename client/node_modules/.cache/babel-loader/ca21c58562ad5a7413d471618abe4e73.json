{"ast":null,"code":"'use strict';\n\nvar asLocalTrack = require('./util').asLocalTrack;\n\nvar buildLogLevels = require('./util').buildLogLevels;\n\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\n\nvar _a = require('./media/track/es5'),\n    LocalAudioTrack = _a.LocalAudioTrack,\n    LocalDataTrack = _a.LocalDataTrack,\n    LocalVideoTrack = _a.LocalVideoTrack;\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\n\nvar Log = require('./util/log');\n\nvar _b = require('./util/constants'),\n    DEFAULT_LOG_LEVEL = _b.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = _b.DEFAULT_LOGGER_NAME;\n\nvar workaround180748 = require('./webaudio/workaround180748'); // This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\n\n\nvar createLocalTrackCalls = 0;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\n\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n  var logComponentName = \"[createLocalTracks #\" + ++createLocalTrackCalls + \"]\";\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels, options.loggerName); // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n\n  var localTrackOptions = Object.assign({\n    log: log\n  }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var extraLocalTrackOptions = {\n    audio: options.audio && options.audio.name ? {\n      name: options.audio.name\n    } : {},\n    video: options.video && options.video.name ? {\n      name: options.video.name\n    } : {}\n  };\n  extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n  extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n\n  if (options.audio && typeof options.audio.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = options.audio.workaroundWebKitBug1208516;\n  }\n\n  if (options.video && typeof options.video.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.video.workaroundWebKitBug1208516 = options.video.workaroundWebKitBug1208516;\n  }\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(extraLocalTrackOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\n\nmodule.exports = createLocalTracks;","map":{"version":3,"sources":["../lib/createlocaltracks.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar asLocalTrack = require('./util').asLocalTrack;\nvar buildLogLevels = require('./util').buildLogLevels;\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\nvar _a = require('./media/track/es5'), LocalAudioTrack = _a.LocalAudioTrack, LocalDataTrack = _a.LocalDataTrack, LocalVideoTrack = _a.LocalVideoTrack;\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\nvar Log = require('./util/log');\nvar _b = require('./util/constants'), DEFAULT_LOG_LEVEL = _b.DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME = _b.DEFAULT_LOGGER_NAME;\nvar workaround180748 = require('./webaudio/workaround180748');\n// This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\nvar createLocalTrackCalls = 0;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\nfunction createLocalTracks(options) {\n    var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n    options = Object.assign({\n        audio: isAudioVideoAbsent,\n        getUserMedia: getUserMedia,\n        loggerName: DEFAULT_LOGGER_NAME,\n        logLevel: DEFAULT_LOG_LEVEL,\n        LocalAudioTrack: LocalAudioTrack,\n        LocalDataTrack: LocalDataTrack,\n        LocalVideoTrack: LocalVideoTrack,\n        MediaStreamTrack: MediaStreamTrack,\n        Log: Log,\n        video: isAudioVideoAbsent\n    }, options);\n    var logComponentName = \"[createLocalTracks #\" + ++createLocalTrackCalls + \"]\";\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', logComponentName, logLevels, options.loggerName);\n    // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n    // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n    // \"options\" without the \"name\".\n    var localTrackOptions = Object.assign({ log: log }, options);\n    delete localTrackOptions.name;\n    if (options.audio === false && options.video === false) {\n        log.info('Neither audio nor video requested, so returning empty LocalTracks');\n        return Promise.resolve([]);\n    }\n    if (options.tracks) {\n        log.info('Adding user-provided LocalTracks');\n        log.debug('LocalTracks:', options.tracks);\n        return Promise.resolve(options.tracks);\n    }\n    var extraLocalTrackOptions = {\n        audio: options.audio && options.audio.name\n            ? { name: options.audio.name }\n            : {},\n        video: options.video && options.video.name\n            ? { name: options.video.name }\n            : {}\n    };\n    extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n    extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n    if (options.audio && typeof options.audio.workaroundWebKitBug1208516 === 'boolean') {\n        extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = options.audio.workaroundWebKitBug1208516;\n    }\n    if (options.video && typeof options.video.workaroundWebKitBug1208516 === 'boolean') {\n        extraLocalTrackOptions.video.workaroundWebKitBug1208516 = options.video.workaroundWebKitBug1208516;\n    }\n    if (options.audio) {\n        delete options.audio.name;\n    }\n    if (options.video) {\n        delete options.video.name;\n    }\n    var mediaStreamConstraints = {\n        audio: options.audio,\n        video: options.video\n    };\n    var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n    var mediaStreamPromise = workaroundWebKitBug180748\n        ? workaround180748(log, options.getUserMedia, mediaStreamConstraints)\n        : options.getUserMedia(mediaStreamConstraints);\n    return mediaStreamPromise.then(function (mediaStream) {\n        var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n        log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n        return mediaStreamTracks.map(function (mediaStreamTrack) { return asLocalTrack(mediaStreamTrack, Object.assign(extraLocalTrackOptions[mediaStreamTrack.kind], localTrackOptions)); });\n    }, function (error) {\n        log.warn('Call to getUserMedia failed:', error);\n        throw error;\n    });\n}\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\nmodule.exports = createLocalTracks;\n//# sourceMappingURL=createlocaltracks.js.map"]},"metadata":{},"sourceType":"script"}