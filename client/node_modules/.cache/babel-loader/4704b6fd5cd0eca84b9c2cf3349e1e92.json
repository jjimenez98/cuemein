{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar Track = require('./');\n\nvar DefaultDataTrackSender = require('../../data/sender');\n/**\n * A {@link LocalDataTrack} is a {@link Track} representing data that your\n * {@link LocalParticipant} can publish to a {@link Room}.\n * @extends Track\n * @property {Track.ID} id - The {@link LocalDataTrack}'s ID\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which the {@link LocalDataTrack} will send\n *   or re-send data if not acknowledged on the underlying RTCDataChannel(s).\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the {@link LocalDataTrack} will resend data if not successfully\n *   delivered on the underlying RTCDataChannel(s).\n * @property {boolean} ordered - true if data on the {@link LocalDataTrack} is\n *   guaranteed to be sent in order.\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of times the {@link LocalDataTrack} will attempt to send\n *   data, ensuring \"reliable\" transmission.\n * @example\n * var Video = require('twilio-video');\n *\n * var localDataTrack = new Video.LocalDataTrack();\n * window.addEventListener('mousemove', function(event) {\n *   localDataTrack.send(JSON.stringify({\n *     x: e.clientX,\n *     y: e.clientY\n *   }));\n * });\n *\n * var token1 = getAccessToken();\n * Video.connect(token1, {\n *   name: 'my-cool-room',\n *   tracks: [localDataTrack]\n * });\n *\n * var token2 = getAccessToken();\n * Video.connect(token2, {\n *   name: 'my-cool-room',\n *   tracks: []\n * }).then(function(room) {\n *   room.on('trackSubscribed', function(track) {\n *     track.on('message', function(message) {\n *       console.log(JSON.parse(message)); // { x: <number>, y: <number> }\n *     });\n *   });\n * });\n */\n\n\nvar LocalDataTrack = function (_super) {\n  __extends(LocalDataTrack, _super);\n  /**\n   * Construct a {@link LocalDataTrack}.\n   * @param {LocalDataTrackOptions} [options] - {@link LocalDataTrack} options\n   */\n\n\n  function LocalDataTrack(options) {\n    var _this = this;\n\n    options = Object.assign({\n      DataTrackSender: DefaultDataTrackSender,\n      maxPacketLifeTime: null,\n      maxRetransmits: null,\n      ordered: true\n    }, options);\n    var DataTrackSender = options.DataTrackSender;\n    var dataTrackSender = new DataTrackSender(options.maxPacketLifeTime, options.maxRetransmits, options.ordered);\n    _this = _super.call(this, dataTrackSender.id, 'data', options) || this;\n    Object.defineProperties(_this, {\n      _trackSender: {\n        value: dataTrackSender\n      },\n      id: {\n        enumerable: true,\n        value: dataTrackSender.id\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: options.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: options.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: options.ordered\n      },\n      reliable: {\n        enumerable: true,\n        value: options.maxPacketLifeTime === null && options.maxRetransmits === null\n      }\n    });\n    return _this;\n  }\n  /**\n   * Send a message over the {@link LocalDataTrack}.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {void}\n   */\n\n\n  LocalDataTrack.prototype.send = function (data) {\n    this._trackSender.send(data);\n  };\n\n  return LocalDataTrack;\n}(Track);\n/**\n * {@link LocalDataTrack} options\n * @typedef {LocalTrackOptions} LocalDataTrackOptions\n * @property {?number} [maxPacketLifeTime=null] - Set this to limit the time\n *   (in milliseconds) during which the LocalDataTrack will send or re-send data\n *   if not successfully delivered on the underlying RTCDataChannel(s). It is an\n *   error to specify both this and <code>maxRetransmits</code>.\n * @property {?number} [maxRetransmits=null] - Set this to limit the number of\n *   times the {@link LocalDataTrack} will send or re-send data if not\n *   acknowledged on the underlying RTCDataChannel(s). It is an error to specify\n *   both this and <code>maxPacketLifeTime</code>.\n * @property {boolean} [ordered=true] - Set this to false to allow data on the\n *   LocalDataTrack to be sent out-of-order.\n */\n\n\nmodule.exports = LocalDataTrack;","map":{"version":3,"sources":["../../../lib/media/track/localdatatrack.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,KAAK,GAAG,OAAO,CAAC,IAAD,CAArB;;AACA,IAAM,sBAAsB,GAAG,OAAO,CAAC,mBAAD,CAAtC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CG;;;AACH,IAAA,cAAA,GAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;AAC3B;;;AAGG;;;AACH,WAAA,cAAA,CAAY,OAAZ,EAAmB;AAAnB,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc;AACtB,MAAA,eAAe,EAAE,sBADK;AAEtB,MAAA,iBAAiB,EAAE,IAFG;AAGtB,MAAA,cAAc,EAAE,IAHM;AAItB,MAAA,OAAO,EAAE;AAJa,KAAd,EAKP,OALO,CAAV;AAOA,QAAM,eAAe,GAAG,OAAO,CAAC,eAAhC;AACA,QAAM,eAAe,GAAG,IAAI,eAAJ,CACtB,OAAO,CAAC,iBADc,EAEtB,OAAO,CAAC,cAFc,EAGtB,OAAO,CAAC,OAHc,CAAxB;AAKA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,eAAe,CAAC,EAAtB,EAA0B,MAA1B,EAAkC,OAAlC,KAA0C,IAA1C;AAEA,IAAA,MAAM,CAAC,gBAAP,CAAwB,KAAxB,EAA8B;AAC5B,MAAA,YAAY,EAAE;AACZ,QAAA,KAAK,EAAE;AADK,OADc;AAI5B,MAAA,EAAE,EAAE;AACF,QAAA,UAAU,EAAE,IADV;AAEF,QAAA,KAAK,EAAE,eAAe,CAAC;AAFrB,OAJwB;AAQ5B,MAAA,iBAAiB,EAAE;AACjB,QAAA,UAAU,EAAE,IADK;AAEjB,QAAA,KAAK,EAAE,OAAO,CAAC;AAFE,OARS;AAY5B,MAAA,cAAc,EAAE;AACd,QAAA,UAAU,EAAE,IADE;AAEd,QAAA,KAAK,EAAE,OAAO,CAAC;AAFD,OAZY;AAgB5B,MAAA,OAAO,EAAE;AACP,QAAA,UAAU,EAAE,IADL;AAEP,QAAA,KAAK,EAAE,OAAO,CAAC;AAFR,OAhBmB;AAoB5B,MAAA,QAAQ,EAAE;AACR,QAAA,UAAU,EAAE,IADJ;AAER,QAAA,KAAK,EAAE,OAAO,CAAC,iBAAR,KAA8B,IAA9B,IACF,OAAO,CAAC,cAAR,KAA2B;AAHxB;AApBkB,KAA9B;;AA0BD;AAED;;;;AAIG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,IAAL,EAAS;AACP,SAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB;AACD,GAFD;;AAGF,SAAA,cAAA;AAAC,CAzDD,CAA6B,KAA7B,CAAA;AA2DA;;;;;;;;;;;;;AAaG;;;AAEH,MAAM,CAAC,OAAP,GAAiB,cAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Track = require('./');\nvar DefaultDataTrackSender = require('../../data/sender');\n/**\n * A {@link LocalDataTrack} is a {@link Track} representing data that your\n * {@link LocalParticipant} can publish to a {@link Room}.\n * @extends Track\n * @property {Track.ID} id - The {@link LocalDataTrack}'s ID\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which the {@link LocalDataTrack} will send\n *   or re-send data if not acknowledged on the underlying RTCDataChannel(s).\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the {@link LocalDataTrack} will resend data if not successfully\n *   delivered on the underlying RTCDataChannel(s).\n * @property {boolean} ordered - true if data on the {@link LocalDataTrack} is\n *   guaranteed to be sent in order.\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of times the {@link LocalDataTrack} will attempt to send\n *   data, ensuring \"reliable\" transmission.\n * @example\n * var Video = require('twilio-video');\n *\n * var localDataTrack = new Video.LocalDataTrack();\n * window.addEventListener('mousemove', function(event) {\n *   localDataTrack.send(JSON.stringify({\n *     x: e.clientX,\n *     y: e.clientY\n *   }));\n * });\n *\n * var token1 = getAccessToken();\n * Video.connect(token1, {\n *   name: 'my-cool-room',\n *   tracks: [localDataTrack]\n * });\n *\n * var token2 = getAccessToken();\n * Video.connect(token2, {\n *   name: 'my-cool-room',\n *   tracks: []\n * }).then(function(room) {\n *   room.on('trackSubscribed', function(track) {\n *     track.on('message', function(message) {\n *       console.log(JSON.parse(message)); // { x: <number>, y: <number> }\n *     });\n *   });\n * });\n */\nvar LocalDataTrack = /** @class */ (function (_super) {\n    __extends(LocalDataTrack, _super);\n    /**\n     * Construct a {@link LocalDataTrack}.\n     * @param {LocalDataTrackOptions} [options] - {@link LocalDataTrack} options\n     */\n    function LocalDataTrack(options) {\n        var _this = this;\n        options = Object.assign({\n            DataTrackSender: DefaultDataTrackSender,\n            maxPacketLifeTime: null,\n            maxRetransmits: null,\n            ordered: true\n        }, options);\n        var DataTrackSender = options.DataTrackSender;\n        var dataTrackSender = new DataTrackSender(options.maxPacketLifeTime, options.maxRetransmits, options.ordered);\n        _this = _super.call(this, dataTrackSender.id, 'data', options) || this;\n        Object.defineProperties(_this, {\n            _trackSender: {\n                value: dataTrackSender\n            },\n            id: {\n                enumerable: true,\n                value: dataTrackSender.id\n            },\n            maxPacketLifeTime: {\n                enumerable: true,\n                value: options.maxPacketLifeTime\n            },\n            maxRetransmits: {\n                enumerable: true,\n                value: options.maxRetransmits\n            },\n            ordered: {\n                enumerable: true,\n                value: options.ordered\n            },\n            reliable: {\n                enumerable: true,\n                value: options.maxPacketLifeTime === null\n                    && options.maxRetransmits === null\n            }\n        });\n        return _this;\n    }\n    /**\n     * Send a message over the {@link LocalDataTrack}.\n     * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n     * @returns {void}\n     */\n    LocalDataTrack.prototype.send = function (data) {\n        this._trackSender.send(data);\n    };\n    return LocalDataTrack;\n}(Track));\n/**\n * {@link LocalDataTrack} options\n * @typedef {LocalTrackOptions} LocalDataTrackOptions\n * @property {?number} [maxPacketLifeTime=null] - Set this to limit the time\n *   (in milliseconds) during which the LocalDataTrack will send or re-send data\n *   if not successfully delivered on the underlying RTCDataChannel(s). It is an\n *   error to specify both this and <code>maxRetransmits</code>.\n * @property {?number} [maxRetransmits=null] - Set this to limit the number of\n *   times the {@link LocalDataTrack} will send or re-send data if not\n *   acknowledged on the underlying RTCDataChannel(s). It is an error to specify\n *   both this and <code>maxPacketLifeTime</code>.\n * @property {boolean} [ordered=true] - Set this to false to allow data on the\n *   LocalDataTrack to be sent out-of-order.\n */\nmodule.exports = LocalDataTrack;\n//# sourceMappingURL=localdatatrack.js.map"]},"metadata":{},"sourceType":"script"}