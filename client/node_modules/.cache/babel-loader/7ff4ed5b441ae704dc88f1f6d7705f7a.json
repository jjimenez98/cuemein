{"ast":null,"code":"'use strict';\n/**\n * The {@link DocumentVisibilityMonitor} monitors the visibility state of the DOM\n * and executes the attached listeners in phase order when the DOM is visible.\n */\n\nvar DocumentVisibilityMonitor = function () {\n  /**\n   * Constructor.\n   * @param {number} [nPhases=1] - the number of phases\n   */\n  function DocumentVisibilityMonitor(nPhases) {\n    var _this = this;\n\n    if (nPhases === void 0) {\n      nPhases = 1;\n    }\n\n    Object.defineProperties(this, {\n      _listeners: {\n        value: []\n      },\n      _onVisibilityChange: {\n        value: function value() {\n          _this._emitVisible(document.visibilityState === 'visible');\n        }\n      }\n    });\n\n    for (var i = 0; i < nPhases; i++) {\n      this._listeners.push([]);\n    }\n  }\n  /**\n   * clears the state.\n   */\n\n\n  DocumentVisibilityMonitor.prototype.clear = function () {\n    var nPhases = this._listeners.length;\n\n    for (var i = 0; i < nPhases; i++) {\n      this._listeners[i] = [];\n    }\n  };\n\n  DocumentVisibilityMonitor.prototype._listenerCount = function () {\n    return this._listeners.reduce(function (count, phaseListeners) {\n      return count + phaseListeners.length;\n    }, 0);\n  };\n  /**\n   * Call all the listeners. Makes sure that all listeners for a given phase\n   * are executed before calling the listeners of the next phase.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._emitVisible = function (isVisible) {\n    var _this = this;\n\n    var promise = Promise.resolve();\n\n    var _loop_1 = function _loop_1(phase) {\n      promise = promise.then(function () {\n        return _this._emitVisiblePhase(phase, isVisible);\n      });\n    };\n\n    for (var phase = 1; phase <= this._listeners.length; phase++) {\n      _loop_1(phase);\n    }\n\n    return promise;\n  };\n  /**\n   * Call all the listeners for a given phase.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._emitVisiblePhase = function (phase, isVisible) {\n    var phaseListeners = this._listeners[phase - 1];\n    return Promise.all(phaseListeners.map(function (listener) {\n      var ret = listener(isVisible);\n      return ret instanceof Promise ? ret : Promise.resolve(ret);\n    }));\n  };\n  /**\n   * Start listening to the DOM visibility state change.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._start = function () {\n    document.addEventListener('visibilitychange', this._onVisibilityChange);\n  };\n  /**\n   * Stop listening to the DOM visibility state change.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._stop = function () {\n    document.removeEventListener('visibilitychange', this._onVisibilityChange);\n  };\n  /**\n   * Listen for the DOM visibility changes at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n\n\n  DocumentVisibilityMonitor.prototype.onVisibilityChange = function (phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    var phaseListeners = this._listeners[phase - 1];\n    phaseListeners.push(listener);\n\n    if (this._listenerCount() === 1) {\n      this._start();\n    }\n\n    return this;\n  };\n  /**\n   * Stop listening for the DOM visibility change at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n\n\n  DocumentVisibilityMonitor.prototype.offVisibilityChange = function (phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    var phaseListeners = this._listeners[phase - 1];\n    var index = phaseListeners.indexOf(listener);\n\n    if (index !== -1) {\n      phaseListeners.splice(index, 1);\n\n      if (this._listenerCount() === 0) {\n        this._stop();\n      }\n    }\n\n    return this;\n  };\n\n  return DocumentVisibilityMonitor;\n}();\n\nmodule.exports = new DocumentVisibilityMonitor(2);","map":{"version":3,"sources":["../../lib/util/documentvisibilitymonitor.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\n/**\n * The {@link DocumentVisibilityMonitor} monitors the visibility state of the DOM\n * and executes the attached listeners in phase order when the DOM is visible.\n */\nvar DocumentVisibilityMonitor = /** @class */ (function () {\n    /**\n     * Constructor.\n     * @param {number} [nPhases=1] - the number of phases\n     */\n    function DocumentVisibilityMonitor(nPhases) {\n        var _this = this;\n        if (nPhases === void 0) { nPhases = 1; }\n        Object.defineProperties(this, {\n            _listeners: {\n                value: []\n            },\n            _onVisibilityChange: {\n                value: function () {\n                    _this._emitVisible(document.visibilityState === 'visible');\n                }\n            }\n        });\n        for (var i = 0; i < nPhases; i++) {\n            this._listeners.push([]);\n        }\n    }\n    /**\n     * clears the state.\n     */\n    DocumentVisibilityMonitor.prototype.clear = function () {\n        var nPhases = this._listeners.length;\n        for (var i = 0; i < nPhases; i++) {\n            this._listeners[i] = [];\n        }\n    };\n    DocumentVisibilityMonitor.prototype._listenerCount = function () {\n        return this._listeners.reduce(function (count, phaseListeners) { return count + phaseListeners.length; }, 0);\n    };\n    /**\n     * Call all the listeners. Makes sure that all listeners for a given phase\n     * are executed before calling the listeners of the next phase.\n     * @private\n     */\n    DocumentVisibilityMonitor.prototype._emitVisible = function (isVisible) {\n        var _this = this;\n        var promise = Promise.resolve();\n        var _loop_1 = function (phase) {\n            promise = promise.then(function () { return _this._emitVisiblePhase(phase, isVisible); });\n        };\n        for (var phase = 1; phase <= this._listeners.length; phase++) {\n            _loop_1(phase);\n        }\n        return promise;\n    };\n    /**\n     * Call all the listeners for a given phase.\n     * @private\n     */\n    DocumentVisibilityMonitor.prototype._emitVisiblePhase = function (phase, isVisible) {\n        var phaseListeners = this._listeners[phase - 1];\n        return Promise.all(phaseListeners.map(function (listener) {\n            var ret = listener(isVisible);\n            return ret instanceof Promise ? ret : Promise.resolve(ret);\n        }));\n    };\n    /**\n     * Start listening to the DOM visibility state change.\n     * @private\n     */\n    DocumentVisibilityMonitor.prototype._start = function () {\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n    };\n    /**\n     * Stop listening to the DOM visibility state change.\n     * @private\n     */\n    DocumentVisibilityMonitor.prototype._stop = function () {\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n    };\n    /**\n     * Listen for the DOM visibility changes at the given phase.\n     * @param {number} phase\n     * @param {function} listener\n     * @returns {this}\n     */\n    DocumentVisibilityMonitor.prototype.onVisibilityChange = function (phase, listener) {\n        if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n            throw new Error('invalid phase: ', phase);\n        }\n        var phaseListeners = this._listeners[phase - 1];\n        phaseListeners.push(listener);\n        if (this._listenerCount() === 1) {\n            this._start();\n        }\n        return this;\n    };\n    /**\n     * Stop listening for the DOM visibility change at the given phase.\n     * @param {number} phase\n     * @param {function} listener\n     * @returns {this}\n     */\n    DocumentVisibilityMonitor.prototype.offVisibilityChange = function (phase, listener) {\n        if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n            throw new Error('invalid phase: ', phase);\n        }\n        var phaseListeners = this._listeners[phase - 1];\n        var index = phaseListeners.indexOf(listener);\n        if (index !== -1) {\n            phaseListeners.splice(index, 1);\n            if (this._listenerCount() === 0) {\n                this._stop();\n            }\n        }\n        return this;\n    };\n    return DocumentVisibilityMonitor;\n}());\nmodule.exports = new DocumentVisibilityMonitor(2);\n//# sourceMappingURL=documentvisibilitymonitor.js.map"]},"metadata":{},"sourceType":"script"}