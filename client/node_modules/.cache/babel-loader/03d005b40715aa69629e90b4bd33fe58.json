{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar guessBrowser = require('@twilio/webrtc/lib/util').guessBrowser;\n\nvar PeerConnectionV2 = require('./peerconnection');\n\nvar MediaTrackSender = require('../../media/track/sender');\n\nvar QueueingEventEmitter = require('../../queueingeventemitter');\n\nvar util = require('../../util');\n\nvar MediaConnectionError = require('../../util/twilio-video-errors').MediaConnectionError;\n\nvar isFirefox = guessBrowser() === 'firefox';\n/**\n * {@link PeerConnectionManager} manages multiple {@link PeerConnectionV2}s.\n * @extends QueueingEventEmitter\n * @emits PeerConnectionManager#candidates\n * @emits PeerConnectionManager#connectionStateChanged\n * @emits PeerConnectionManager#description\n * @emits PeerConnectionManager#iceConnectionStateChanged\n * @emits PeerConnectionManager#trackAdded\n */\n\nvar PeerConnectionManager = function (_super) {\n  __extends(PeerConnectionManager, _super);\n  /**\n   * Construct {@link PeerConnectionManager}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   */\n\n\n  function PeerConnectionManager(encodingParameters, preferredCodecs, options) {\n    var _this = _super.call(this) || this;\n\n    options = Object.assign({\n      audioContextFactory: isFirefox ? require('../../webaudio/audiocontext') : null,\n      PeerConnectionV2: PeerConnectionV2\n    }, options);\n    var audioContext = options.audioContextFactory ? options.audioContextFactory.getOrCreate(_this) : null; // NOTE(mroberts): If we're using an AudioContext, we don't need to specify\n    // `offerToReceiveAudio` in RTCOfferOptions.\n\n    var offerOptions = audioContext ? {\n      offerToReceiveVideo: true\n    } : {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n    Object.defineProperties(_this, {\n      _audioContextFactory: {\n        value: options.audioContextFactory\n      },\n      _closedPeerConnectionIds: {\n        value: new Set()\n      },\n      _configuration: {\n        writable: true,\n        value: null\n      },\n      _configurationDeferred: {\n        writable: true,\n        value: util.defer()\n      },\n      _connectionState: {\n        value: 'new',\n        writable: true\n      },\n      _dummyAudioTrackSender: {\n        value: audioContext ? new MediaTrackSender(createDummyAudioMediaStreamTrack(audioContext)) : null\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _iceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _dataTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _lastConnectionState: {\n        value: 'new',\n        writable: true\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _mediaTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _offerOptions: {\n        value: offerOptions\n      },\n      _peerConnections: {\n        value: new Map()\n      },\n      _preferredCodecs: {\n        value: preferredCodecs\n      },\n      _sessionTimeout: {\n        value: null,\n        writable: true\n      },\n      _PeerConnectionV2: {\n        value: options.PeerConnectionV2\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(PeerConnectionManager.prototype, \"connectionState\", {\n    /**\n     * A summarized RTCPeerConnectionState across all the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @property {RTCPeerConnectionState}\n     */\n    get: function get() {\n      return this._connectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PeerConnectionManager.prototype, \"iceConnectionState\", {\n    /**\n     * A summarized RTCIceConnectionState across all the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @property {RTCIceConnectionState}\n     */\n    get: function get() {\n      return this._iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Close the {@link PeerConnectionV2}s which are no longer relevant.\n   * @param {Array<object>} peerConnectionStates\n   * @returns {this}\n   */\n\n  PeerConnectionManager.prototype._closeAbsentPeerConnections = function (peerConnectionStates) {\n    var peerConnectionIds = new Set(peerConnectionStates.map(function (peerConnectionState) {\n      return peerConnectionState.id;\n    }));\n\n    this._peerConnections.forEach(function (peerConnection) {\n      if (!peerConnectionIds.has(peerConnection.id)) {\n        peerConnection._close();\n      }\n    });\n\n    return this;\n  };\n  /**\n   * Get the {@link PeerConnectionManager}'s configuration.\n   * @private\n   * @returns {Promise<object>}\n   */\n\n\n  PeerConnectionManager.prototype._getConfiguration = function () {\n    return this._configurationDeferred.promise;\n  };\n  /**\n   * Get or create a {@link PeerConnectionV2}.\n   * @private\n   * @param {string} id\n   * @param {object} [configuration]\n   * @returns {PeerConnectionV2}\n   */\n\n\n  PeerConnectionManager.prototype._getOrCreate = function (id, configuration) {\n    var _this = this;\n\n    var self = this;\n\n    var peerConnection = this._peerConnections.get(id);\n\n    if (!peerConnection) {\n      var PeerConnectionV2_1 = this._PeerConnectionV2;\n      var options = Object.assign({\n        dummyAudioMediaStreamTrack: this._dummyAudioTrackSender ? this._dummyAudioTrackSender.track : null,\n        offerOptions: this._offerOptions\n      }, this._sessionTimeout ? {\n        sessionTimeout: this._sessionTimeout\n      } : {}, configuration);\n\n      try {\n        peerConnection = new PeerConnectionV2_1(id, this._encodingParameters, this._preferredCodecs, options);\n      } catch (e) {\n        throw new MediaConnectionError();\n      }\n\n      this._peerConnections.set(peerConnection.id, peerConnection);\n\n      peerConnection.on('candidates', this.queue.bind(this, 'candidates'));\n      peerConnection.on('description', this.queue.bind(this, 'description'));\n      peerConnection.on('trackAdded', this.queue.bind(this, 'trackAdded'));\n      peerConnection.on('stateChanged', function stateChanged(state) {\n        if (state === 'closed') {\n          peerConnection.removeListener('stateChanged', stateChanged);\n\n          self._dataTrackSenders.forEach(function (sender) {\n            return peerConnection.removeDataTrackSender(sender);\n          });\n\n          self._mediaTrackSenders.forEach(function (sender) {\n            return peerConnection.removeMediaTrackSender(sender);\n          });\n\n          self._peerConnections.delete(peerConnection.id);\n\n          self._closedPeerConnectionIds.add(peerConnection.id);\n\n          updateConnectionState(self);\n          updateIceConnectionState(self);\n        }\n      });\n      peerConnection.on('connectionStateChanged', function () {\n        return updateConnectionState(_this);\n      });\n      peerConnection.on('iceConnectionStateChanged', function () {\n        return updateIceConnectionState(_this);\n      });\n\n      this._dataTrackSenders.forEach(peerConnection.addDataTrackSender, peerConnection);\n\n      this._mediaTrackSenders.forEach(peerConnection.addMediaTrackSender, peerConnection);\n\n      updateIceConnectionState(this);\n    }\n\n    return peerConnection;\n  };\n  /**\n   * Close all the {@link PeerConnectionV2}s in this {@link PeerConnectionManager}.\n   * @returns {this}\n   */\n\n\n  PeerConnectionManager.prototype.close = function () {\n    this._peerConnections.forEach(function (peerConnection) {\n      peerConnection.close();\n    });\n\n    if (this._dummyAudioTrackSender) {\n      this._dummyAudioTrackSender.stop();\n    }\n\n    if (this._audioContextFactory) {\n      this._audioContextFactory.release(this);\n    }\n\n    updateIceConnectionState(this);\n    return this;\n  };\n  /**\n   * Create a new {@link PeerConnectionV2} on this {@link PeerConnectionManager}.\n   * Then, create a new offer with the newly-created {@link PeerConnectionV2}.\n   * @return {Promise<this>}\n   */\n\n\n  PeerConnectionManager.prototype.createAndOffer = function () {\n    var _this = this;\n\n    return this._getConfiguration().then(function (configuration) {\n      var id;\n\n      do {\n        id = util.makeUUID();\n      } while (_this._peerConnections.has(id));\n\n      return _this._getOrCreate(id, configuration);\n    }).then(function (peerConnection) {\n      return peerConnection.offer();\n    }).then(function () {\n      return _this;\n    });\n  };\n  /**\n   * Get the {@link DataTrackReceiver}s and {@link MediaTrackReceiver}s of all\n   * the {@link PeerConnectionV2}s.\n   * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n   */\n\n\n  PeerConnectionManager.prototype.getTrackReceivers = function () {\n    return util.flatMap(this._peerConnections, function (peerConnection) {\n      return peerConnection.getTrackReceivers();\n    });\n  };\n  /**\n   * Get the states of all {@link PeerConnectionV2}s.\n   * @returns {Array<object>}\n   */\n\n\n  PeerConnectionManager.prototype.getStates = function () {\n    var peerConnectionStates = [];\n\n    this._peerConnections.forEach(function (peerConnection) {\n      var peerConnectionState = peerConnection.getState();\n\n      if (peerConnectionState) {\n        peerConnectionStates.push(peerConnectionState);\n      }\n    });\n\n    return peerConnectionStates;\n  };\n  /**\n   * Set the {@link PeerConnectionManager}'s configuration.\n   * @param {object} configuration\n   * @returns {this}\n   */\n\n\n  PeerConnectionManager.prototype.setConfiguration = function (configuration) {\n    if (this._configuration) {\n      this._configurationDeferred = util.defer();\n\n      this._peerConnections.forEach(function (peerConnection) {\n        peerConnection.setConfiguration(configuration);\n      });\n    }\n\n    this._configuration = configuration;\n\n    this._configurationDeferred.resolve(configuration);\n\n    return this;\n  };\n  /**\n   * Set the ICE reconnect timeout period for all {@link PeerConnectionV2}s.\n   * @param {number} period - Period in milliseconds.\n   * @returns {this}\n   */\n\n\n  PeerConnectionManager.prototype.setIceReconnectTimeout = function (period) {\n    if (this._sessionTimeout === null) {\n      this._peerConnections.forEach(function (peerConnection) {\n        peerConnection.setIceReconnectTimeout(period);\n      });\n\n      this._sessionTimeout = period;\n    }\n\n    return this;\n  };\n  /**\n   * Set the {@link DataTrackSender}s and {@link MediaTrackSender}s on the\n   * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n   * @param {Array<DataTrackSender|MediaTrackSender>} trackSenders\n   * @returns {this}\n   */\n\n\n  PeerConnectionManager.prototype.setTrackSenders = function (trackSenders) {\n    var dataTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n      return trackSender.kind === 'data';\n    }));\n    var mediaTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n      return trackSender && (trackSender.kind === 'audio' || trackSender.kind === 'video');\n    }));\n    var changes = getTrackSenderChanges(this, dataTrackSenders, mediaTrackSenders);\n    this._dataTrackSenders = dataTrackSenders;\n    this._mediaTrackSenders = mediaTrackSenders;\n    applyTrackSenderChanges(this, changes);\n    return this;\n  };\n  /**\n   * Update the {@link PeerConnectionManager}.\n   * @param {Array<object>} peerConnectionStates\n   * @param {boolean} [synced=false]\n   * @returns {Promise<this>}\n   */\n\n\n  PeerConnectionManager.prototype.update = function (peerConnectionStates, synced) {\n    var _this = this;\n\n    if (synced === void 0) {\n      synced = false;\n    }\n\n    if (synced) {\n      this._closeAbsentPeerConnections(peerConnectionStates);\n    }\n\n    return this._getConfiguration().then(function (configuration) {\n      return Promise.all(peerConnectionStates.map(function (peerConnectionState) {\n        if (_this._closedPeerConnectionIds.has(peerConnectionState.id)) {\n          return null;\n        }\n\n        var peerConnection = _this._getOrCreate(peerConnectionState.id, configuration);\n\n        return peerConnection.update(peerConnectionState);\n      }));\n    }).then(function () {\n      return _this;\n    });\n  };\n  /**\n   * Get the {@link PeerConnectionManager}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n\n\n  PeerConnectionManager.prototype.getStats = function () {\n    var peerConnections = Array.from(this._peerConnections.values());\n    return Promise.all(peerConnections.map(function (peerConnection) {\n      return peerConnection.getStats().then(function (response) {\n        return [peerConnection.id, response];\n      });\n    })).then(function (responses) {\n      return new Map(responses);\n    });\n  };\n\n  return PeerConnectionManager;\n}(QueueingEventEmitter);\n/**\n * Create a dummy audio MediaStreamTrack with the given AudioContext.\n * @private\n * @param {AudioContext} audioContext\n * @return {MediaStreamTrack}\n */\n\n\nfunction createDummyAudioMediaStreamTrack(audioContext) {\n  var mediaStreamDestination = audioContext.createMediaStreamDestination();\n  return mediaStreamDestination.stream.getAudioTracks()[0];\n}\n/**\n * @event {PeerConnectionManager#candidates}\n * @param {object} candidates\n */\n\n/**\n * @event {PeerConnectionManager#connectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#description}\n * @param {object} description\n */\n\n/**\n * @event {PeerConnectionManager#iceConnectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#trackAdded}\n * @param {MediaStreamTrack|DataTrackReceiver} mediaStreamTrackOrDataTrackReceiver\n */\n\n/**\n * Apply {@link TrackSenderChanges}.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {TrackSenderChanges} changes\n * @returns {void}\n */\n\n\nfunction applyTrackSenderChanges(peerConnectionManager, changes) {\n  if (changes.data.add.size || changes.data.remove.size || changes.media.add.size || changes.media.remove.size) {\n    peerConnectionManager._peerConnections.forEach(function (peerConnection) {\n      changes.data.remove.forEach(peerConnection.removeDataTrackSender, peerConnection);\n      changes.media.remove.forEach(peerConnection.removeMediaTrackSender, peerConnection);\n      changes.data.add.forEach(peerConnection.addDataTrackSender, peerConnection);\n      changes.media.add.forEach(peerConnection.addMediaTrackSender, peerConnection);\n\n      if (changes.media.add.size || changes.media.remove.size || changes.data.add.size && !peerConnection.isApplicationSectionNegotiated) {\n        peerConnection.offer();\n      }\n    });\n  }\n}\n/**\n * @interface DataTrackSenderChanges\n * @property {Set<DataTrackSender>} add\n * @property {Set<DataTrackSender>} remove\n */\n\n/**\n * Get the {@Link DataTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @returns {DataTrackSenderChanges} changes\n */\n\n\nfunction getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders) {\n  var dataTrackSendersToAdd = util.difference(dataTrackSenders, peerConnectionManager._dataTrackSenders);\n  var dataTrackSendersToRemove = util.difference(peerConnectionManager._dataTrackSenders, dataTrackSenders);\n  return {\n    add: dataTrackSendersToAdd,\n    remove: dataTrackSendersToRemove\n  };\n}\n/**\n * @interface TrackSenderChanges\n * @property {DataTrackSenderChanges} data\n * @property {MediaTrackSenderChanges} media\n */\n\n/**\n * Get {@link DataTrackSender} and {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {TrackSenderChanges} changes\n */\n\n\nfunction getTrackSenderChanges(peerConnectionManager, dataTrackSenders, mediaTrackSenders) {\n  return {\n    data: getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders),\n    media: getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders)\n  };\n}\n/**\n * @interface MediaTrackSenderChanges\n * @property {Set<MediaTrackSender>} add\n * @property {Set<MediaTrackSender>} remove\n */\n\n/**\n * Get the {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {MediaTrackSenderChanges} changes\n */\n\n\nfunction getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders) {\n  var mediaTrackSendersToAdd = util.difference(mediaTrackSenders, peerConnectionManager._mediaTrackSenders);\n  var mediaTrackSendersToRemove = util.difference(peerConnectionManager._mediaTrackSenders, mediaTrackSenders);\n  return {\n    add: mediaTrackSendersToAdd,\n    remove: mediaTrackSendersToRemove\n  };\n}\n/**\n * This object maps RTCIceConnectionState and RTCPeerConnectionState values to a \"rank\".\n */\n\n\nvar toRank = {\n  new: 0,\n  checking: 1,\n  connecting: 2,\n  connected: 3,\n  completed: 4,\n  disconnected: -1,\n  failed: -2,\n  closed: -3\n};\n/**\n * This object maps \"rank\" back to RTCIceConnectionState or RTCPeerConnectionState values.\n */\n\nvar fromRank;\n/**\n * `Object.keys` is not supported in older browsers, so we can't just\n * synchronously call it in this module; we need to defer invoking it until we\n * know we're in a modern environment (i.e., anything that supports WebRTC).\n * @returns {object} fromRank\n */\n\nfunction createFromRank() {\n  return Object.keys(toRank).reduce(function (fromRank, state) {\n    var _a;\n\n    return Object.assign(fromRank, (_a = {}, _a[toRank[state]] = state, _a));\n  }, {});\n}\n/**\n * Summarize RTCIceConnectionStates or RTCPeerConnectionStates.\n * @param {Array<RTCIceConnectionState>|Array<RTCPeerConnectionState>} states\n * @returns {RTCIceConnectionState|RTCPeerConnectionState} summary\n */\n\n\nfunction summarizeIceOrPeerConnectionStates(states) {\n  if (!states.length) {\n    return 'new';\n  }\n\n  fromRank = fromRank || createFromRank();\n  return states.reduce(function (state1, state2) {\n    return fromRank[Math.max(toRank[state1], toRank[state2])];\n  });\n}\n/**\n * Update the {@link PeerConnectionManager}'s `iceConnectionState`, and emit an\n * \"iceConnectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\n\n\nfunction updateIceConnectionState(pcm) {\n  pcm._lastIceConnectionState = pcm.iceConnectionState;\n  pcm._iceConnectionState = summarizeIceOrPeerConnectionStates(__spreadArray([], __read(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.iceConnectionState;\n  }));\n\n  if (pcm.iceConnectionState !== pcm._lastIceConnectionState) {\n    pcm.emit('iceConnectionStateChanged');\n  }\n}\n/**\n * Update the {@link PeerConnectionManager}'s `connectionState`, and emit a\n * \"connectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\n\n\nfunction updateConnectionState(pcm) {\n  pcm._lastConnectionState = pcm.connectionState;\n  pcm._connectionState = summarizeIceOrPeerConnectionStates(__spreadArray([], __read(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.connectionState;\n  }));\n\n  if (pcm.connectionState !== pcm._lastConnectionState) {\n    pcm.emit('connectionStateChanged');\n  }\n}\n\nmodule.exports = PeerConnectionManager;","map":{"version":3,"sources":["../../../lib/signaling/v2/peerconnectionmanager.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEQ,IAAA,YAAY,GAAK,OAAO,CAAC,yBAAD,CAAP,CAAL,YAAZ;;AACR,IAAM,gBAAgB,GAAG,OAAO,CAAC,kBAAD,CAAhC;;AACA,IAAM,gBAAgB,GAAG,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAM,oBAAoB,GAAG,OAAO,CAAC,4BAAD,CAApC;;AACA,IAAM,IAAI,GAAG,OAAO,CAAC,YAAD,CAApB;;AACQ,IAAA,oBAAoB,GAAK,OAAO,CAAC,gCAAD,CAAP,CAAL,oBAApB;;AAER,IAAM,SAAS,GAAG,YAAY,OAAO,SAArC;AAEA;;;;;;;;AAQG;;AACH,IAAA,qBAAA,GAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;AAClC;;;;;AAKG;;;AACH,WAAA,qBAAA,CAAY,kBAAZ,EAAgC,eAAhC,EAAiD,OAAjD,EAAwD;AAAxD,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAGE,IAAA,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc;AACtB,MAAA,mBAAmB,EAAE,SAAS,GAC1B,OAAO,CAAC,6BAAD,CADmB,GAE1B,IAHkB;AAItB,MAAA,gBAAgB,EAAA;AAJM,KAAd,EAKP,OALO,CAAV;AAOA,QAAM,YAAY,GAAG,OAAO,CAAC,mBAAR,GACjB,OAAO,CAAC,mBAAR,CAA4B,WAA5B,CAAwC,KAAxC,CADiB,GAEjB,IAFJ,CAVsD,CActD;AACA;;AACA,QAAM,YAAY,GAAG,YAAY,GAC7B;AAAE,MAAA,mBAAmB,EAAE;AAAvB,KAD6B,GAE7B;AAAE,MAAA,mBAAmB,EAAE,IAAvB;AAA6B,MAAA,mBAAmB,EAAE;AAAlD,KAFJ;AAIA,IAAA,MAAM,CAAC,gBAAP,CAAwB,KAAxB,EAA8B;AAC5B,MAAA,oBAAoB,EAAE;AACpB,QAAA,KAAK,EAAE,OAAO,CAAC;AADK,OADM;AAI5B,MAAA,wBAAwB,EAAE;AACxB,QAAA,KAAK,EAAE,IAAI,GAAJ;AADiB,OAJE;AAO5B,MAAA,cAAc,EAAE;AACd,QAAA,QAAQ,EAAE,IADI;AAEd,QAAA,KAAK,EAAE;AAFO,OAPY;AAW5B,MAAA,sBAAsB,EAAE;AACtB,QAAA,QAAQ,EAAE,IADY;AAEtB,QAAA,KAAK,EAAE,IAAI,CAAC,KAAL;AAFe,OAXI;AAe5B,MAAA,gBAAgB,EAAE;AAChB,QAAA,KAAK,EAAE,KADS;AAEhB,QAAA,QAAQ,EAAE;AAFM,OAfU;AAmB5B,MAAA,sBAAsB,EAAE;AACtB,QAAA,KAAK,EAAE,YAAY,GACf,IAAI,gBAAJ,CAAqB,gCAAgC,CAAC,YAAD,CAArD,CADe,GAEf;AAHkB,OAnBI;AAwB5B,MAAA,mBAAmB,EAAE;AACnB,QAAA,KAAK,EAAE;AADY,OAxBO;AA2B5B,MAAA,mBAAmB,EAAE;AACnB,QAAA,QAAQ,EAAE,IADS;AAEnB,QAAA,KAAK,EAAE;AAFY,OA3BO;AA+B5B,MAAA,iBAAiB,EAAE;AACjB,QAAA,QAAQ,EAAE,IADO;AAEjB,QAAA,KAAK,EAAE,IAAI,GAAJ;AAFU,OA/BS;AAmC5B,MAAA,oBAAoB,EAAE;AACpB,QAAA,KAAK,EAAE,KADa;AAEpB,QAAA,QAAQ,EAAE;AAFU,OAnCM;AAuC5B,MAAA,uBAAuB,EAAE;AACvB,QAAA,QAAQ,EAAE,IADa;AAEvB,QAAA,KAAK,EAAE;AAFgB,OAvCG;AA2C5B,MAAA,kBAAkB,EAAE;AAClB,QAAA,QAAQ,EAAE,IADQ;AAElB,QAAA,KAAK,EAAE,IAAI,GAAJ;AAFW,OA3CQ;AA+C5B,MAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE;AADM,OA/Ca;AAkD5B,MAAA,gBAAgB,EAAE;AAChB,QAAA,KAAK,EAAE,IAAI,GAAJ;AADS,OAlDU;AAqD5B,MAAA,gBAAgB,EAAE;AAChB,QAAA,KAAK,EAAE;AADS,OArDU;AAwD5B,MAAA,eAAe,EAAE;AACf,QAAA,KAAK,EAAE,IADQ;AAEf,QAAA,QAAQ,EAAE;AAFK,OAxDW;AA4D5B,MAAA,iBAAiB,EAAE;AACjB,QAAA,KAAK,EAAE,OAAO,CAAC;AADE;AA5DS,KAA9B;;AAgED;;AAOD,EAAA,MAAA,CAAA,cAAA,CAAI,qBAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;AALnB;;;;AAIG;SACH,eAAA;AACE,aAAO,KAAK,gBAAZ;AACD,KAFkB;qBAAA;;AAAA,GAAnB;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,qBAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AALtB;;;;AAIG;SACH,eAAA;AACE,aAAO,KAAK,mBAAZ;AACD,KAFqB;qBAAA;;AAAA,GAAtB;AAIA;;;;AAIG;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,2BAAA,GAAA,UAA4B,oBAA5B,EAAgD;AAC9C,QAAM,iBAAiB,GAAG,IAAI,GAAJ,CAAQ,oBAAoB,CAAC,GAArB,CAAyB,UAAA,mBAAA,EAAmB;AAAI,aAAA,mBAAmB,CAAnB,EAAA;AAAsB,KAAtE,CAAR,CAA1B;;AACA,SAAK,gBAAL,CAAsB,OAAtB,CAA8B,UAAA,cAAA,EAAc;AAC1C,UAAI,CAAC,iBAAiB,CAAC,GAAlB,CAAsB,cAAc,CAAC,EAArC,CAAL,EAA+C;AAC7C,QAAA,cAAc,CAAC,MAAf;AACD;AACF,KAJD;;AAKA,WAAO,IAAP;AACD,GARD;AAUA;;;;AAIG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,WAAO,KAAK,sBAAL,CAA4B,OAAnC;AACD,GAFD;AAIA;;;;;;AAMG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,EAAb,EAAiB,aAAjB,EAA8B;AAA9B,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,IAAI,GAAG,IAAb;;AACA,QAAI,cAAc,GAAG,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,EAA1B,CAArB;;AACA,QAAI,CAAC,cAAL,EAAqB;AACnB,UAAM,kBAAgB,GAAG,KAAK,iBAA9B;AAEA,UAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc;AAC5B,QAAA,0BAA0B,EAAE,KAAK,sBAAL,GACxB,KAAK,sBAAL,CAA4B,KADJ,GAExB,IAHwB;AAI5B,QAAA,YAAY,EAAE,KAAK;AAJS,OAAd,EAKb,KAAK,eAAL,GAAuB;AACxB,QAAA,cAAc,EAAE,KAAK;AADG,OAAvB,GAEC,EAPY,EAOR,aAPQ,CAAhB;;AASA,UAAI;AACF,QAAA,cAAc,GAAG,IAAI,kBAAJ,CAAqB,EAArB,EAAyB,KAAK,mBAA9B,EAAmD,KAAK,gBAAxD,EAA0E,OAA1E,CAAjB;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,cAAM,IAAI,oBAAJ,EAAN;AACD;;AAED,WAAK,gBAAL,CAAsB,GAAtB,CAA0B,cAAc,CAAC,EAAzC,EAA6C,cAA7C;;AACA,MAAA,cAAc,CAAC,EAAf,CAAkB,YAAlB,EAAgC,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,EAAsB,YAAtB,CAAhC;AACA,MAAA,cAAc,CAAC,EAAf,CAAkB,aAAlB,EAAiC,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,EAAsB,aAAtB,CAAjC;AACA,MAAA,cAAc,CAAC,EAAf,CAAkB,YAAlB,EAAgC,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,EAAsB,YAAtB,CAAhC;AACA,MAAA,cAAc,CAAC,EAAf,CAAkB,cAAlB,EAAkC,SAAS,YAAT,CAAsB,KAAtB,EAA2B;AAC3D,YAAI,KAAK,KAAK,QAAd,EAAwB;AACtB,UAAA,cAAc,CAAC,cAAf,CAA8B,cAA9B,EAA8C,YAA9C;;AACA,UAAA,IAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,UAAA,MAAA,EAAM;AAAI,mBAAA,cAAc,CAAC,qBAAf,CAAA,MAAA,CAAA;AAA4C,WAArF;;AACA,UAAA,IAAI,CAAC,kBAAL,CAAwB,OAAxB,CAAgC,UAAA,MAAA,EAAM;AAAI,mBAAA,cAAc,CAAC,sBAAf,CAAA,MAAA,CAAA;AAA6C,WAAvF;;AACA,UAAA,IAAI,CAAC,gBAAL,CAAsB,MAAtB,CAA6B,cAAc,CAAC,EAA5C;;AACA,UAAA,IAAI,CAAC,wBAAL,CAA8B,GAA9B,CAAkC,cAAc,CAAC,EAAjD;;AACA,UAAA,qBAAqB,CAAC,IAAD,CAArB;AACA,UAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD;AACF,OAVD;AAWA,MAAA,cAAc,CAAC,EAAf,CAAkB,wBAAlB,EAA4C,YAAA;AAAM,eAAA,qBAAqB,CAArB,KAAqB,CAArB;AAA2B,OAA7E;AACA,MAAA,cAAc,CAAC,EAAf,CAAkB,2BAAlB,EAA+C,YAAA;AAAM,eAAA,wBAAwB,CAAxB,KAAwB,CAAxB;AAA8B,OAAnF;;AAEA,WAAK,iBAAL,CAAuB,OAAvB,CAA+B,cAAc,CAAC,kBAA9C,EAAkE,cAAlE;;AACA,WAAK,kBAAL,CAAwB,OAAxB,CAAgC,cAAc,CAAC,mBAA/C,EAAoE,cAApE;;AAEA,MAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD;;AACD,WAAO,cAAP;AACD,GA7CD;AA+CA;;;AAGG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,gBAAL,CAAsB,OAAtB,CAA8B,UAAA,cAAA,EAAc;AAC1C,MAAA,cAAc,CAAC,KAAf;AACD,KAFD;;AAGA,QAAI,KAAK,sBAAT,EAAiC;AAC/B,WAAK,sBAAL,CAA4B,IAA5B;AACD;;AACD,QAAI,KAAK,oBAAT,EAA+B;AAC7B,WAAK,oBAAL,CAA0B,OAA1B,CAAkC,IAAlC;AACD;;AACD,IAAA,wBAAwB,CAAC,IAAD,CAAxB;AACA,WAAO,IAAP;AACD,GAZD;AAcA;;;;AAIG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,KAAK,iBAAL,GAAyB,IAAzB,CAA8B,UAAA,aAAA,EAAa;AAChD,UAAI,EAAJ;;AACA,SAAG;AACD,QAAA,EAAE,GAAG,IAAI,CAAC,QAAL,EAAL;AACD,OAFD,QAES,KAAI,CAAC,gBAAL,CAAsB,GAAtB,CAA0B,EAA1B,CAFT;;AAIA,aAAO,KAAI,CAAC,YAAL,CAAkB,EAAlB,EAAsB,aAAtB,CAAP;AACD,KAPM,EAOJ,IAPI,CAOC,UAAA,cAAA,EAAc;AACpB,aAAO,cAAc,CAAC,KAAf,EAAP;AACD,KATM,EASJ,IATI,CASC,YAAA;AACN,aAAO,KAAP;AACD,KAXM,CAAP;AAYD,GAbD;AAeA;;;;AAIG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,WAAO,IAAI,CAAC,OAAL,CAAa,KAAK,gBAAlB,EAAoC,UAAA,cAAA,EAAc;AAAI,aAAA,cAAc,CAAd,iBAAA,EAAA;AAAkC,KAAxF,CAAP;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,QAAM,oBAAoB,GAAG,EAA7B;;AACA,SAAK,gBAAL,CAAsB,OAAtB,CAA8B,UAAA,cAAA,EAAc;AAC1C,UAAM,mBAAmB,GAAG,cAAc,CAAC,QAAf,EAA5B;;AACA,UAAI,mBAAJ,EAAyB;AACvB,QAAA,oBAAoB,CAAC,IAArB,CAA0B,mBAA1B;AACD;AACF,KALD;;AAMA,WAAO,oBAAP;AACD,GATD;AAWA;;;;AAIG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,aAAjB,EAA8B;AAC5B,QAAI,KAAK,cAAT,EAAyB;AACvB,WAAK,sBAAL,GAA8B,IAAI,CAAC,KAAL,EAA9B;;AACA,WAAK,gBAAL,CAAsB,OAAtB,CAA8B,UAAA,cAAA,EAAc;AAC1C,QAAA,cAAc,CAAC,gBAAf,CAAgC,aAAhC;AACD,OAFD;AAGD;;AACD,SAAK,cAAL,GAAsB,aAAtB;;AACA,SAAK,sBAAL,CAA4B,OAA5B,CAAoC,aAApC;;AACA,WAAO,IAAP;AACD,GAVD;AAYA;;;;AAIG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,UAAuB,MAAvB,EAA6B;AAC3B,QAAI,KAAK,eAAL,KAAyB,IAA7B,EAAmC;AACjC,WAAK,gBAAL,CAAsB,OAAtB,CAA8B,UAAA,cAAA,EAAc;AAC1C,QAAA,cAAc,CAAC,sBAAf,CAAsC,MAAtC;AACD,OAFD;;AAGA,WAAK,eAAL,GAAuB,MAAvB;AACD;;AACD,WAAO,IAAP;AACD,GARD;AAUA;;;;;AAKG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,YAAhB,EAA4B;AAC1B,QAAM,gBAAgB,GAAG,IAAI,GAAJ,CAAQ,YAAY,CAAC,MAAb,CAAoB,UAAA,WAAA,EAAW;AAAI,aAAA,WAAW,CAAC,IAAZ,KAAA,MAAA;AAA2B,KAA9D,CAAR,CAAzB;AAEA,QAAM,iBAAiB,GAAG,IAAI,GAAJ,CAAQ,YAAY,CAC3C,MAD+B,CACxB,UAAA,WAAA,EAAW;AAAI,aAAA,WAAW,KAAK,WAAW,CAAC,IAAZ,KAAqB,OAArB,IAAgC,WAAW,CAAC,IAAZ,KAAhD,OAAW,CAAX;AAA6E,KADpE,CAAR,CAA1B;AAGA,QAAM,OAAO,GAAG,qBAAqB,CAAC,IAAD,EAAO,gBAAP,EAAyB,iBAAzB,CAArC;AACA,SAAK,iBAAL,GAAyB,gBAAzB;AACA,SAAK,kBAAL,GAA0B,iBAA1B;AACA,IAAA,uBAAuB,CAAC,IAAD,EAAO,OAAP,CAAvB;AAEA,WAAO,IAAP;AACD,GAZD;AAcA;;;;;AAKG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,oBAAP,EAA6B,MAA7B,EAA2C;AAA3C,QAAA,KAAA,GAAA,IAAA;;AAA6B,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,KAAA;AAAc;;AACzC,QAAI,MAAJ,EAAY;AACV,WAAK,2BAAL,CAAiC,oBAAjC;AACD;;AACD,WAAO,KAAK,iBAAL,GAAyB,IAAzB,CAA8B,UAAA,aAAA,EAAa;AAChD,aAAO,OAAO,CAAC,GAAR,CAAY,oBAAoB,CAAC,GAArB,CAAyB,UAAA,mBAAA,EAAmB;AAC7D,YAAI,KAAI,CAAC,wBAAL,CAA8B,GAA9B,CAAkC,mBAAmB,CAAC,EAAtD,CAAJ,EAA+D;AAC7D,iBAAO,IAAP;AACD;;AACD,YAAM,cAAc,GAAG,KAAI,CAAC,YAAL,CAAkB,mBAAmB,CAAC,EAAtC,EAA0C,aAA1C,CAAvB;;AACA,eAAO,cAAc,CAAC,MAAf,CAAsB,mBAAtB,CAAP;AACD,OANkB,CAAZ,CAAP;AAOD,KARM,EAQJ,IARI,CAQC,YAAA;AACN,aAAO,KAAP;AACD,KAVM,CAAP;AAWD,GAfD;AAiBA;;;AAGG;;;AACH,EAAA,qBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,eAAe,GAAG,KAAK,CAAC,IAAN,CAAW,KAAK,gBAAL,CAAsB,MAAtB,EAAX,CAAxB;AACA,WAAO,OAAO,CAAC,GAAR,CAAY,eAAe,CAAC,GAAhB,CAAoB,UAAA,cAAA,EAAc;AAAI,aAAA,cAAc,CAAC,QAAf,GAA0B,IAA1B,CAA+B,UAAA,QAAA,EAAQ;AAAI,eAAA,CAClG,cAAc,CAAC,EADmF,EAElG,QAFkG,CAAA;AAA3C,OAAA,CAAA;AAGvD,KAHiB,CAAZ,EAGF,IAHE,CAGG,UAAA,SAAA,EAAS;AAAI,aAAA,IAAI,GAAJ,CAAA,SAAA,CAAA;AAAkB,KAHlC,CAAP;AAID,GAND;;AAOF,SAAA,qBAAA;AAAC,CAjVD,CAAoC,oBAApC,CAAA;AAmVA;;;;;AAKG;;;AACH,SAAS,gCAAT,CAA0C,YAA1C,EAAsD;AACpD,MAAM,sBAAsB,GAAG,YAAY,CAAC,4BAAb,EAA/B;AACA,SAAO,sBAAsB,CAAC,MAAvB,CAA8B,cAA9B,GAA+C,CAA/C,CAAP;AACD;AAED;;;AAGG;;AAEH;;AAEG;;AAEH;;;AAGG;;AAEH;;AAEG;;AAEH;;;AAGG;;AAEH;;;;;AAKG;;;AACH,SAAS,uBAAT,CAAiC,qBAAjC,EAAwD,OAAxD,EAA+D;AAC7D,MAAI,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAjB,IACC,OAAO,CAAC,IAAR,CAAa,MAAb,CAAoB,IADrB,IAEC,OAAO,CAAC,KAAR,CAAc,GAAd,CAAkB,IAFnB,IAGC,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,IAH1B,EAGgC;AAC9B,IAAA,qBAAqB,CAAC,gBAAtB,CAAuC,OAAvC,CAA+C,UAAA,cAAA,EAAc;AAC3D,MAAA,OAAO,CAAC,IAAR,CAAa,MAAb,CAAoB,OAApB,CAA4B,cAAc,CAAC,qBAA3C,EAAkE,cAAlE;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,OAArB,CAA6B,cAAc,CAAC,sBAA5C,EAAoE,cAApE;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAjB,CAAyB,cAAc,CAAC,kBAAxC,EAA4D,cAA5D;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,GAAd,CAAkB,OAAlB,CAA0B,cAAc,CAAC,mBAAzC,EAA8D,cAA9D;;AACA,UAAI,OAAO,CAAC,KAAR,CAAc,GAAd,CAAkB,IAAlB,IACC,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,IADtB,IAEE,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAjB,IAAyB,CAAC,cAAc,CAAC,8BAF/C,EAEgF;AAC9E,QAAA,cAAc,CAAC,KAAf;AACD;AACF,KAVD;AAWD;AACF;AAED;;;;AAIG;;AAEH;;;;;AAKG;;;AACH,SAAS,yBAAT,CAAmC,qBAAnC,EAA0D,gBAA1D,EAA0E;AACxE,MAAM,qBAAqB,GAAG,IAAI,CAAC,UAAL,CAAgB,gBAAhB,EAAkC,qBAAqB,CAAC,iBAAxD,CAA9B;AACA,MAAM,wBAAwB,GAAG,IAAI,CAAC,UAAL,CAAgB,qBAAqB,CAAC,iBAAtC,EAAyD,gBAAzD,CAAjC;AACA,SAAO;AACL,IAAA,GAAG,EAAE,qBADA;AAEL,IAAA,MAAM,EAAE;AAFH,GAAP;AAID;AAED;;;;AAIG;;AAEH;;;;;;AAMG;;;AACH,SAAS,qBAAT,CAA+B,qBAA/B,EAAsD,gBAAtD,EAAwE,iBAAxE,EAAyF;AACvF,SAAO;AACL,IAAA,IAAI,EAAE,yBAAyB,CAAC,qBAAD,EAAwB,gBAAxB,CAD1B;AAEL,IAAA,KAAK,EAAE,0BAA0B,CAAC,qBAAD,EAAwB,iBAAxB;AAF5B,GAAP;AAID;AAED;;;;AAIG;;AAEH;;;;;AAKG;;;AACH,SAAS,0BAAT,CAAoC,qBAApC,EAA2D,iBAA3D,EAA4E;AAC1E,MAAM,sBAAsB,GAAG,IAAI,CAAC,UAAL,CAAgB,iBAAhB,EAAmC,qBAAqB,CAAC,kBAAzD,CAA/B;AACA,MAAM,yBAAyB,GAAG,IAAI,CAAC,UAAL,CAAgB,qBAAqB,CAAC,kBAAtC,EAA0D,iBAA1D,CAAlC;AACA,SAAO;AACL,IAAA,GAAG,EAAE,sBADA;AAEL,IAAA,MAAM,EAAE;AAFH,GAAP;AAID;AAED;;AAEG;;;AACH,IAAM,MAAM,GAAG;AACb,EAAA,GAAG,EAAE,CADQ;AAEb,EAAA,QAAQ,EAAE,CAFG;AAGb,EAAA,UAAU,EAAE,CAHC;AAIb,EAAA,SAAS,EAAE,CAJE;AAKb,EAAA,SAAS,EAAE,CALE;AAMb,EAAA,YAAY,EAAE,CAAC,CANF;AAOb,EAAA,MAAM,EAAE,CAAC,CAPI;AAQb,EAAA,MAAM,EAAE,CAAC;AARI,CAAf;AAWA;;AAEG;;AACH,IAAI,QAAJ;AAEA;;;;;AAKG;;AACH,SAAS,cAAT,GAAuB;AACrB,SAAO,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,UAAC,QAAD,EAAW,KAAX,EAAgB;;;AAChD,WAAO,MAAM,CAAC,MAAP,CAAc,QAAd,GAAsB,EAAA,GAAA,EAAA,EAAI,EAAA,CAAC,MAAM,CAAC,KAAD,CAAP,CAAA,GAAiB,KAArB,EAA0B,EAAhD,EAAP;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD;AAED;;;;AAIG;;;AACH,SAAS,kCAAT,CAA4C,MAA5C,EAAkD;AAChD,MAAI,CAAC,MAAM,CAAC,MAAZ,EAAoB;AAClB,WAAO,KAAP;AACD;;AACD,EAAA,QAAQ,GAAG,QAAQ,IAAI,cAAc,EAArC;AACA,SAAO,MAAM,CAAC,MAAP,CAAc,UAAC,MAAD,EAAS,MAAT,EAAe;AAClC,WAAO,QAAQ,CAAC,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,MAAD,CAAf,EAAyB,MAAM,CAAC,MAAD,CAA/B,CAAD,CAAf;AACD,GAFM,CAAP;AAGD;AAED;;;;;AAKG;;;AACH,SAAS,wBAAT,CAAkC,GAAlC,EAAqC;AACnC,EAAA,GAAG,CAAC,uBAAJ,GAA8B,GAAG,CAAC,kBAAlC;AACA,EAAA,GAAG,CAAC,mBAAJ,GAA0B,kCAAkC,CAC1D,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAAJ,CAAA,CAAA,CAAmC,GAAnC,CAAuC,UAAA,IAAA,EAAI;AAAI,WAAA,IAAI,CAAJ,kBAAA;AAAuB,GAAtE,CAD0D,CAA5D;;AAEA,MAAI,GAAG,CAAC,kBAAJ,KAA2B,GAAG,CAAC,uBAAnC,EAA4D;AAC1D,IAAA,GAAG,CAAC,IAAJ,CAAS,2BAAT;AACD;AACF;AAED;;;;;AAKG;;;AACH,SAAS,qBAAT,CAA+B,GAA/B,EAAkC;AAChC,EAAA,GAAG,CAAC,oBAAJ,GAA2B,GAAG,CAAC,eAA/B;AACA,EAAA,GAAG,CAAC,gBAAJ,GAAuB,kCAAkC,CACvD,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAAJ,CAAA,CAAA,CAAmC,GAAnC,CAAuC,UAAA,IAAA,EAAI;AAAI,WAAA,IAAI,CAAJ,eAAA;AAAoB,GAAnE,CADuD,CAAzD;;AAEA,MAAI,GAAG,CAAC,eAAJ,KAAwB,GAAG,CAAC,oBAAhC,EAAsD;AACpD,IAAA,GAAG,CAAC,IAAJ,CAAS,wBAAT;AACD;AACF;;AAED,MAAM,CAAC,OAAP,GAAiB,qBAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar guessBrowser = require('@twilio/webrtc/lib/util').guessBrowser;\nvar PeerConnectionV2 = require('./peerconnection');\nvar MediaTrackSender = require('../../media/track/sender');\nvar QueueingEventEmitter = require('../../queueingeventemitter');\nvar util = require('../../util');\nvar MediaConnectionError = require('../../util/twilio-video-errors').MediaConnectionError;\nvar isFirefox = guessBrowser() === 'firefox';\n/**\n * {@link PeerConnectionManager} manages multiple {@link PeerConnectionV2}s.\n * @extends QueueingEventEmitter\n * @emits PeerConnectionManager#candidates\n * @emits PeerConnectionManager#connectionStateChanged\n * @emits PeerConnectionManager#description\n * @emits PeerConnectionManager#iceConnectionStateChanged\n * @emits PeerConnectionManager#trackAdded\n */\nvar PeerConnectionManager = /** @class */ (function (_super) {\n    __extends(PeerConnectionManager, _super);\n    /**\n     * Construct {@link PeerConnectionManager}.\n     * @param {EncodingParametersImpl} encodingParameters\n     * @param {PreferredCodecs} preferredCodecs\n     * @param {object} options\n     */\n    function PeerConnectionManager(encodingParameters, preferredCodecs, options) {\n        var _this = _super.call(this) || this;\n        options = Object.assign({\n            audioContextFactory: isFirefox\n                ? require('../../webaudio/audiocontext')\n                : null,\n            PeerConnectionV2: PeerConnectionV2\n        }, options);\n        var audioContext = options.audioContextFactory\n            ? options.audioContextFactory.getOrCreate(_this)\n            : null;\n        // NOTE(mroberts): If we're using an AudioContext, we don't need to specify\n        // `offerToReceiveAudio` in RTCOfferOptions.\n        var offerOptions = audioContext\n            ? { offerToReceiveVideo: true }\n            : { offerToReceiveAudio: true, offerToReceiveVideo: true };\n        Object.defineProperties(_this, {\n            _audioContextFactory: {\n                value: options.audioContextFactory\n            },\n            _closedPeerConnectionIds: {\n                value: new Set()\n            },\n            _configuration: {\n                writable: true,\n                value: null\n            },\n            _configurationDeferred: {\n                writable: true,\n                value: util.defer()\n            },\n            _connectionState: {\n                value: 'new',\n                writable: true\n            },\n            _dummyAudioTrackSender: {\n                value: audioContext\n                    ? new MediaTrackSender(createDummyAudioMediaStreamTrack(audioContext))\n                    : null\n            },\n            _encodingParameters: {\n                value: encodingParameters\n            },\n            _iceConnectionState: {\n                writable: true,\n                value: 'new'\n            },\n            _dataTrackSenders: {\n                writable: true,\n                value: new Set()\n            },\n            _lastConnectionState: {\n                value: 'new',\n                writable: true\n            },\n            _lastIceConnectionState: {\n                writable: true,\n                value: 'new'\n            },\n            _mediaTrackSenders: {\n                writable: true,\n                value: new Set()\n            },\n            _offerOptions: {\n                value: offerOptions\n            },\n            _peerConnections: {\n                value: new Map()\n            },\n            _preferredCodecs: {\n                value: preferredCodecs\n            },\n            _sessionTimeout: {\n                value: null,\n                writable: true\n            },\n            _PeerConnectionV2: {\n                value: options.PeerConnectionV2\n            }\n        });\n        return _this;\n    }\n    Object.defineProperty(PeerConnectionManager.prototype, \"connectionState\", {\n        /**\n         * A summarized RTCPeerConnectionState across all the\n         * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n         * @property {RTCPeerConnectionState}\n         */\n        get: function () {\n            return this._connectionState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PeerConnectionManager.prototype, \"iceConnectionState\", {\n        /**\n         * A summarized RTCIceConnectionState across all the\n         * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n         * @property {RTCIceConnectionState}\n         */\n        get: function () {\n            return this._iceConnectionState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Close the {@link PeerConnectionV2}s which are no longer relevant.\n     * @param {Array<object>} peerConnectionStates\n     * @returns {this}\n     */\n    PeerConnectionManager.prototype._closeAbsentPeerConnections = function (peerConnectionStates) {\n        var peerConnectionIds = new Set(peerConnectionStates.map(function (peerConnectionState) { return peerConnectionState.id; }));\n        this._peerConnections.forEach(function (peerConnection) {\n            if (!peerConnectionIds.has(peerConnection.id)) {\n                peerConnection._close();\n            }\n        });\n        return this;\n    };\n    /**\n     * Get the {@link PeerConnectionManager}'s configuration.\n     * @private\n     * @returns {Promise<object>}\n     */\n    PeerConnectionManager.prototype._getConfiguration = function () {\n        return this._configurationDeferred.promise;\n    };\n    /**\n     * Get or create a {@link PeerConnectionV2}.\n     * @private\n     * @param {string} id\n     * @param {object} [configuration]\n     * @returns {PeerConnectionV2}\n     */\n    PeerConnectionManager.prototype._getOrCreate = function (id, configuration) {\n        var _this = this;\n        var self = this;\n        var peerConnection = this._peerConnections.get(id);\n        if (!peerConnection) {\n            var PeerConnectionV2_1 = this._PeerConnectionV2;\n            var options = Object.assign({\n                dummyAudioMediaStreamTrack: this._dummyAudioTrackSender\n                    ? this._dummyAudioTrackSender.track\n                    : null,\n                offerOptions: this._offerOptions\n            }, this._sessionTimeout ? {\n                sessionTimeout: this._sessionTimeout\n            } : {}, configuration);\n            try {\n                peerConnection = new PeerConnectionV2_1(id, this._encodingParameters, this._preferredCodecs, options);\n            }\n            catch (e) {\n                throw new MediaConnectionError();\n            }\n            this._peerConnections.set(peerConnection.id, peerConnection);\n            peerConnection.on('candidates', this.queue.bind(this, 'candidates'));\n            peerConnection.on('description', this.queue.bind(this, 'description'));\n            peerConnection.on('trackAdded', this.queue.bind(this, 'trackAdded'));\n            peerConnection.on('stateChanged', function stateChanged(state) {\n                if (state === 'closed') {\n                    peerConnection.removeListener('stateChanged', stateChanged);\n                    self._dataTrackSenders.forEach(function (sender) { return peerConnection.removeDataTrackSender(sender); });\n                    self._mediaTrackSenders.forEach(function (sender) { return peerConnection.removeMediaTrackSender(sender); });\n                    self._peerConnections.delete(peerConnection.id);\n                    self._closedPeerConnectionIds.add(peerConnection.id);\n                    updateConnectionState(self);\n                    updateIceConnectionState(self);\n                }\n            });\n            peerConnection.on('connectionStateChanged', function () { return updateConnectionState(_this); });\n            peerConnection.on('iceConnectionStateChanged', function () { return updateIceConnectionState(_this); });\n            this._dataTrackSenders.forEach(peerConnection.addDataTrackSender, peerConnection);\n            this._mediaTrackSenders.forEach(peerConnection.addMediaTrackSender, peerConnection);\n            updateIceConnectionState(this);\n        }\n        return peerConnection;\n    };\n    /**\n     * Close all the {@link PeerConnectionV2}s in this {@link PeerConnectionManager}.\n     * @returns {this}\n     */\n    PeerConnectionManager.prototype.close = function () {\n        this._peerConnections.forEach(function (peerConnection) {\n            peerConnection.close();\n        });\n        if (this._dummyAudioTrackSender) {\n            this._dummyAudioTrackSender.stop();\n        }\n        if (this._audioContextFactory) {\n            this._audioContextFactory.release(this);\n        }\n        updateIceConnectionState(this);\n        return this;\n    };\n    /**\n     * Create a new {@link PeerConnectionV2} on this {@link PeerConnectionManager}.\n     * Then, create a new offer with the newly-created {@link PeerConnectionV2}.\n     * @return {Promise<this>}\n     */\n    PeerConnectionManager.prototype.createAndOffer = function () {\n        var _this = this;\n        return this._getConfiguration().then(function (configuration) {\n            var id;\n            do {\n                id = util.makeUUID();\n            } while (_this._peerConnections.has(id));\n            return _this._getOrCreate(id, configuration);\n        }).then(function (peerConnection) {\n            return peerConnection.offer();\n        }).then(function () {\n            return _this;\n        });\n    };\n    /**\n     * Get the {@link DataTrackReceiver}s and {@link MediaTrackReceiver}s of all\n     * the {@link PeerConnectionV2}s.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n    PeerConnectionManager.prototype.getTrackReceivers = function () {\n        return util.flatMap(this._peerConnections, function (peerConnection) { return peerConnection.getTrackReceivers(); });\n    };\n    /**\n     * Get the states of all {@link PeerConnectionV2}s.\n     * @returns {Array<object>}\n     */\n    PeerConnectionManager.prototype.getStates = function () {\n        var peerConnectionStates = [];\n        this._peerConnections.forEach(function (peerConnection) {\n            var peerConnectionState = peerConnection.getState();\n            if (peerConnectionState) {\n                peerConnectionStates.push(peerConnectionState);\n            }\n        });\n        return peerConnectionStates;\n    };\n    /**\n     * Set the {@link PeerConnectionManager}'s configuration.\n     * @param {object} configuration\n     * @returns {this}\n     */\n    PeerConnectionManager.prototype.setConfiguration = function (configuration) {\n        if (this._configuration) {\n            this._configurationDeferred = util.defer();\n            this._peerConnections.forEach(function (peerConnection) {\n                peerConnection.setConfiguration(configuration);\n            });\n        }\n        this._configuration = configuration;\n        this._configurationDeferred.resolve(configuration);\n        return this;\n    };\n    /**\n     * Set the ICE reconnect timeout period for all {@link PeerConnectionV2}s.\n     * @param {number} period - Period in milliseconds.\n     * @returns {this}\n     */\n    PeerConnectionManager.prototype.setIceReconnectTimeout = function (period) {\n        if (this._sessionTimeout === null) {\n            this._peerConnections.forEach(function (peerConnection) {\n                peerConnection.setIceReconnectTimeout(period);\n            });\n            this._sessionTimeout = period;\n        }\n        return this;\n    };\n    /**\n     * Set the {@link DataTrackSender}s and {@link MediaTrackSender}s on the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @param {Array<DataTrackSender|MediaTrackSender>} trackSenders\n     * @returns {this}\n     */\n    PeerConnectionManager.prototype.setTrackSenders = function (trackSenders) {\n        var dataTrackSenders = new Set(trackSenders.filter(function (trackSender) { return trackSender.kind === 'data'; }));\n        var mediaTrackSenders = new Set(trackSenders\n            .filter(function (trackSender) { return trackSender && (trackSender.kind === 'audio' || trackSender.kind === 'video'); }));\n        var changes = getTrackSenderChanges(this, dataTrackSenders, mediaTrackSenders);\n        this._dataTrackSenders = dataTrackSenders;\n        this._mediaTrackSenders = mediaTrackSenders;\n        applyTrackSenderChanges(this, changes);\n        return this;\n    };\n    /**\n     * Update the {@link PeerConnectionManager}.\n     * @param {Array<object>} peerConnectionStates\n     * @param {boolean} [synced=false]\n     * @returns {Promise<this>}\n     */\n    PeerConnectionManager.prototype.update = function (peerConnectionStates, synced) {\n        var _this = this;\n        if (synced === void 0) { synced = false; }\n        if (synced) {\n            this._closeAbsentPeerConnections(peerConnectionStates);\n        }\n        return this._getConfiguration().then(function (configuration) {\n            return Promise.all(peerConnectionStates.map(function (peerConnectionState) {\n                if (_this._closedPeerConnectionIds.has(peerConnectionState.id)) {\n                    return null;\n                }\n                var peerConnection = _this._getOrCreate(peerConnectionState.id, configuration);\n                return peerConnection.update(peerConnectionState);\n            }));\n        }).then(function () {\n            return _this;\n        });\n    };\n    /**\n     * Get the {@link PeerConnectionManager}'s media statistics.\n     * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n     */\n    PeerConnectionManager.prototype.getStats = function () {\n        var peerConnections = Array.from(this._peerConnections.values());\n        return Promise.all(peerConnections.map(function (peerConnection) { return peerConnection.getStats().then(function (response) { return [\n            peerConnection.id,\n            response\n        ]; }); })).then(function (responses) { return new Map(responses); });\n    };\n    return PeerConnectionManager;\n}(QueueingEventEmitter));\n/**\n * Create a dummy audio MediaStreamTrack with the given AudioContext.\n * @private\n * @param {AudioContext} audioContext\n * @return {MediaStreamTrack}\n */\nfunction createDummyAudioMediaStreamTrack(audioContext) {\n    var mediaStreamDestination = audioContext.createMediaStreamDestination();\n    return mediaStreamDestination.stream.getAudioTracks()[0];\n}\n/**\n * @event {PeerConnectionManager#candidates}\n * @param {object} candidates\n */\n/**\n * @event {PeerConnectionManager#connectionStateChanged}\n */\n/**\n * @event {PeerConnectionManager#description}\n * @param {object} description\n */\n/**\n * @event {PeerConnectionManager#iceConnectionStateChanged}\n */\n/**\n * @event {PeerConnectionManager#trackAdded}\n * @param {MediaStreamTrack|DataTrackReceiver} mediaStreamTrackOrDataTrackReceiver\n */\n/**\n * Apply {@link TrackSenderChanges}.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {TrackSenderChanges} changes\n * @returns {void}\n */\nfunction applyTrackSenderChanges(peerConnectionManager, changes) {\n    if (changes.data.add.size\n        || changes.data.remove.size\n        || changes.media.add.size\n        || changes.media.remove.size) {\n        peerConnectionManager._peerConnections.forEach(function (peerConnection) {\n            changes.data.remove.forEach(peerConnection.removeDataTrackSender, peerConnection);\n            changes.media.remove.forEach(peerConnection.removeMediaTrackSender, peerConnection);\n            changes.data.add.forEach(peerConnection.addDataTrackSender, peerConnection);\n            changes.media.add.forEach(peerConnection.addMediaTrackSender, peerConnection);\n            if (changes.media.add.size\n                || changes.media.remove.size\n                || (changes.data.add.size && !peerConnection.isApplicationSectionNegotiated)) {\n                peerConnection.offer();\n            }\n        });\n    }\n}\n/**\n * @interface DataTrackSenderChanges\n * @property {Set<DataTrackSender>} add\n * @property {Set<DataTrackSender>} remove\n */\n/**\n * Get the {@Link DataTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @returns {DataTrackSenderChanges} changes\n */\nfunction getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders) {\n    var dataTrackSendersToAdd = util.difference(dataTrackSenders, peerConnectionManager._dataTrackSenders);\n    var dataTrackSendersToRemove = util.difference(peerConnectionManager._dataTrackSenders, dataTrackSenders);\n    return {\n        add: dataTrackSendersToAdd,\n        remove: dataTrackSendersToRemove\n    };\n}\n/**\n * @interface TrackSenderChanges\n * @property {DataTrackSenderChanges} data\n * @property {MediaTrackSenderChanges} media\n */\n/**\n * Get {@link DataTrackSender} and {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {TrackSenderChanges} changes\n */\nfunction getTrackSenderChanges(peerConnectionManager, dataTrackSenders, mediaTrackSenders) {\n    return {\n        data: getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders),\n        media: getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders)\n    };\n}\n/**\n * @interface MediaTrackSenderChanges\n * @property {Set<MediaTrackSender>} add\n * @property {Set<MediaTrackSender>} remove\n */\n/**\n * Get the {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {MediaTrackSenderChanges} changes\n */\nfunction getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders) {\n    var mediaTrackSendersToAdd = util.difference(mediaTrackSenders, peerConnectionManager._mediaTrackSenders);\n    var mediaTrackSendersToRemove = util.difference(peerConnectionManager._mediaTrackSenders, mediaTrackSenders);\n    return {\n        add: mediaTrackSendersToAdd,\n        remove: mediaTrackSendersToRemove\n    };\n}\n/**\n * This object maps RTCIceConnectionState and RTCPeerConnectionState values to a \"rank\".\n */\nvar toRank = {\n    new: 0,\n    checking: 1,\n    connecting: 2,\n    connected: 3,\n    completed: 4,\n    disconnected: -1,\n    failed: -2,\n    closed: -3\n};\n/**\n * This object maps \"rank\" back to RTCIceConnectionState or RTCPeerConnectionState values.\n */\nvar fromRank;\n/**\n * `Object.keys` is not supported in older browsers, so we can't just\n * synchronously call it in this module; we need to defer invoking it until we\n * know we're in a modern environment (i.e., anything that supports WebRTC).\n * @returns {object} fromRank\n */\nfunction createFromRank() {\n    return Object.keys(toRank).reduce(function (fromRank, state) {\n        var _a;\n        return Object.assign(fromRank, (_a = {}, _a[toRank[state]] = state, _a));\n    }, {});\n}\n/**\n * Summarize RTCIceConnectionStates or RTCPeerConnectionStates.\n * @param {Array<RTCIceConnectionState>|Array<RTCPeerConnectionState>} states\n * @returns {RTCIceConnectionState|RTCPeerConnectionState} summary\n */\nfunction summarizeIceOrPeerConnectionStates(states) {\n    if (!states.length) {\n        return 'new';\n    }\n    fromRank = fromRank || createFromRank();\n    return states.reduce(function (state1, state2) {\n        return fromRank[Math.max(toRank[state1], toRank[state2])];\n    });\n}\n/**\n * Update the {@link PeerConnectionManager}'s `iceConnectionState`, and emit an\n * \"iceConnectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\nfunction updateIceConnectionState(pcm) {\n    pcm._lastIceConnectionState = pcm.iceConnectionState;\n    pcm._iceConnectionState = summarizeIceOrPeerConnectionStates(__spreadArray([], __read(pcm._peerConnections.values())).map(function (pcv2) { return pcv2.iceConnectionState; }));\n    if (pcm.iceConnectionState !== pcm._lastIceConnectionState) {\n        pcm.emit('iceConnectionStateChanged');\n    }\n}\n/**\n * Update the {@link PeerConnectionManager}'s `connectionState`, and emit a\n * \"connectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\nfunction updateConnectionState(pcm) {\n    pcm._lastConnectionState = pcm.connectionState;\n    pcm._connectionState = summarizeIceOrPeerConnectionStates(__spreadArray([], __read(pcm._peerConnections.values())).map(function (pcv2) { return pcv2.connectionState; }));\n    if (pcm.connectionState !== pcm._lastConnectionState) {\n        pcm.emit('connectionStateChanged');\n    }\n}\nmodule.exports = PeerConnectionManager;\n//# sourceMappingURL=peerconnectionmanager.js.map"]},"metadata":{},"sourceType":"script"}