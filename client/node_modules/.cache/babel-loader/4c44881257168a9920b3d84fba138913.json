{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar getUserAgent = require('..').getUserAgent;\n\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nvar util = require('../../util');\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\n\n\nvar InsightsPublisher = function (_super) {\n  __extends(InsightsPublisher, _super);\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n\n\n  function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n    var _this = _super.call(this) || this;\n\n    options = Object.assign({\n      gateway: createGateway(environment, realm) + \"/v1/VideoEvents\",\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket: WebSocket\n    }, options);\n    Object.defineProperties(_this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _readyToConnect: {\n        value: util.defer()\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    _this._readyToConnect.promise.then(function (_a) {\n      var roomSid = _a.roomSid,\n          participantSid = _a.participantSid;\n      var self = _this;\n\n      _this.on('disconnected', function maybeReconnect(error) {\n        self._session = null;\n\n        if (error && self._reconnectAttemptsLeft > 0) {\n          self.emit('reconnecting');\n          reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n          return;\n        }\n\n        self.removeListener('disconnected', maybeReconnect);\n      });\n\n      connect(_this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }).catch(function () {// ignore failures to connect\n    });\n\n    return _this;\n  }\n  /**\n   * Start connecting to the Insights gateway.\n   * @param {string} roomSid\n   * @param {string} participantSid\n   * @returns {void}\n   */\n\n\n  InsightsPublisher.prototype.connect = function (roomSid, participantSid) {\n    this._readyToConnect.resolve({\n      roomSid: roomSid,\n      participantSid: participantSid\n    });\n  };\n  /**\n   * Publish an event to the Insights gateway.\n   * @private\n   * @param {*} event\n   */\n\n\n  InsightsPublisher.prototype._publish = function (event) {\n    event.session = this._session;\n\n    this._ws.send(JSON.stringify(event));\n  };\n  /**\n   * Disconnect from the Insights gateway.\n   * @returns {boolean} true if called when connecting/open, false if not\n   */\n\n\n  InsightsPublisher.prototype.disconnect = function () {\n    if (this._ws === null || this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n      return false;\n    }\n\n    try {\n      this._ws.close();\n    } catch (error) {// Do nothing.\n    }\n\n    this.emit('disconnected');\n    return true;\n  };\n  /**\n   * Publish (or queue, if not connected) an event to the Insights gateway.\n   * @param {string} groupName - Event group name\n   * @param {string} eventName - Event name\n   * @param {object} payload - Event payload\n   * @returns {boolean} true if queued or published, false if disconnect() called\n   */\n\n\n  InsightsPublisher.prototype.publish = function (groupName, eventName, payload) {\n    if (this._ws !== null && (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED)) {\n      return false;\n    }\n\n    var publishOrEnqueue = typeof this._session === 'string' ? this._publish.bind(this) : this._eventQueue.push.bind(this._eventQueue);\n    publishOrEnqueue({\n      group: groupName,\n      name: eventName,\n      payload: payload,\n      timestamp: Date.now(),\n      type: 'event',\n      version: 1\n    });\n    return true;\n  };\n\n  return InsightsPublisher;\n}(EventEmitter);\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  var ws = publisher._ws;\n  ws.addEventListener('close', function (event) {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n\n    publisher.emit('disconnected', new Error(\"WebSocket Error \" + event.code + \": \" + event.reason));\n  });\n  ws.addEventListener('message', function (message) {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n  ws.addEventListener('open', function () {\n    var connectRequest = {\n      type: 'connect',\n      token: token,\n      version: 1\n    };\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion: sdkVersion,\n      userAgent: options.userAgent,\n      participantSid: participantSid,\n      roomSid: roomSid\n    };\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\n\n\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? \"wss://sdkgw.\" + realm + \".twilio.com\" : \"wss://sdkgw.\" + environment + \"-\" + realm + \".twilio.com\";\n}\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n\n      publisher.emit('connected');\n      break;\n\n    case 'error':\n      publisher._ws.close();\n\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  var connectInterval = Date.now() - publisher._connectTimestamp;\n\n  var timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(function () {\n      connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\n\nmodule.exports = InsightsPublisher;","map":{"version":3,"sources":["../../../lib/util/insightspublisher/index.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar EventEmitter = require('events').EventEmitter;\nvar getUserAgent = require('..').getUserAgent;\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar util = require('../../util');\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\nvar InsightsPublisher = /** @class */ (function (_super) {\n    __extends(InsightsPublisher, _super);\n    /**\n     * @param {string} token - Insights gateway token\n     * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n     * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n     * @param {string} environment - One of 'dev', 'stage' or 'prod'\n     * @param {string} realm - Region identifier\n     * @param {InsightsPublisherOptions} options - Override default behavior\n     */\n    function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n        var _this = _super.call(this) || this;\n        options = Object.assign({\n            gateway: createGateway(environment, realm) + \"/v1/VideoEvents\",\n            maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n            reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n            userAgent: getUserAgent(),\n            WebSocket: WebSocket\n        }, options);\n        Object.defineProperties(_this, {\n            _connectTimestamp: {\n                value: 0,\n                writable: true\n            },\n            _eventQueue: {\n                value: []\n            },\n            _readyToConnect: {\n                value: util.defer()\n            },\n            _reconnectAttemptsLeft: {\n                value: options.maxReconnectAttempts,\n                writable: true\n            },\n            _ws: {\n                value: null,\n                writable: true\n            },\n            _WebSocket: {\n                value: options.WebSocket\n            }\n        });\n        _this._readyToConnect.promise.then(function (_a) {\n            var roomSid = _a.roomSid, participantSid = _a.participantSid;\n            var self = _this;\n            _this.on('disconnected', function maybeReconnect(error) {\n                self._session = null;\n                if (error && self._reconnectAttemptsLeft > 0) {\n                    self.emit('reconnecting');\n                    reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n                    return;\n                }\n                self.removeListener('disconnected', maybeReconnect);\n            });\n            connect(_this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n        }).catch(function () {\n            // ignore failures to connect\n        });\n        return _this;\n    }\n    /**\n     * Start connecting to the Insights gateway.\n     * @param {string} roomSid\n     * @param {string} participantSid\n     * @returns {void}\n     */\n    InsightsPublisher.prototype.connect = function (roomSid, participantSid) {\n        this._readyToConnect.resolve({ roomSid: roomSid, participantSid: participantSid });\n    };\n    /**\n     * Publish an event to the Insights gateway.\n     * @private\n     * @param {*} event\n     */\n    InsightsPublisher.prototype._publish = function (event) {\n        event.session = this._session;\n        this._ws.send(JSON.stringify(event));\n    };\n    /**\n     * Disconnect from the Insights gateway.\n     * @returns {boolean} true if called when connecting/open, false if not\n     */\n    InsightsPublisher.prototype.disconnect = function () {\n        if (this._ws === null\n            || this._ws.readyState === this._WebSocket.CLOSING\n            || this._ws.readyState === this._WebSocket.CLOSED) {\n            return false;\n        }\n        try {\n            this._ws.close();\n        }\n        catch (error) {\n            // Do nothing.\n        }\n        this.emit('disconnected');\n        return true;\n    };\n    /**\n     * Publish (or queue, if not connected) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnect() called\n     */\n    InsightsPublisher.prototype.publish = function (groupName, eventName, payload) {\n        if (this._ws !== null\n            && (this._ws.readyState === this._WebSocket.CLOSING\n                || this._ws.readyState === this._WebSocket.CLOSED)) {\n            return false;\n        }\n        var publishOrEnqueue = typeof this._session === 'string'\n            ? this._publish.bind(this)\n            : this._eventQueue.push.bind(this._eventQueue);\n        publishOrEnqueue({\n            group: groupName,\n            name: eventName,\n            payload: payload,\n            timestamp: Date.now(),\n            type: 'event',\n            version: 1\n        });\n        return true;\n    };\n    return InsightsPublisher;\n}(EventEmitter));\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n    publisher._connectTimestamp = Date.now();\n    publisher._reconnectAttemptsLeft--;\n    publisher._ws = new options.WebSocket(options.gateway);\n    var ws = publisher._ws;\n    ws.addEventListener('close', function (event) {\n        if (event.code === WS_CLOSE_NORMAL) {\n            publisher.emit('disconnected');\n            return;\n        }\n        publisher.emit('disconnected', new Error(\"WebSocket Error \" + event.code + \": \" + event.reason));\n    });\n    ws.addEventListener('message', function (message) {\n        handleConnectResponse(publisher, JSON.parse(message.data), options);\n    });\n    ws.addEventListener('open', function () {\n        var connectRequest = {\n            type: 'connect',\n            token: token,\n            version: 1\n        };\n        connectRequest.publisher = {\n            name: sdkName,\n            sdkVersion: sdkVersion,\n            userAgent: options.userAgent,\n            participantSid: participantSid,\n            roomSid: roomSid,\n        };\n        ws.send(JSON.stringify(connectRequest));\n    });\n}\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\nfunction createGateway(environment, realm) {\n    return environment === 'prod' ? \"wss://sdkgw.\" + realm + \".twilio.com\"\n        : \"wss://sdkgw.\" + environment + \"-\" + realm + \".twilio.com\";\n}\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\nfunction handleConnectResponse(publisher, response, options) {\n    switch (response.type) {\n        case 'connected':\n            publisher._session = response.session;\n            publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n            publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n            publisher.emit('connected');\n            break;\n        case 'error':\n            publisher._ws.close();\n            publisher.emit('disconnected', new Error(response.message));\n            break;\n    }\n}\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n    var connectInterval = Date.now() - publisher._connectTimestamp;\n    var timeToWait = options.reconnectIntervalMs - connectInterval;\n    if (timeToWait > 0) {\n        setTimeout(function () {\n            connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n        }, timeToWait);\n        return;\n    }\n    connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\nmodule.exports = InsightsPublisher;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}