{"ast":null,"code":"'use strict'; // Cached copy of the <canvas> used to check silent video frames.\n\nvar canvas = null;\nvar N_SAMPLES = 3;\nvar SAMPLE_HEIGHT = 50;\nvar SAMPLE_INTERVAL_MS = 250;\nvar SAMPLE_WIDTH = 50;\n/**\n * Check whether the current video frame is silent by selecting a 50x50\n * sample and calculating the max value of the pixel data. If it is 0, then\n * the frame is considered to be silent.\n * @private\n * @param {HTMLVideoElement} el\n * @returns {boolean} true if silent, false if not\n */\n\nfunction checkSilence(el) {\n  try {\n    var context = canvas.getContext('2d');\n    context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    var frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    var frameDataWithoutAlpha = frame.data.filter(function (item, i) {\n      return (i + 1) % 4;\n    });\n    var max = Math.max.apply(Math, frameDataWithoutAlpha);\n    return max === 0;\n  } catch (ex) {\n    // eslint-disable-next-line no-console\n    console.log('Error checking silence: ', ex);\n    return false;\n  }\n}\n/**\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLVideoElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\n\n\nfunction detectSilentVideo(el) {\n  // Create the canvas when detectSilentVideo() is called for the\n  // first time.\n  canvas = canvas || document.createElement('canvas'); // Resolve the returned Promise with true if 3 consecutive sample\n  // frames from the video being played by the HTMLVideoElement are\n  // silent.\n\n  return new Promise(function (resolve) {\n    var samplesLeft = N_SAMPLES;\n    setTimeout(function doCheckSilence() {\n      samplesLeft--;\n\n      if (!checkSilence(el)) {\n        return resolve(false);\n      }\n\n      if (samplesLeft > 0) {\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n      }\n\n      return resolve(true);\n    }, SAMPLE_INTERVAL_MS);\n  });\n}\n\nmodule.exports = detectSilentVideo;","map":{"version":3,"sources":["../../lib/util/detectsilentvideo.js"],"names":[],"mappings":"AAAA,a,CAEA;;AACA,IAAI,MAAM,GAAG,IAAb;AAEA,IAAM,SAAS,GAAG,CAAlB;AACA,IAAM,aAAa,GAAG,EAAtB;AACA,IAAM,kBAAkB,GAAG,GAA3B;AACA,IAAM,YAAY,GAAG,EAArB;AAEA;;;;;;;AAOG;;AACH,SAAS,YAAT,CAAsB,EAAtB,EAAwB;AACtB,MAAI;AACF,QAAM,OAAO,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAhB;AACA,IAAA,OAAO,CAAC,SAAR,CAAkB,EAAlB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,YAA5B,EAA0C,aAA1C;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,YAA3B,EAAyC,aAAzC,CAAd;AACA,QAAM,qBAAqB,GAAG,KAAK,CAAC,IAAN,CAAW,MAAX,CAAkB,UAAC,IAAD,EAAO,CAAP,EAAQ;AAAK,aAAA,CAAC,CAAC,GAAG,CAAL,IAAA,CAAA;AAAW,KAA1C,CAA9B;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,qBAArB,CAAZ;AACA,WAAO,GAAG,KAAK,CAAf;AACD,GAPD,CAOE,OAAO,EAAP,EAAW;AACX;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,0BAAZ,EAAwC,EAAxC;AACA,WAAO,KAAP;AACD;AAEF;AAED;;;;AAIG;;;AACH,SAAS,iBAAT,CAA2B,EAA3B,EAA6B;AAC3B;AACA;AACA,EAAA,MAAM,GAAG,MAAM,IAAI,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAnB,CAH2B,CAK3B;AACA;AACA;;AACA,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;AACxB,QAAI,WAAW,GAAG,SAAlB;AACA,IAAA,UAAU,CAAC,SAAS,cAAT,GAAuB;AAChC,MAAA,WAAW;;AACX,UAAI,CAAC,YAAY,CAAC,EAAD,CAAjB,EAAuB;AACrB,eAAO,OAAO,CAAC,KAAD,CAAd;AACD;;AACD,UAAI,WAAW,GAAG,CAAlB,EAAqB;AACnB,eAAO,UAAU,CAAC,cAAD,EAAiB,kBAAjB,CAAjB;AACD;;AACD,aAAO,OAAO,CAAC,IAAD,CAAd;AACD,KATS,EASP,kBATO,CAAV;AAUD,GAZM,CAAP;AAaD;;AAED,MAAM,CAAC,OAAP,GAAiB,iBAAjB","sourceRoot":"","sourcesContent":["'use strict';\n// Cached copy of the <canvas> used to check silent video frames.\nvar canvas = null;\nvar N_SAMPLES = 3;\nvar SAMPLE_HEIGHT = 50;\nvar SAMPLE_INTERVAL_MS = 250;\nvar SAMPLE_WIDTH = 50;\n/**\n * Check whether the current video frame is silent by selecting a 50x50\n * sample and calculating the max value of the pixel data. If it is 0, then\n * the frame is considered to be silent.\n * @private\n * @param {HTMLVideoElement} el\n * @returns {boolean} true if silent, false if not\n */\nfunction checkSilence(el) {\n    try {\n        var context = canvas.getContext('2d');\n        context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n        var frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n        var frameDataWithoutAlpha = frame.data.filter(function (item, i) { return (i + 1) % 4; });\n        var max = Math.max.apply(Math, frameDataWithoutAlpha);\n        return max === 0;\n    }\n    catch (ex) {\n        // eslint-disable-next-line no-console\n        console.log('Error checking silence: ', ex);\n        return false;\n    }\n}\n/**\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLVideoElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\nfunction detectSilentVideo(el) {\n    // Create the canvas when detectSilentVideo() is called for the\n    // first time.\n    canvas = canvas || document.createElement('canvas');\n    // Resolve the returned Promise with true if 3 consecutive sample\n    // frames from the video being played by the HTMLVideoElement are\n    // silent.\n    return new Promise(function (resolve) {\n        var samplesLeft = N_SAMPLES;\n        setTimeout(function doCheckSilence() {\n            samplesLeft--;\n            if (!checkSilence(el)) {\n                return resolve(false);\n            }\n            if (samplesLeft > 0) {\n                return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n            }\n            return resolve(true);\n        }, SAMPLE_INTERVAL_MS);\n    });\n}\nmodule.exports = detectSilentVideo;\n//# sourceMappingURL=detectsilentvideo.js.map"]},"metadata":{},"sourceType":"script"}