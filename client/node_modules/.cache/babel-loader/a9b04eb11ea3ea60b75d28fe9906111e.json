{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar DataTrackTransceiver = require('./transceiver');\n\nvar makeUUID = require('../util').makeUUID;\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\n\n\nvar DataTrackSender = function (_super) {\n  __extends(DataTrackSender, _super);\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n\n\n  function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n    var _this = _super.call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered) || this;\n\n    Object.defineProperties(_this, {\n      _clones: {\n        value: new Set()\n      },\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n  /**\n   * Add a cloned {@link DataTrackSender}.\n   * @private\n   * @returns {void}\n   */\n\n\n  DataTrackSender.prototype._addClone = function (clone) {\n    this._clones.add(clone);\n  };\n  /**\n   * Remove a cloned {@link DataTrackSender}.\n   * @returns {void}\n   */\n\n\n  DataTrackSender.prototype.removeClone = function (clone) {\n    this._clones.delete(clone);\n  };\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.addDataChannel = function (dataChannel) {\n    this._dataChannels.add(dataChannel);\n\n    return this;\n  };\n  /**\n   * Return a new {@link DataTrackSender}. Any message sent over this\n   * {@link DataTrackSender} will also be sent over the clone. Whenever this\n   * {@link DataTrackSender} is stopped, so to will the clone.\n   * @returns {DataTrackSender}\n   */\n\n\n  DataTrackSender.prototype.clone = function () {\n    var _this = this;\n\n    var clone = new DataTrackSender(this.maxPacketLifeTime, this.maxRetransmits, this.ordered);\n\n    this._addClone(clone);\n\n    clone.once('stopped', function () {\n      return _this.removeClone(clone);\n    });\n    return clone;\n  };\n  /**\n   * Remove an RTCDataChannel from the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.removeDataChannel = function (dataChannel) {\n    this._dataChannels.delete(dataChannel);\n\n    return this;\n  };\n  /**\n   * Send data over the {@link DataTrackSender}. Internally, this calls\n   * <code>send</code> over each of the underlying RTCDataChannels.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.send = function (data) {\n    this._dataChannels.forEach(function (dataChannel) {\n      try {\n        dataChannel.send(data);\n      } catch (error) {// Do nothing.\n      }\n    });\n\n    this._clones.forEach(function (clone) {\n      try {\n        clone.send(data);\n      } catch (error) {// Do nothing.\n      }\n    });\n\n    return this;\n  };\n\n  DataTrackSender.prototype.stop = function () {\n    this._dataChannels.forEach(function (dataChannel) {\n      return dataChannel.close();\n    });\n\n    this._clones.forEach(function (clone) {\n      return clone.stop();\n    });\n\n    _super.prototype.stop.call(this);\n  };\n\n  return DataTrackSender;\n}(DataTrackTransceiver);\n\nmodule.exports = DataTrackSender;","map":{"version":3,"sources":["../../lib/data/sender.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar DataTrackTransceiver = require('./transceiver');\nvar makeUUID = require('../util').makeUUID;\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\nvar DataTrackSender = /** @class */ (function (_super) {\n    __extends(DataTrackSender, _super);\n    /**\n     * Construct a {@link DataTrackSender}.\n     * @param {?number} maxPacketLifeTime\n     * @param {?number} maxRetransmits\n     * @param {boolean} ordered\n     */\n    function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n        var _this = _super.call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered) || this;\n        Object.defineProperties(_this, {\n            _clones: {\n                value: new Set()\n            },\n            _dataChannels: {\n                value: new Set()\n            }\n        });\n        return _this;\n    }\n    /**\n     * Add a cloned {@link DataTrackSender}.\n     * @private\n     * @returns {void}\n     */\n    DataTrackSender.prototype._addClone = function (clone) {\n        this._clones.add(clone);\n    };\n    /**\n     * Remove a cloned {@link DataTrackSender}.\n     * @returns {void}\n     */\n    DataTrackSender.prototype.removeClone = function (clone) {\n        this._clones.delete(clone);\n    };\n    /**\n     * Add an RTCDataChannel to the {@link DataTrackSender}.\n     * @param {RTCDataChannel} dataChannel\n     * @returns {this}\n     */\n    DataTrackSender.prototype.addDataChannel = function (dataChannel) {\n        this._dataChannels.add(dataChannel);\n        return this;\n    };\n    /**\n     * Return a new {@link DataTrackSender}. Any message sent over this\n     * {@link DataTrackSender} will also be sent over the clone. Whenever this\n     * {@link DataTrackSender} is stopped, so to will the clone.\n     * @returns {DataTrackSender}\n     */\n    DataTrackSender.prototype.clone = function () {\n        var _this = this;\n        var clone = new DataTrackSender(this.maxPacketLifeTime, this.maxRetransmits, this.ordered);\n        this._addClone(clone);\n        clone.once('stopped', function () { return _this.removeClone(clone); });\n        return clone;\n    };\n    /**\n     * Remove an RTCDataChannel from the {@link DataTrackSender}.\n     * @param {RTCDataChannel} dataChannel\n     * @returns {this}\n     */\n    DataTrackSender.prototype.removeDataChannel = function (dataChannel) {\n        this._dataChannels.delete(dataChannel);\n        return this;\n    };\n    /**\n     * Send data over the {@link DataTrackSender}. Internally, this calls\n     * <code>send</code> over each of the underlying RTCDataChannels.\n     * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n     * @returns {this}\n     */\n    DataTrackSender.prototype.send = function (data) {\n        this._dataChannels.forEach(function (dataChannel) {\n            try {\n                dataChannel.send(data);\n            }\n            catch (error) {\n                // Do nothing.\n            }\n        });\n        this._clones.forEach(function (clone) {\n            try {\n                clone.send(data);\n            }\n            catch (error) {\n                // Do nothing.\n            }\n        });\n        return this;\n    };\n    DataTrackSender.prototype.stop = function () {\n        this._dataChannels.forEach(function (dataChannel) { return dataChannel.close(); });\n        this._clones.forEach(function (clone) { return clone.stop(); });\n        _super.prototype.stop.call(this);\n    };\n    return DataTrackSender;\n}(DataTrackTransceiver));\nmodule.exports = DataTrackSender;\n//# sourceMappingURL=sender.js.map"]},"metadata":{},"sourceType":"script"}