{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar difference = require('../').difference;\n\nvar flatMap = require('../').flatMap;\n/**\n * Create a random {@link SSRC}.\n * @returns {SSRC}\n */\n\n\nfunction createSSRC() {\n  var ssrcMax = 0xffffffff;\n  return String(Math.floor(Math.random() * ssrcMax));\n}\n/**\n * @property {string} cName\n * @property {boolean} isSimulcastEnabled\n * @property {Map<RtxSSRC, PrimarySSRC>} rtxPairs\n * @property {Set<PrimarySSRC>} primarySSRCs\n * @property {string} streamId\n * @property {Track.ID} trackId\n */\n\n\nvar TrackAttributes = function () {\n  /**\n   * Construct a {@link MediaStreamTrack} attribute store.\n   * @param {Track.ID} trackId - The MediaStreamTrack ID\n   * @param {MediaStreamID} streamId - The MediaStream ID\n   * @param {string} cName - The MediaStream cname\n   */\n  function TrackAttributes(trackId, streamId, cName) {\n    Object.defineProperties(this, {\n      cName: {\n        enumerable: true,\n        value: cName\n      },\n      isSimulcastEnabled: {\n        enumerable: true,\n        value: false,\n        writable: true\n      },\n      primarySSRCs: {\n        enumerable: true,\n        value: new Set()\n      },\n      rtxPairs: {\n        enumerable: true,\n        value: new Map()\n      },\n      streamId: {\n        enumerable: true,\n        value: streamId\n      },\n      trackId: {\n        enumerable: true,\n        value: trackId\n      }\n    });\n  }\n  /**\n   * Add {@link SimSSRC}s to the {@link TrackAttributes}.\n   * @returns {void}\n   */\n\n\n  TrackAttributes.prototype.addSimulcastSSRCs = function () {\n    if (this.isSimulcastEnabled) {\n      return;\n    }\n\n    var simulcastSSRCs = [createSSRC(), createSSRC()];\n    simulcastSSRCs.forEach(function (ssrc) {\n      this.primarySSRCs.add(ssrc);\n    }, this);\n\n    if (this.rtxPairs.size) {\n      simulcastSSRCs.forEach(function (ssrc) {\n        this.rtxPairs.set(createSSRC(), ssrc);\n      }, this);\n    }\n  };\n  /**\n   * Add the given {@link PrimarySSRC} or {@link RtxSSRC} to the {@link TrackAttributes}\n   * and update the \"isSimulcastEnabled\" flag if it is also a {@link SimSSRC}.\n   * @param {SSRC} ssrc - The {@link SSRC} to be added\n   * @param {?PrimarySSRC} primarySSRC - The {@link PrimarySSRC}; if the given\n   *   {@link SSRC} itself is the {@link PrimarySSRC}, then this is set to null\n   * @param {boolean} isSimSSRC - true if the given {@link SSRC} is a\n   *   {@link SimSSRC}; false otherwise\n   * @returns {void}\n   */\n\n\n  TrackAttributes.prototype.addSSRC = function (ssrc, primarySSRC, isSimSSRC) {\n    if (primarySSRC) {\n      this.rtxPairs.set(ssrc, primarySSRC);\n    } else {\n      this.primarySSRCs.add(ssrc);\n    }\n\n    this.isSimulcastEnabled = this.isSimulcastEnabled || isSimSSRC;\n  };\n  /**\n   * Construct the SDP lines for the {@link TrackAttributes}.\n   * @param {boolean} [excludeRtx=false]\n   * @returns {Array<string>} Array of SDP lines\n   */\n\n\n  TrackAttributes.prototype.toSdpLines = function (excludeRtx) {\n    var _this = this;\n\n    var rtxPairs = excludeRtx ? [] : Array.from(this.rtxPairs.entries()).map(function (rtxPair) {\n      return rtxPair.reverse();\n    });\n    var simSSRCs = Array.from(this.primarySSRCs.values());\n    var ssrcs = rtxPairs.length ? flatMap(rtxPairs) : simSSRCs;\n    var attrLines = flatMap(ssrcs, function (ssrc) {\n      return [\"a=ssrc:\" + ssrc + \" cname:\" + _this.cName, \"a=ssrc:\" + ssrc + \" msid:\" + _this.streamId + \" \" + _this.trackId];\n    });\n    var rtxPairLines = rtxPairs.map(function (rtxPair) {\n      return \"a=ssrc-group:FID \" + rtxPair.join(' ');\n    });\n    var simGroupLines = [\"a=ssrc-group:SIM \" + simSSRCs.join(' ')];\n    return rtxPairLines.concat(attrLines).concat(simGroupLines);\n  };\n\n  return TrackAttributes;\n}();\n/**\n * Get the matches for a given RegEx pattern.\n * @param {string} section - SDP media section\n * @param {string} pattern - RegEx pattern\n * @returns {Array<Array<string>>} - Array of pattern matches\n */\n\n\nfunction getMatches(section, pattern) {\n  var matches = section.match(new RegExp(pattern, 'gm')) || [];\n  return matches.map(function (match) {\n    var matches = match.match(new RegExp(pattern)) || [];\n    return matches.slice(1);\n  });\n}\n/**\n * Get the {@link SimSSRC}s that belong to a simulcast group.\n * @param {string} section - SDP media section\n * @returns {Set<SimSSRC>} Set of simulcast {@link SSRC}s\n */\n\n\nfunction getSimulcastSSRCs(section) {\n  var simGroupPattern = '^a=ssrc-group:SIM ([0-9]+) ([0-9]+) ([0-9]+)$';\n  return new Set(flatMap(getMatches(section, simGroupPattern)));\n}\n/**\n * Get the value of the given attribute for an SSRC.\n * @param {string} section - SDP media section\n * @param {SSRC} ssrc - {@link SSRC} whose attribute's value is to be determinded\n * @param {string} attribute - {@link SSRC} attribute name\n * @param {string} - {@link SSRC} attribute value\n */\n\n\nfunction getSSRCAttribute(section, ssrc, attribute) {\n  var pattern = \"a=ssrc:\" + ssrc + \" \" + attribute + \":(.+)\";\n  return section.match(new RegExp(pattern))[1];\n}\n/**\n * Create a Map of {@link PrimarySSRC}s and their {@link RtxSSRC}s.\n * @param {string} section - SDP media section\n * @returns {Map<RtxSSRC, PrimarySSRC>} - Map of {@link RtxSSRC}s and their\n *   corresponding {@link PrimarySSRC}s\n */\n\n\nfunction getSSRCRtxPairs(section) {\n  var rtxPairPattern = '^a=ssrc-group:FID ([0-9]+) ([0-9]+)$';\n  return new Map(getMatches(section, rtxPairPattern).map(function (pair) {\n    return pair.reverse();\n  }));\n}\n/**\n * Create SSRC attribute tuples.\n * @param {string} section\n * @param {'planb' | 'unified'} sdpFormat\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\n\n\nfunction createSSRCAttributeTuples(section, sdpFormat) {\n  return {\n    planb: createPlanBSSRCAttributeTuples,\n    unified: createUnifiedPlanSSRCAttributeTuples\n  }[sdpFormat](section);\n}\n/**\n * Create \"plan-b\" SSRC attribute tuples.\n * @param {string} section\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\n\n\nfunction createPlanBSSRCAttributeTuples(section) {\n  return getMatches(section, '^a=ssrc:([0-9]+) msid:([^\\\\s]+) ([^\\\\s]+)$');\n}\n/**\n * Create \"unified-plan\" SSRC attribute tuples.\n * @param {string} section\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\n\n\nfunction createUnifiedPlanSSRCAttributeTuples(section) {\n  var _a = __read(flatMap(getMatches(section, '^a=msid:(.+) (.+)$')), 2),\n      streamId = _a[0],\n      trackId = _a[1];\n\n  var ssrcs = flatMap(getMatches(section, '^a=ssrc:(.+) cname:.+$'));\n  return ssrcs.map(function (ssrc) {\n    return [ssrc, streamId, trackId];\n  });\n}\n/**\n * Create a Map of MediaStreamTrack IDs and their {@link TrackAttributes}.\n * @param {string} section - SDP media section\n * @param {'planb' | 'unified'} sdpFormat\n * @returns {Map<Track.ID, TrackAttributes>}\n */\n\n\nfunction createTrackIdsToAttributes(section, sdpFormat) {\n  var simSSRCs = getSimulcastSSRCs(section);\n  var rtxPairs = getSSRCRtxPairs(section);\n  var ssrcAttrTuples = createSSRCAttributeTuples(section, sdpFormat);\n  return ssrcAttrTuples.reduce(function (trackIdsToSSRCs, tuple) {\n    var ssrc = tuple[0];\n    var streamId = tuple[1];\n    var trackId = tuple[2];\n    var trackAttributes = trackIdsToSSRCs.get(trackId) || new TrackAttributes(trackId, streamId, getSSRCAttribute(section, ssrc, 'cname'));\n    var primarySSRC = rtxPairs.get(ssrc) || null;\n    trackAttributes.addSSRC(ssrc, primarySSRC, simSSRCs.has(ssrc));\n    return trackIdsToSSRCs.set(trackId, trackAttributes);\n  }, new Map());\n}\n/**\n * Apply simulcast settings to the given SDP media section.\n * @param {string} section - SDP media section\n * @param {'planb' | 'unified'} sdpFormat\n * @param {Map<Track.ID, TrackAttributes>} trackIdsToAttributes - Existing\n *   map which will be updated for new MediaStreamTrack IDs\n * @returns {string} - The transformed SDP media section\n */\n\n\nfunction setSimulcastInMediaSection(section, sdpFormat, trackIdsToAttributes) {\n  var newTrackIdsToAttributes = createTrackIdsToAttributes(section, sdpFormat);\n  var newTrackIds = Array.from(newTrackIdsToAttributes.keys());\n  var trackIds = Array.from(trackIdsToAttributes.keys());\n  var trackIdsToAdd = difference(newTrackIds, trackIds);\n  var trackIdsToIgnore = difference(trackIds, newTrackIds); // Update \"trackIdsToAttributes\" with TrackAttributes for new\n  // MediaStreamTrack IDs.\n\n  var trackAttributesToAdd = flatMap(trackIdsToAdd, function (trackId) {\n    return newTrackIdsToAttributes.get(trackId);\n  });\n  trackAttributesToAdd.forEach(function (trackAttributes) {\n    trackAttributes.addSimulcastSSRCs();\n    trackIdsToAttributes.set(trackAttributes.trackId, trackAttributes);\n  }); // Get the SDP lines of the relevant MediaStreamTrack IDs from\n  // \"trackIdsToAttributes\".\n\n  trackIds = Array.from(trackIdsToAttributes.keys());\n  var relevantTrackIds = difference(trackIds, trackIdsToIgnore);\n  var relevantTrackAttributes = flatMap(relevantTrackIds, function (trackId) {\n    return trackIdsToAttributes.get(trackId);\n  });\n  var excludeRtx = !section.match(/a=rtpmap:[0-9]+ rtx/);\n  var relevantSdpLines = flatMap(relevantTrackAttributes, function (trackAttributes) {\n    return trackAttributes.toSdpLines(excludeRtx);\n  }); // Add the simulcast SSRC SDP lines to the media section. The Set ensures\n  // that the duplicates of the SSRC SDP lines that are in both \"section\" and\n  // \"relevantSdpLines\" are removed.\n\n  var sectionLines = flatMap(new Set(section.split('\\r\\n').concat(relevantSdpLines)));\n  var xGoogleFlagConference = 'a=x-google-flag:conference';\n\n  if (!section.match(xGoogleFlagConference)) {\n    sectionLines.push(xGoogleFlagConference);\n  }\n\n  return sectionLines.join('\\r\\n');\n}\n/**\n * String representing a MediaStream ID.\n * @typedef {string} MediaStreamID\n */\n\n/**\n * String representing the SSRC of a MediaStreamTrack.\n * @typedef {string} SSRC\n */\n\n/**\n * Primary SSRC.\n * @typedef {SSRC} PrimarySSRC\n */\n\n/**\n * Retransmission SSRC.\n * @typedef {SSRC} RtxSSRC\n */\n\n/**\n * Simulcast SSRC.\n * @typedef {SSRC} SimSSRC\n */\n\n\nmodule.exports = setSimulcastInMediaSection;","map":{"version":3,"sources":["../../../lib/util/sdp/simulcast.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar difference = require('../').difference;\nvar flatMap = require('../').flatMap;\n/**\n * Create a random {@link SSRC}.\n * @returns {SSRC}\n */\nfunction createSSRC() {\n    var ssrcMax = 0xffffffff;\n    return String(Math.floor(Math.random() * ssrcMax));\n}\n/**\n * @property {string} cName\n * @property {boolean} isSimulcastEnabled\n * @property {Map<RtxSSRC, PrimarySSRC>} rtxPairs\n * @property {Set<PrimarySSRC>} primarySSRCs\n * @property {string} streamId\n * @property {Track.ID} trackId\n */\nvar TrackAttributes = /** @class */ (function () {\n    /**\n     * Construct a {@link MediaStreamTrack} attribute store.\n     * @param {Track.ID} trackId - The MediaStreamTrack ID\n     * @param {MediaStreamID} streamId - The MediaStream ID\n     * @param {string} cName - The MediaStream cname\n     */\n    function TrackAttributes(trackId, streamId, cName) {\n        Object.defineProperties(this, {\n            cName: {\n                enumerable: true,\n                value: cName\n            },\n            isSimulcastEnabled: {\n                enumerable: true,\n                value: false,\n                writable: true\n            },\n            primarySSRCs: {\n                enumerable: true,\n                value: new Set()\n            },\n            rtxPairs: {\n                enumerable: true,\n                value: new Map()\n            },\n            streamId: {\n                enumerable: true,\n                value: streamId\n            },\n            trackId: {\n                enumerable: true,\n                value: trackId\n            }\n        });\n    }\n    /**\n     * Add {@link SimSSRC}s to the {@link TrackAttributes}.\n     * @returns {void}\n     */\n    TrackAttributes.prototype.addSimulcastSSRCs = function () {\n        if (this.isSimulcastEnabled) {\n            return;\n        }\n        var simulcastSSRCs = [createSSRC(), createSSRC()];\n        simulcastSSRCs.forEach(function (ssrc) {\n            this.primarySSRCs.add(ssrc);\n        }, this);\n        if (this.rtxPairs.size) {\n            simulcastSSRCs.forEach(function (ssrc) {\n                this.rtxPairs.set(createSSRC(), ssrc);\n            }, this);\n        }\n    };\n    /**\n     * Add the given {@link PrimarySSRC} or {@link RtxSSRC} to the {@link TrackAttributes}\n     * and update the \"isSimulcastEnabled\" flag if it is also a {@link SimSSRC}.\n     * @param {SSRC} ssrc - The {@link SSRC} to be added\n     * @param {?PrimarySSRC} primarySSRC - The {@link PrimarySSRC}; if the given\n     *   {@link SSRC} itself is the {@link PrimarySSRC}, then this is set to null\n     * @param {boolean} isSimSSRC - true if the given {@link SSRC} is a\n     *   {@link SimSSRC}; false otherwise\n     * @returns {void}\n     */\n    TrackAttributes.prototype.addSSRC = function (ssrc, primarySSRC, isSimSSRC) {\n        if (primarySSRC) {\n            this.rtxPairs.set(ssrc, primarySSRC);\n        }\n        else {\n            this.primarySSRCs.add(ssrc);\n        }\n        this.isSimulcastEnabled = this.isSimulcastEnabled || isSimSSRC;\n    };\n    /**\n     * Construct the SDP lines for the {@link TrackAttributes}.\n     * @param {boolean} [excludeRtx=false]\n     * @returns {Array<string>} Array of SDP lines\n     */\n    TrackAttributes.prototype.toSdpLines = function (excludeRtx) {\n        var _this = this;\n        var rtxPairs = excludeRtx\n            ? []\n            : Array.from(this.rtxPairs.entries()).map(function (rtxPair) { return rtxPair.reverse(); });\n        var simSSRCs = Array.from(this.primarySSRCs.values());\n        var ssrcs = rtxPairs.length ? flatMap(rtxPairs) : simSSRCs;\n        var attrLines = flatMap(ssrcs, function (ssrc) { return [\n            \"a=ssrc:\" + ssrc + \" cname:\" + _this.cName,\n            \"a=ssrc:\" + ssrc + \" msid:\" + _this.streamId + \" \" + _this.trackId\n        ]; });\n        var rtxPairLines = rtxPairs.map(function (rtxPair) { return \"a=ssrc-group:FID \" + rtxPair.join(' '); });\n        var simGroupLines = [\n            \"a=ssrc-group:SIM \" + simSSRCs.join(' ')\n        ];\n        return rtxPairLines.concat(attrLines).concat(simGroupLines);\n    };\n    return TrackAttributes;\n}());\n/**\n * Get the matches for a given RegEx pattern.\n * @param {string} section - SDP media section\n * @param {string} pattern - RegEx pattern\n * @returns {Array<Array<string>>} - Array of pattern matches\n */\nfunction getMatches(section, pattern) {\n    var matches = section.match(new RegExp(pattern, 'gm')) || [];\n    return matches.map(function (match) {\n        var matches = match.match(new RegExp(pattern)) || [];\n        return matches.slice(1);\n    });\n}\n/**\n * Get the {@link SimSSRC}s that belong to a simulcast group.\n * @param {string} section - SDP media section\n * @returns {Set<SimSSRC>} Set of simulcast {@link SSRC}s\n */\nfunction getSimulcastSSRCs(section) {\n    var simGroupPattern = '^a=ssrc-group:SIM ([0-9]+) ([0-9]+) ([0-9]+)$';\n    return new Set(flatMap(getMatches(section, simGroupPattern)));\n}\n/**\n * Get the value of the given attribute for an SSRC.\n * @param {string} section - SDP media section\n * @param {SSRC} ssrc - {@link SSRC} whose attribute's value is to be determinded\n * @param {string} attribute - {@link SSRC} attribute name\n * @param {string} - {@link SSRC} attribute value\n */\nfunction getSSRCAttribute(section, ssrc, attribute) {\n    var pattern = \"a=ssrc:\" + ssrc + \" \" + attribute + \":(.+)\";\n    return section.match(new RegExp(pattern))[1];\n}\n/**\n * Create a Map of {@link PrimarySSRC}s and their {@link RtxSSRC}s.\n * @param {string} section - SDP media section\n * @returns {Map<RtxSSRC, PrimarySSRC>} - Map of {@link RtxSSRC}s and their\n *   corresponding {@link PrimarySSRC}s\n */\nfunction getSSRCRtxPairs(section) {\n    var rtxPairPattern = '^a=ssrc-group:FID ([0-9]+) ([0-9]+)$';\n    return new Map(getMatches(section, rtxPairPattern).map(function (pair) { return pair.reverse(); }));\n}\n/**\n * Create SSRC attribute tuples.\n * @param {string} section\n * @param {'planb' | 'unified'} sdpFormat\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\nfunction createSSRCAttributeTuples(section, sdpFormat) {\n    return {\n        planb: createPlanBSSRCAttributeTuples,\n        unified: createUnifiedPlanSSRCAttributeTuples\n    }[sdpFormat](section);\n}\n/**\n * Create \"plan-b\" SSRC attribute tuples.\n * @param {string} section\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\nfunction createPlanBSSRCAttributeTuples(section) {\n    return getMatches(section, '^a=ssrc:([0-9]+) msid:([^\\\\s]+) ([^\\\\s]+)$');\n}\n/**\n * Create \"unified-plan\" SSRC attribute tuples.\n * @param {string} section\n * @returns {Array<[SSRC, MediaStreamID, Track.ID]>}\n */\nfunction createUnifiedPlanSSRCAttributeTuples(section) {\n    var _a = __read(flatMap(getMatches(section, '^a=msid:(.+) (.+)$')), 2), streamId = _a[0], trackId = _a[1];\n    var ssrcs = flatMap(getMatches(section, '^a=ssrc:(.+) cname:.+$'));\n    return ssrcs.map(function (ssrc) { return [ssrc, streamId, trackId]; });\n}\n/**\n * Create a Map of MediaStreamTrack IDs and their {@link TrackAttributes}.\n * @param {string} section - SDP media section\n * @param {'planb' | 'unified'} sdpFormat\n * @returns {Map<Track.ID, TrackAttributes>}\n */\nfunction createTrackIdsToAttributes(section, sdpFormat) {\n    var simSSRCs = getSimulcastSSRCs(section);\n    var rtxPairs = getSSRCRtxPairs(section);\n    var ssrcAttrTuples = createSSRCAttributeTuples(section, sdpFormat);\n    return ssrcAttrTuples.reduce(function (trackIdsToSSRCs, tuple) {\n        var ssrc = tuple[0];\n        var streamId = tuple[1];\n        var trackId = tuple[2];\n        var trackAttributes = trackIdsToSSRCs.get(trackId) || new TrackAttributes(trackId, streamId, getSSRCAttribute(section, ssrc, 'cname'));\n        var primarySSRC = rtxPairs.get(ssrc) || null;\n        trackAttributes.addSSRC(ssrc, primarySSRC, simSSRCs.has(ssrc));\n        return trackIdsToSSRCs.set(trackId, trackAttributes);\n    }, new Map());\n}\n/**\n * Apply simulcast settings to the given SDP media section.\n * @param {string} section - SDP media section\n * @param {'planb' | 'unified'} sdpFormat\n * @param {Map<Track.ID, TrackAttributes>} trackIdsToAttributes - Existing\n *   map which will be updated for new MediaStreamTrack IDs\n * @returns {string} - The transformed SDP media section\n */\nfunction setSimulcastInMediaSection(section, sdpFormat, trackIdsToAttributes) {\n    var newTrackIdsToAttributes = createTrackIdsToAttributes(section, sdpFormat);\n    var newTrackIds = Array.from(newTrackIdsToAttributes.keys());\n    var trackIds = Array.from(trackIdsToAttributes.keys());\n    var trackIdsToAdd = difference(newTrackIds, trackIds);\n    var trackIdsToIgnore = difference(trackIds, newTrackIds);\n    // Update \"trackIdsToAttributes\" with TrackAttributes for new\n    // MediaStreamTrack IDs.\n    var trackAttributesToAdd = flatMap(trackIdsToAdd, function (trackId) { return newTrackIdsToAttributes.get(trackId); });\n    trackAttributesToAdd.forEach(function (trackAttributes) {\n        trackAttributes.addSimulcastSSRCs();\n        trackIdsToAttributes.set(trackAttributes.trackId, trackAttributes);\n    });\n    // Get the SDP lines of the relevant MediaStreamTrack IDs from\n    // \"trackIdsToAttributes\".\n    trackIds = Array.from(trackIdsToAttributes.keys());\n    var relevantTrackIds = difference(trackIds, trackIdsToIgnore);\n    var relevantTrackAttributes = flatMap(relevantTrackIds, function (trackId) { return trackIdsToAttributes.get(trackId); });\n    var excludeRtx = !section.match(/a=rtpmap:[0-9]+ rtx/);\n    var relevantSdpLines = flatMap(relevantTrackAttributes, function (trackAttributes) { return trackAttributes.toSdpLines(excludeRtx); });\n    // Add the simulcast SSRC SDP lines to the media section. The Set ensures\n    // that the duplicates of the SSRC SDP lines that are in both \"section\" and\n    // \"relevantSdpLines\" are removed.\n    var sectionLines = flatMap(new Set(section.split('\\r\\n').concat(relevantSdpLines)));\n    var xGoogleFlagConference = 'a=x-google-flag:conference';\n    if (!section.match(xGoogleFlagConference)) {\n        sectionLines.push(xGoogleFlagConference);\n    }\n    return sectionLines.join('\\r\\n');\n}\n/**\n * String representing a MediaStream ID.\n * @typedef {string} MediaStreamID\n */\n/**\n * String representing the SSRC of a MediaStreamTrack.\n * @typedef {string} SSRC\n */\n/**\n * Primary SSRC.\n * @typedef {SSRC} PrimarySSRC\n */\n/**\n * Retransmission SSRC.\n * @typedef {SSRC} RtxSSRC\n */\n/**\n * Simulcast SSRC.\n * @typedef {SSRC} SimSSRC\n */\nmodule.exports = setSimulcastInMediaSection;\n//# sourceMappingURL=simulcast.js.map"]},"metadata":{},"sourceType":"script"}