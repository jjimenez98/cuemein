{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar DefaultBackoff = require('backoff');\n\nvar _a = require('@twilio/webrtc'),\n    DefaultMediaStream = _a.MediaStream,\n    DefaultRTCIceCandidate = _a.RTCIceCandidate,\n    DefaultRTCPeerConnection = _a.RTCPeerConnection,\n    DefaultRTCSessionDescription = _a.RTCSessionDescription,\n    getStatistics = _a.getStats;\n\nvar guessBrowser = require('@twilio/webrtc/lib/util').guessBrowser;\n\nvar getSdpFormat = require('@twilio/webrtc/lib/util/sdp').getSdpFormat;\n\nvar _b = require('../../util/constants'),\n    DEFAULT_ICE_GATHERING_TIMEOUT_MS = _b.DEFAULT_ICE_GATHERING_TIMEOUT_MS,\n    DEFAULT_LOG_LEVEL = _b.DEFAULT_LOG_LEVEL,\n    DEFAULT_SESSION_TIMEOUT_SEC = _b.DEFAULT_SESSION_TIMEOUT_SEC,\n    iceRestartBackoffConfig = _b.iceRestartBackoffConfig;\n\nvar _c = require('../../util/sdp'),\n    createCodecMapForMediaSection = _c.createCodecMapForMediaSection,\n    disableRtx = _c.disableRtx,\n    enableDtxForOpus = _c.enableDtxForOpus,\n    getMediaSections = _c.getMediaSections,\n    removeSSRCAttributes = _c.removeSSRCAttributes,\n    revertSimulcastForNonVP8MediaSections = _c.revertSimulcastForNonVP8MediaSections,\n    setBitrateParameters = _c.setBitrateParameters,\n    setCodecPreferences = _c.setCodecPreferences,\n    setSimulcast = _c.setSimulcast,\n    unifiedPlanAddOrRewriteNewTrackIds = _c.unifiedPlanAddOrRewriteNewTrackIds,\n    unifiedPlanAddOrRewriteTrackIds = _c.unifiedPlanAddOrRewriteTrackIds,\n    unifiedPlanFilterLocalCodecs = _c.unifiedPlanFilterLocalCodecs;\n\nvar DefaultTimeout = require('../../util/timeout');\n\nvar _d = require('../../util/twilio-video-errors'),\n    MediaClientLocalDescFailedError = _d.MediaClientLocalDescFailedError,\n    MediaClientRemoteDescFailedError = _d.MediaClientRemoteDescFailedError;\n\nvar _e = require('../../util'),\n    buildLogLevels = _e.buildLogLevels,\n    getPlatform = _e.getPlatform,\n    isChromeScreenShareTrack = _e.isChromeScreenShareTrack,\n    oncePerTick = _e.oncePerTick;\n\nvar IceBox = require('./icebox');\n\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\n\nvar DataTrackReceiver = require('../../data/receiver');\n\nvar MediaTrackReceiver = require('../../media/track/receiver');\n\nvar StateMachine = require('../../statemachine');\n\nvar Log = require('../../util/log');\n\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\n\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\n\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\n\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\n\nvar guess = guessBrowser();\nvar platform = getPlatform();\nvar isAndroid = /android/.test(platform);\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\nvar nInstances = 0;\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#connectionStateChanged\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\n\nvar PeerConnectionV2 = function (_super) {\n  __extends(PeerConnectionV2, _super);\n  /**\n   * Construct a {@link PeerConnectionV2}.\n   * @param {string} id\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} [options]\n   */\n\n\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    var _this = _super.call(this, 'open', states) || this;\n\n    options = Object.assign({\n      enableDscp: false,\n      dummyAudioMediaStreamTrack: null,\n      isChromeScreenShareTrack: isChromeScreenShareTrack,\n      iceServers: [],\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n      sessionTimeout: DEFAULT_SESSION_TIMEOUT_SEC * 1000,\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      Backoff: DefaultBackoff,\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription,\n      Timeout: DefaultTimeout\n    }, options);\n    var configuration = getConfiguration(options);\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n\n    if (options.enableDscp === true) {\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n      options.chromeSpecificConstraints.optional.push({\n        googDscp: true\n      });\n    }\n\n    var log = options.log ? options.log.createLog('webrtc', _this) : new Log('webrtc', _this, logLevels, options.loggerName);\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    }\n\n    Object.defineProperties(_this, {\n      _appliedTrackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _didGenerateLocalCandidates: {\n        writable: true,\n        value: false\n      },\n      _enableDscp: {\n        value: options.enableDscp\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _isChromeScreenShareTrack: {\n        value: options.isChromeScreenShareTrack\n      },\n      _iceGatheringFailed: {\n        value: false,\n        writable: true\n      },\n      _iceGatheringTimeout: {\n        value: new options.Timeout(function () {\n          return _this._handleIceGatheringTimeout();\n        }, DEFAULT_ICE_GATHERING_TIMEOUT_MS, false)\n      },\n      _iceRestartBackoff: {\n        value: options.Backoff.exponential(iceRestartBackoffConfig)\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _isIceConnectionInactive: {\n        writable: true,\n        value: false\n      },\n      _isIceLite: {\n        writable: true,\n        value: false\n      },\n      _isIceRestartBackoffInProgress: {\n        writable: true,\n        value: false\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _isRTCRtpSenderParamsSupported: {\n        value: options.isRTCRtpSenderParamsSupported\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCodecs: {\n        value: new Set()\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescriptionWithoutSimulcast: {\n        writable: true,\n        value: null\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: log\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _remoteCodecMaps: {\n        value: new Map()\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _iceConnectionMonitor: {\n        value: new options.IceConnectionMonitor(peerConnection)\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _onEncodingParametersChanged: {\n        value: oncePerTick(function () {\n          if (_this._isRTCRtpSenderParamsSupported) {\n            if (!_this._needsAnswer) {\n              updateEncodingParameters(_this);\n            }\n\n            return;\n          }\n\n          _this.offer();\n        })\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _shouldApplyDtx: {\n        value: preferredCodecs.audio.every(function (_a) {\n          var codec = _a.codec;\n          return codec !== 'opus';\n        }) || preferredCodecs.audio.some(function (_a) {\n          var codec = _a.codec,\n              dtx = _a.dtx;\n          return codec === 'opus' && dtx;\n        })\n      },\n      _shouldApplySimulcast: {\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n        })\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _iceReconnectTimeout: {\n        value: new options.Timeout(function () {\n          log.debug('ICE reconnect timed out');\n\n          _this.close();\n        }, options.sessionTimeout, false)\n      },\n      _recycledTransceivers: {\n        value: {\n          audio: [],\n          video: []\n        }\n      },\n      _replaceTrackPromises: {\n        value: new Map()\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        // NOTE(mmalavalli): Re-ordering payload types in order to make sure a non-H264\n        // preferred codec is selected does not work on Android Firefox due to this behavior:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1683258. So, we work around this by\n        // not applying any non-H264 preferred video codec.\n        value: isFirefox && isAndroid && preferredCodecs.video[0] && preferredCodecs.video[0].codec.toLowerCase() !== 'h264' ? function (sdp) {\n          return sdp;\n        } : options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _revertSimulcastForNonVP8MediaSections: {\n        value: options.revertSimulcastForNonVP8MediaSections\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n    encodingParameters.on('changed', _this._onEncodingParametersChanged);\n    peerConnection.addEventListener('connectionstatechange', _this._handleConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('icegatheringstatechange', _this._handleIceGatheringStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n\n    _this._iceRestartBackoff.on('ready', function () {\n      return _this._initiateIceRestart();\n    });\n\n    var self = _this;\n\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n\n      self.removeListener('stateChanged', stateChanged);\n\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n\n    return _this;\n  }\n\n  PeerConnectionV2.prototype.toString = function () {\n    return \"[PeerConnectionV2 #\" + this._instanceId + \": \" + this.id + \"]\";\n  };\n\n  Object.defineProperty(PeerConnectionV2.prototype, \"connectionState\", {\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's RTCPeerConnectionState\n     * if supported by the browser, its RTCIceConnectionState otherwise.\n     * @property {RTCPeerConnectionState}\n     */\n    get: function get() {\n      return this.iceConnectionState === 'failed' ? 'failed' : this._peerConnection.connectionState || this.iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PeerConnectionV2.prototype, \"iceConnectionState\", {\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n     * RTCIceConnectionState.\n     * @property {RTCIceConnectionState}\n     */\n    get: function get() {\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' || this._iceGatheringFailed ? 'failed' : this._peerConnection.iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PeerConnectionV2.prototype, \"isApplicationSectionNegotiated\", {\n    /**\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\n     * of negotiating the application m= section.\n     * @returns {boolean}\n     */\n    get: function get() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        // accessing .localDescription in 'closed' state causes it throw exceptions.\n        return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\n      }\n\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates scaleResolutionDownBy for encoding layers.\n   * @param {number} width\n   * @param {number} height\n   * @param {Array<RTCRtpEncodingParameters>} encodings\n   */\n\n  PeerConnectionV2.prototype._updateEncodings = function (width, height, encodings) {\n    var _this = this; // NOTE(mpatwardhan): All the simulcast encodings in Safari have\n    // the same resolution. So, here we make sure that the lower layers have\n    // lower resolution, as seen in Chrome.\n\n\n    var pixelsToMaxActiveLayers = [{\n      pixels: 960 * 540,\n      maxActiveLayers: 3\n    }, {\n      pixels: 480 * 270,\n      maxActiveLayers: 2\n    }, {\n      pixels: 0,\n      maxActiveLayers: 1\n    }];\n    var trackPixels = width * height;\n    var activeLayersInfo = pixelsToMaxActiveLayers.find(function (layer) {\n      return trackPixels >= layer.pixels;\n    });\n    var activeLayers = Math.min(encodings.length, activeLayersInfo.maxActiveLayers);\n    encodings.forEach(function (encoding, i) {\n      encoding.active = i < activeLayers;\n\n      if (encoding.active) {\n        encoding.scaleResolutionDownBy = 1 << activeLayers - i - 1;\n      } else {\n        delete encoding.scaleResolutionDownBy;\n      }\n\n      _this._log.debug(\"setting up simulcast layer \" + i + \" with active = \" + encoding.active + \", scaleResolutionDownBy = \" + encoding.scaleResolutionDownBy);\n    });\n  };\n  /**\n   * Add an ICE candidate to the {@link PeerConnectionV2}.\n   * @private\n   * @param {object} candidate\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._addIceCandidate = function (candidate) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      candidate = new _this._RTCIceCandidate(candidate);\n      return _this._peerConnection.addIceCandidate(candidate);\n    }).catch(function (error) {\n      // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n      // empty candidate string to signal end-of-candidates, followed by a null\n      // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n      // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n      // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n      //\n      // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n      //\n      _this._log.warn(\"Failed to add RTCIceCandidate \" + (candidate ? \"\\\"\" + candidate.candidate + \"\\\"\" : 'null') + \": \" + error.message);\n    });\n  };\n  /**\n   * Add ICE candidates to the {@link PeerConnectionV2}.\n   * @private\n   * @param {Array<object>} candidates\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._addIceCandidates = function (candidates) {\n    return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n  };\n  /**\n   * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\n   * given MediaStreamTrack.\n   * @private\n   * @param {MediaStreamTrack} track\n   * @returns {RTCRtpTransceiver}\n   */\n\n\n  PeerConnectionV2.prototype._addOrUpdateTransceiver = function (track) {\n    var _this = this;\n\n    var transceiver = takeRecycledTransceiver(this, track.kind);\n\n    if (transceiver && transceiver.sender) {\n      var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n\n      if (oldTrackId) {\n        this._log.warn(\"Reusing transceiver: \" + transceiver.mid + \"] \" + oldTrackId + \" => \" + track.id);\n      } // NOTE(mpatwardhan):remember this transceiver while we replace track.\n      // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n      // this one from getting recycled while replaceTrack is pending.\n\n\n      this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n        transceiver.direction = 'sendrecv';\n      }, function () {// Do nothing.\n      }).finally(function () {\n        _this._replaceTrackPromises.delete(transceiver);\n      }));\n\n      return transceiver;\n    }\n\n    return this._peerConnection.addTransceiver(track);\n  };\n  /**\n   * Check the {@link IceBox}.\n   * @private\n   * @param {RTCSessionDescriptionInit} description\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._checkIceBox = function (description) {\n    var ufrag = getUfrag(description);\n\n    if (!ufrag) {\n      return Promise.resolve();\n    }\n\n    var candidates = this._remoteCandidates.setUfrag(ufrag);\n\n    return this._addIceCandidates(candidates);\n  };\n  /**\n   * Create an answer and set it on the {@link PeerConnectionV2}.\n   * @private\n   * @param {RTCSessionDescriptionInit} offer\n   * @returns {Promise<boolean>}\n   */\n\n\n  PeerConnectionV2.prototype._answer = function (offer) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      if (!_this._negotiationRole) {\n        _this._negotiationRole = 'answerer';\n      }\n\n      return _this._setRemoteDescription(offer);\n    }).catch(function () {\n      throw new MediaClientRemoteDescFailedError();\n    }).then(function () {\n      return _this._peerConnection.createAnswer();\n    }).then(function (answer) {\n      if (isFirefox) {\n        // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n        // RTX in Firefox 79+. For more details about the bug, please go here:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n        answer = new _this._RTCSessionDescription({\n          sdp: disableRtx(answer.sdp),\n          type: answer.type\n        });\n      } else {\n        answer = workaroundIssue8329(answer);\n      } // NOTE(mpatwardhan): Upcoming chrome versions are going to remove ssrc attributes\n      // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n      // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n      // We are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n      // this also helps reduce bytes on wires\n\n\n      var updatedSdp = removeSSRCAttributes(answer.sdp, ['mslabel', 'label']);\n\n      if (_this._shouldApplySimulcast) {\n        var sdpWithoutSimulcast = updatedSdp;\n        updatedSdp = _this._setSimulcast(sdpWithoutSimulcast, _this._sdpFormat, _this._trackIdsToAttributes); // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n        // unset simulcast for sections in local offer where corresponding\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n\n        updatedSdp = _this._revertSimulcastForNonVP8MediaSections(updatedSdp, sdpWithoutSimulcast, offer.sdp);\n      } // NOTE(mmalavalli): Work around Chromium bug 1074421.\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1074421\n\n\n      updatedSdp = updatedSdp.replace(/42e015/g, '42e01f');\n      return _this._setLocalDescription({\n        type: answer.type,\n        sdp: updatedSdp\n      });\n    }).then(function () {\n      return _this._checkIceBox(offer);\n    }).then(function () {\n      return _this._queuedDescription && _this._updateDescription(_this._queuedDescription);\n    }).then(function () {\n      _this._queuedDescription = null;\n      return _this._maybeReoffer(_this._peerConnection.localDescription);\n    }).catch(function (error) {\n      var errorToThrow = error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n\n      _this._publishMediaWarning({\n        message: 'Failed to _answer',\n        code: errorToThrow.code,\n        error: error\n      });\n\n      throw errorToThrow;\n    });\n  };\n  /**\n   * Close the underlying RTCPeerConnection. Returns false if the\n   * RTCPeerConnection was already closed.\n   * @private\n   * @returns {boolean}\n   */\n\n\n  PeerConnectionV2.prototype._close = function () {\n    this._iceConnectionMonitor.stop();\n\n    if (this._peerConnection.signalingState !== 'closed') {\n      this._peerConnection.close();\n\n      this.preempt('closed');\n\n      this._encodingParameters.removeListener('changed', this._onEncodingParametersChanged);\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Handle a \"connectionstatechange\" event.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleConnectionStateChange = function () {\n    this.emit('connectionStateChanged');\n  };\n  /**\n   * Handle a \"datachannel\" event.\n   * @private\n   * @param {RTCDataChannelEvent} event\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleDataChannelEvent = function (event) {\n    var _this = this;\n\n    var dataChannel = event.channel;\n    var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n\n    this._dataTrackReceivers.add(dataTrackReceiver);\n\n    dataChannel.addEventListener('close', function () {\n      _this._dataTrackReceivers.delete(dataTrackReceiver);\n    });\n    this.emit('trackAdded', dataTrackReceiver);\n  };\n  /**\n   * Handle a glare scenario on the {@link PeerConnectionV2}.\n   * @private\n   * @param {RTCSessionDescriptionInit} offer\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._handleGlare = function (offer) {\n    var _this = this;\n\n    this._log.debug('Glare detected; rolling back');\n\n    if (this._isRestartingIce) {\n      this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n\n      this._isRestartingIce = false;\n      this._shouldRestartIce = true;\n    }\n\n    return Promise.resolve().then(function () {\n      _this._trackIdsToAttributes = new Map(_this._appliedTrackIdsToAttributes);\n      return _this._setLocalDescription({\n        type: 'rollback'\n      });\n    }).then(function () {\n      _this._needsAnswer = false;\n      return _this._answer(offer);\n    }).then(function (didReoffer) {\n      return didReoffer ? Promise.resolve() : _this._offer();\n    });\n  };\n\n  PeerConnectionV2.prototype._publishMediaWarning = function (_a) {\n    var message = _a.message,\n        code = _a.code,\n        error = _a.error,\n        sdp = _a.sdp;\n\n    this._eventObserver.emit('event', {\n      level: 'warning',\n      name: 'error',\n      group: 'media',\n      payload: {\n        message: message,\n        code: code,\n        context: JSON.stringify({\n          error: error.message,\n          sdp: sdp\n        })\n      }\n    });\n  };\n  /**\n   * Handle an ICE candidate event.\n   * @private\n   * @param {Event} event\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleIceCandidateEvent = function (event) {\n    if (event.candidate) {\n      this._log.debug('Clearing ICE gathering timeout');\n\n      this._didGenerateLocalCandidates = true;\n\n      this._iceGatheringTimeout.clear();\n\n      this._localCandidates.push(event.candidate);\n    }\n\n    var peerConnectionState = {\n      ice: {\n        candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n        ufrag: this._localUfrag\n      },\n      id: this.id\n    };\n\n    if (!event.candidate) {\n      peerConnectionState.ice.complete = true;\n    }\n\n    if (!(this._isIceLite && event.candidate)) {\n      peerConnectionState.ice.revision = this._localCandidatesRevision++;\n      this.emit('candidates', peerConnectionState);\n    }\n  };\n  /**\n   * Handle an ICE connection state change event.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleIceConnectionStateChange = function () {\n    var _this = this;\n\n    var iceConnectionState = this._peerConnection.iceConnectionState;\n    var isIceConnectedOrComplete = ['connected', 'completed'].includes(iceConnectionState);\n    var log = this._log;\n    log.debug(\"ICE connection state is \\\"\" + iceConnectionState + \"\\\"\");\n\n    if (isIceConnectedOrComplete) {\n      this._iceReconnectTimeout.clear();\n\n      this._iceRestartBackoff.reset();\n    }\n\n    if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n      // Case 1: Transition to \"failed\".\n      log.warn('ICE failed');\n\n      this._initiateIceRestartBackoff();\n    } else if (['disconnected', 'failed'].includes(this._lastIceConnectionState) && isIceConnectedOrComplete) {\n      // Case 2: Transition from \"disconnected\" or \"failed\".\n      log.debug('ICE reconnected');\n    } // start monitor media when connected, and continue to monitor while state is complete-disconnected-connected.\n\n\n    if (iceConnectionState === 'connected') {\n      this._isIceConnectionInactive = false;\n\n      this._iceConnectionMonitor.start(function () {\n        // note: iceConnection monitor waits for iceConnectionState=disconnected for\n        // detecting inactivity. Its possible that it may know about disconnected before _handleIceConnectionStateChange\n        _this._iceConnectionMonitor.stop();\n\n        if (!_this._shouldRestartIce && !_this._isRestartingIce) {\n          log.warn('ICE Connection Monitor detected inactivity');\n          _this._isIceConnectionInactive = true;\n\n          _this._initiateIceRestartBackoff();\n\n          _this.emit('iceConnectionStateChanged');\n\n          _this.emit('connectionStateChanged');\n        }\n      });\n    } else if (!['disconnected', 'completed'].includes(iceConnectionState)) {\n      // don't stop monitoring for disconnected or completed.\n      this._iceConnectionMonitor.stop();\n\n      this._isIceConnectionInactive = false;\n    }\n\n    this._lastIceConnectionState = iceConnectionState;\n    this.emit('iceConnectionStateChanged');\n  };\n  /**\n   * Handle ICE gathering timeout.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleIceGatheringTimeout = function () {\n    this._log.warn('ICE failed to gather any local candidates');\n\n    this._iceGatheringFailed = true;\n\n    this._initiateIceRestartBackoff();\n\n    this.emit('iceConnectionStateChanged');\n    this.emit('connectionStateChanged');\n  };\n  /**\n   * Handle an ICE gathering state change event.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleIceGatheringStateChange = function () {\n    var iceGatheringState = this._peerConnection.iceGatheringState;\n    var log = this._log;\n    log.debug(\"ICE gathering state is \\\"\" + iceGatheringState + \"\\\"\"); // NOTE(mmalavalli): Start the ICE gathering timeout only if the RTCPeerConnection\n    // has started gathering candidates for the first time since the initial offer/answer\n    // or an offer/answer with ICE restart.\n\n    var _a = this._iceGatheringTimeout,\n        delay = _a.delay,\n        isSet = _a.isSet;\n\n    if (iceGatheringState === 'gathering' && !this._didGenerateLocalCandidates && !isSet) {\n      log.debug(\"Starting ICE gathering timeout: \" + delay);\n      this._iceGatheringFailed = false;\n\n      this._iceGatheringTimeout.start();\n    }\n  };\n  /**\n   * Handle a signaling state change event.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleSignalingStateChange = function () {\n    if (this._peerConnection.signalingState === 'stable') {\n      this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n    }\n  };\n  /**\n   * Handle a track event.\n   * @private\n   * @param {Event} event\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._handleTrackEvent = function (event) {\n    var _this = this;\n\n    var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n    if (!this._trackMatcher) {\n      this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher() // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n      // support, we have to use the same hacky solution as Safari. Revisit\n      // this when RTCRtpTransceivers and MIDs land. We should be able to use\n      // the same technique as Firefox.\n      : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n    }\n\n    this._trackMatcher.update(sdp);\n\n    var mediaStreamTrack = event.track;\n    var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n    var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack); // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n    // MediaStreamTrack when the remote peer removes a track. So, when this\n    // MediaStreamTrack is re-used for a different track due to the remote peer\n    // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n    // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n\n    this._mediaTrackReceivers.forEach(function (trackReceiver) {\n      if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n        _this._mediaTrackReceivers.delete(trackReceiver);\n      }\n    });\n\n    this._mediaTrackReceivers.add(mediaTrackReceiver);\n\n    mediaStreamTrack.addEventListener('ended', function () {\n      return _this._mediaTrackReceivers.delete(mediaTrackReceiver);\n    });\n    this.emit('trackAdded', mediaTrackReceiver);\n  };\n  /**\n   * Initiate ICE Restart.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._initiateIceRestart = function () {\n    if (this._peerConnection.signalingState === 'closed') {\n      return;\n    }\n\n    var log = this._log;\n    log.warn('Attempting to restart ICE');\n    this._didGenerateLocalCandidates = false;\n    this._isIceRestartBackoffInProgress = false;\n    this._shouldRestartIce = true;\n    var _a = this._iceReconnectTimeout,\n        delay = _a.delay,\n        isSet = _a.isSet;\n\n    if (!isSet) {\n      log.debug(\"Starting ICE reconnect timeout: \" + delay);\n\n      this._iceReconnectTimeout.start();\n    }\n\n    this.offer();\n  };\n  /**\n   * Schedule an ICE Restart.\n   * @private\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype._initiateIceRestartBackoff = function () {\n    if (this._peerConnection.signalingState === 'closed' || this._isIceRestartBackoffInProgress) {\n      return;\n    }\n\n    this._log.warn('An ICE restart has been scheduled');\n\n    this._isIceRestartBackoffInProgress = true;\n\n    this._iceRestartBackoff.backoff();\n  };\n  /**\n   * Conditionally re-offer.\n   * @private\n   * @param {?RTCSessionDescriptionInit} localDescription\n   * @returns {Promise<boolean>}\n   */\n\n\n  PeerConnectionV2.prototype._maybeReoffer = function (localDescription) {\n    var shouldReoffer = this._shouldOffer;\n\n    if (localDescription && localDescription.sdp) {\n      // NOTE(mmalavalli): For \"unified-plan\" sdps, if the local RTCSessionDescription\n      // has fewer audio and/or video send* m= lines than the corresponding RTCRtpSenders\n      // with non-null MediaStreamTracks, it means that the newly added RTCRtpSenders\n      // require renegotiation.\n      if (this._isUnifiedPlan) {\n        var senders_1 = this._peerConnection.getSenders().filter(function (sender) {\n          return sender.track;\n        });\n\n        shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n          var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n          var sendersOfKind = senders_1.filter(isSenderOfKind.bind(null, kind));\n          return shouldOffer || mediaSections.length < sendersOfKind.length;\n        }, shouldReoffer);\n      } // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n      // but no m= application section.\n\n\n      var hasDataTrack = this._dataChannels.size > 0;\n      var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n      var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n      shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n    }\n\n    var promise = shouldReoffer ? this._offer() : Promise.resolve();\n    return promise.then(function () {\n      return shouldReoffer;\n    });\n  };\n  /**\n   * Create an offer and set it on the {@link PeerConnectionV2}.\n   * @private\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._offer = function () {\n    var _this = this;\n\n    var offerOptions = Object.assign({}, this._offerOptions);\n    this._needsAnswer = true;\n\n    if (this._shouldRestartIce) {\n      this._shouldRestartIce = false;\n      this._isRestartingIce = true;\n      offerOptions.iceRestart = true;\n    }\n\n    return Promise.all(this._replaceTrackPromises.values()).then(function () {\n      return _this._peerConnection.createOffer(offerOptions);\n    }).catch(function (error) {\n      var errorToThrow = new MediaClientLocalDescFailedError();\n\n      _this._publishMediaWarning({\n        message: 'Failed to create offer',\n        code: errorToThrow.code,\n        error: error\n      });\n\n      throw errorToThrow;\n    }).then(function (offer) {\n      if (isFirefox) {\n        // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n        // RTX in Firefox 79+. For more details about the bug, please go here:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n        offer = new _this._RTCSessionDescription({\n          sdp: disableRtx(offer.sdp),\n          type: offer.type\n        });\n      } else {\n        offer = workaroundIssue8329(offer);\n      } // NOTE(mpatwardhan): upcoming chrome versions are going to remove ssrc attributes\n      // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n      // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n      // Looks like we are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n      // this also helps reduce bytes on wires\n\n\n      var sdp = removeSSRCAttributes(offer.sdp, ['mslabel', 'label']);\n      sdp = _this._isUnifiedPlan && _this._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(sdp, _this._peerConnection.remoteDescription.sdp) : sdp;\n\n      var updatedSdp = _this._setCodecPreferences(sdp, _this._preferredAudioCodecs, _this._preferredVideoCodecs);\n\n      _this._shouldOffer = false;\n\n      if (!_this._negotiationRole) {\n        _this._negotiationRole = 'offerer';\n      }\n\n      if (_this._shouldApplySimulcast) {\n        _this._localDescriptionWithoutSimulcast = {\n          type: 'offer',\n          sdp: updatedSdp\n        };\n        updatedSdp = _this._setSimulcast(updatedSdp, _this._sdpFormat, _this._trackIdsToAttributes);\n      }\n\n      return _this._setLocalDescription({\n        type: 'offer',\n        sdp: updatedSdp\n      });\n    });\n  };\n  /**\n   * Get the MediaTrackSender ID of the given MediaStreamTrack ID.\n   * Since a MediaTrackSender's underlying MediaStreamTrack can be\n   * replaced, the corresponding IDs can mismatch.\n   * @private\n   * @param {Track.ID} id\n   * @returns {Track.ID}\n   */\n\n\n  PeerConnectionV2.prototype._getMediaTrackSenderId = function (trackId) {\n    var mediaTrackSender = Array.from(this._rtpSenders.keys()).find(function (_a) {\n      var id = _a.track.id;\n      return id === trackId;\n    });\n    return mediaTrackSender ? mediaTrackSender.id : trackId;\n  };\n  /**\n   * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\n   * @private\n   * @param {RTCSessionDescription} description\n   * @return {RTCSessionDescription}\n   */\n\n\n  PeerConnectionV2.prototype._addOrRewriteLocalTrackIds = function (description) {\n    var _this = this;\n\n    var transceivers = this._peerConnection.getTransceivers();\n\n    var activeTransceivers = transceivers.filter(function (_a) {\n      var sender = _a.sender,\n          stopped = _a.stopped;\n      return !stopped && sender && sender.track;\n    }); // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n    // SDPs, and even if they are, there is no guarantee that they will be the same as the\n    // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n    // to the assigned m= sections here.\n\n    var assignedTransceivers = activeTransceivers.filter(function (_a) {\n      var mid = _a.mid;\n      return mid;\n    });\n    var midsToTrackIds = new Map(assignedTransceivers.map(function (_a) {\n      var mid = _a.mid,\n          sender = _a.sender;\n      return [mid, _this._getMediaTrackSenderId(sender.track.id)];\n    }));\n    var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds); // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n    // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n\n    var unassignedTransceivers = activeTransceivers.filter(function (_a) {\n      var mid = _a.mid;\n      return !mid;\n    });\n    var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\n      return [kind, unassignedTransceivers.filter(function (_a) {\n        var sender = _a.sender;\n        return sender.track.kind === kind;\n      }).map(function (_a) {\n        var sender = _a.sender;\n        return _this._getMediaTrackSenderId(sender.track.id);\n      })];\n    }));\n    var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n    return new this._RTCSessionDescription({\n      sdp: sdp2,\n      type: description.type\n    });\n  };\n  /**\n   * Rollback and apply the given offer.\n   * @private\n   * @param {RTCSessionDescriptionInit} offer\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._rollbackAndApplyOffer = function (offer) {\n    var _this = this;\n\n    return this._setLocalDescription({\n      type: 'rollback'\n    }).then(function () {\n      return _this._setLocalDescription(offer);\n    });\n  };\n  /**\n   * Set a local description on the {@link PeerConnectionV2}.\n   * @private\n   * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._setLocalDescription = function (description) {\n    var _this = this;\n\n    if (description.type !== 'rollback' && this._shouldApplyDtx) {\n      description = new this._RTCSessionDescription({\n        sdp: enableDtxForOpus(description.sdp),\n        type: description.type\n      });\n    }\n\n    return this._peerConnection.setLocalDescription(description).catch(function (error) {\n      _this._log.warn(\"Calling setLocalDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed with the error \\\"\" + error.message + \"\\\".\");\n\n      var errorToThrow = new MediaClientLocalDescFailedError();\n      var publishWarning = {\n        message: \"Calling setLocalDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed\",\n        code: errorToThrow.code,\n        error: error\n      };\n\n      if (description.sdp) {\n        _this._log.warn(\"The SDP was \" + description.sdp);\n\n        publishWarning.sdp = description.sdp;\n      }\n\n      _this._publishMediaWarning(publishWarning);\n\n      throw errorToThrow;\n    }).then(function () {\n      if (description.type !== 'rollback') {\n        _this._localDescription = _this._isUnifiedPlan ? _this._addOrRewriteLocalTrackIds(description) : description; // NOTE(mmalavalli): In order for this feature to be backward compatible with older\n        // SDK versions which to not support opus DTX, we append \"usedtx=1\" to the local SDP\n        // only while applying it. We will not send it over the wire to prevent inadvertent\n        // enabling of opus DTX in older SDKs. Newer SDKs will append \"usedtx=1\" by themselves\n        // if the developer has requested opus DTX to be enabled. (JSDK-3063)\n\n        if (_this._shouldApplyDtx) {\n          _this._localDescription = new _this._RTCSessionDescription({\n            sdp: enableDtxForOpus(_this._localDescription.sdp, []),\n            type: _this._localDescription.type\n          });\n        }\n\n        _this._localCandidates = [];\n\n        if (description.type === 'offer') {\n          _this._descriptionRevision++;\n        } else if (description.type === 'answer') {\n          _this._lastStableDescriptionRevision = _this._descriptionRevision;\n          negotiationCompleted(_this);\n        }\n\n        _this._localUfrag = getUfrag(description);\n\n        _this.emit('description', _this.getState());\n      }\n    });\n  };\n  /**\n   * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n   * @private\n   * @param {RTCSessionDescriptionInit} description\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._setRemoteDescription = function (description) {\n    var _this = this;\n\n    if (description.sdp) {\n      if (!this._isRTCRtpSenderParamsSupported) {\n        description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n      }\n\n      description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\n\n      if (this._shouldApplyDtx) {\n        description.sdp = enableDtxForOpus(description.sdp);\n      } else {\n        // NOTE(mmalavalli): Remove \"usedtx=1\" from opus's fmtp line if present\n        // since DTX is disabled.\n        description.sdp = enableDtxForOpus(description.sdp, []);\n      }\n\n      if (isFirefox) {\n        // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n        // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n        // doesn't include any new MediaStreams in Firefox. Its `streams` member\n        // will always be the empty Array.\n        description.sdp = filterOutMediaStreamIds(description.sdp);\n      }\n\n      if (!this._peerConnection.remoteDescription) {\n        this._isIceLite = /a=ice-lite/.test(description.sdp);\n      }\n    }\n\n    description = new this._RTCSessionDescription(description); // eslint-disable-next-line consistent-return\n\n    return Promise.resolve().then(function () {\n      // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n      // unset simulcast for sections in local offer where corresponding\n      // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n      if (description.type === 'answer' && _this._shouldApplySimulcast) {\n        var sdpWithoutSimulcastForNonVP8MediaSections = _this._revertSimulcastForNonVP8MediaSections(_this._localDescription.sdp, _this._localDescriptionWithoutSimulcast.sdp, description.sdp);\n\n        if (sdpWithoutSimulcastForNonVP8MediaSections !== _this._localDescription.sdp) {\n          return _this._rollbackAndApplyOffer({\n            type: _this._localDescription.type,\n            sdp: sdpWithoutSimulcastForNonVP8MediaSections\n          });\n        }\n      }\n    }).then(function () {\n      return _this._peerConnection.setRemoteDescription(description);\n    }).then(function () {\n      if (description.type === 'answer') {\n        if (_this._isRestartingIce) {\n          _this._log.debug('An ICE restart was in-progress and is now completed');\n\n          _this._isRestartingIce = false;\n        }\n\n        negotiationCompleted(_this);\n      }\n    }, function (error) {\n      _this._log.warn(\"Calling setRemoteDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed with the error \\\"\" + error.message + \"\\\".\");\n\n      if (description.sdp) {\n        _this._log.warn(\"The SDP was \" + description.sdp);\n      }\n\n      throw error;\n    });\n  };\n  /**\n   * Update the {@link PeerConnectionV2}'s description.\n   * @private\n   * @param {RTCSessionDescriptionInit} description\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._updateDescription = function (description) {\n    var _this = this;\n\n    switch (description.type) {\n      case 'answer':\n      case 'pranswer':\n        if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n          return Promise.resolve();\n        }\n\n        this._descriptionRevision = description.revision;\n        break;\n\n      case 'close':\n        return this._close();\n\n      case 'create-offer':\n        if (description.revision <= this._lastStableDescriptionRevision) {\n          return Promise.resolve();\n        } else if (this._needsAnswer) {\n          this._queuedDescription = description;\n          return Promise.resolve();\n        }\n\n        this._descriptionRevision = description.revision;\n        return this._offer();\n\n      case 'offer':\n        if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n          return Promise.resolve();\n        }\n\n        if (this._peerConnection.signalingState === 'have-local-offer') {\n          // NOTE(mpatwardhan): For a peer connection\n          // 1) createOffer always generate SDP with `setup:actpass`\n          // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n          // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n          // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n          // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n          // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n          // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n          if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._handleGlare(description);\n        }\n\n        this._descriptionRevision = description.revision;\n        return this._answer(description).then(function () {});\n\n      default: // Do nothing.\n\n    } // Handle answer or pranswer.\n\n\n    var revision = description.revision;\n    return Promise.resolve().then(function () {\n      return _this._setRemoteDescription(description);\n    }).catch(function (error) {\n      var errorToThrow = new MediaClientRemoteDescFailedError();\n\n      _this._publishMediaWarning({\n        message: \"Calling setRemoteDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed\",\n        code: errorToThrow.code,\n        error: error,\n        sdp: description.sdp\n      });\n\n      throw errorToThrow;\n    }).then(function () {\n      _this._lastStableDescriptionRevision = revision;\n      _this._needsAnswer = false;\n      return _this._checkIceBox(description);\n    }).then(function () {\n      return _this._queuedDescription && _this._updateDescription(_this._queuedDescription);\n    }).then(function () {\n      _this._queuedDescription = null;\n      return _this._maybeReoffer(_this._peerConnection.localDescription).then(function () {});\n    });\n  };\n  /**\n   * Update the {@link PeerConnectionV2}'s ICE candidates.\n   * @private\n   * @param {object} iceState\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype._updateIce = function (iceState) {\n    var candidates = this._remoteCandidates.update(iceState);\n\n    return this._addIceCandidates(candidates);\n  };\n  /**\n   * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n   * @param {DataTrackSender} dataTrackSender\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype.addDataTrackSender = function (dataTrackSender) {\n    if (this._dataChannels.has(dataTrackSender)) {\n      return;\n    }\n\n    try {\n      var dataChannelDict = {\n        ordered: dataTrackSender.ordered\n      };\n\n      if (dataTrackSender.maxPacketLifeTime !== null) {\n        dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n      }\n\n      if (dataTrackSender.maxRetransmits !== null) {\n        dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n      }\n\n      var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n\n      dataTrackSender.addDataChannel(dataChannel);\n\n      this._dataChannels.set(dataTrackSender, dataChannel);\n    } catch (error) {\n      this._log.warn(\"Error creating an RTCDataChannel for DataTrack \\\"\" + dataTrackSender.id + \"\\\": \" + error.message);\n    }\n  };\n  /**\n   * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n   * @param {MediaTrackSender} mediaTrackSender\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype.addMediaTrackSender = function (mediaTrackSender) {\n    if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n      return;\n    }\n\n    var sender;\n\n    if (this._localMediaStream) {\n      this._localMediaStream.addTrack(mediaTrackSender.track);\n\n      sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n    } else {\n      var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n\n      sender = transceiver.sender;\n    }\n\n    mediaTrackSender.addSender(sender);\n\n    this._rtpSenders.set(mediaTrackSender, sender);\n  };\n  /**\n   * Close the {@link PeerConnectionV2}.\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype.close = function () {\n    if (this._close()) {\n      this._descriptionRevision++;\n      this._localDescription = {\n        type: 'close'\n      };\n      this.emit('description', this.getState());\n    }\n  };\n  /**\n   * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n   * {@link PeerConnectionV2}.\n   * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n   */\n\n\n  PeerConnectionV2.prototype.getTrackReceivers = function () {\n    return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n  };\n  /**\n   * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n   * @returns {?object}\n   */\n\n\n  PeerConnectionV2.prototype.getState = function () {\n    if (!this._localDescription) {\n      return null;\n    } // NOTE(mpatwardhan): Return most recent localDescription. If the most recent local description is an\n    // answer, and this method is called for sending a \"sync\" message while the next remote offer is being processed,\n    // we need to send the most recent stable description revision instead of the current description revision,\n    // which is supposed to be for the next local answer.\n\n\n    var localDescriptionRevision = this._localDescription.type === 'answer' ? this._lastStableDescriptionRevision : this._descriptionRevision;\n    var localDescription = {\n      type: this._localDescription.type,\n      revision: localDescriptionRevision\n    };\n\n    if (this._localDescription.sdp) {\n      localDescription.sdp = this._localDescription.sdp;\n    }\n\n    return {\n      description: localDescription,\n      id: this.id\n    };\n  };\n  /**\n   * Create an offer and set it on the {@link PeerConnectionV2}.\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype.offer = function () {\n    var _this = this;\n\n    if (this._needsAnswer || this._isRestartingIce) {\n      this._shouldOffer = true;\n      return Promise.resolve();\n    }\n\n    return this.bracket('offering', function (key) {\n      _this.transition('updating', key);\n\n      var promise = _this._needsAnswer || _this._isRestartingIce ? Promise.resolve() : _this._offer();\n      return promise.then(function () {\n        _this.tryTransition('open', key);\n      }, function (error) {\n        _this.tryTransition('open', key);\n\n        throw error;\n      });\n    });\n  };\n  /**\n   * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n   * @param {DataTrackSender} dataTrackSender\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype.removeDataTrackSender = function (dataTrackSender) {\n    var dataChannel = this._dataChannels.get(dataTrackSender);\n\n    if (dataChannel) {\n      dataTrackSender.removeDataChannel(dataChannel);\n\n      this._dataChannels.delete(dataTrackSender);\n\n      dataChannel.close();\n    }\n  };\n  /**\n   * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n   * @param {MediaTrackSender} mediaTrackSender\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype.removeMediaTrackSender = function (mediaTrackSender) {\n    var sender = this._rtpSenders.get(mediaTrackSender);\n\n    if (!sender) {\n      return;\n    }\n\n    if (this._peerConnection.signalingState !== 'closed') {\n      this._peerConnection.removeTrack(sender);\n    }\n\n    if (this._localMediaStream) {\n      this._localMediaStream.removeTrack(mediaTrackSender.track);\n    }\n\n    mediaTrackSender.removeSender(sender);\n\n    this._rtpSenders.delete(mediaTrackSender);\n  };\n  /**\n   * Set the RTCConfiguration on the underlying RTCPeerConnection.\n   * @param {RTCConfiguration} configuration\n   * @returns {void}\n   */\n\n\n  PeerConnectionV2.prototype.setConfiguration = function (configuration) {\n    if (typeof this._peerConnection.setConfiguration === 'function') {\n      this._peerConnection.setConfiguration(getConfiguration(configuration));\n    }\n  };\n  /**\n   * Set the ICE reconnect timeout period.\n   * @param {number} period - Period in milliseconds.\n   * @returns {this}\n   */\n\n\n  PeerConnectionV2.prototype.setIceReconnectTimeout = function (period) {\n    this._iceReconnectTimeout.setDelay(period);\n\n    this._log.debug('Updated ICE reconnection timeout period:', this._iceReconnectTimeout.delay);\n\n    return this;\n  };\n  /**\n   * Update the {@link PeerConnectionV2}.\n   * @param {object} peerConnectionState\n   * @returns {Promise<void>}\n   */\n\n\n  PeerConnectionV2.prototype.update = function (peerConnectionState) {\n    var _this = this;\n\n    return this.bracket('updating', function (key) {\n      if (_this.state === 'closed') {\n        return Promise.resolve();\n      }\n\n      _this.transition('updating', key);\n\n      var updates = [];\n\n      if (peerConnectionState.ice) {\n        updates.push(_this._updateIce(peerConnectionState.ice));\n      }\n\n      if (peerConnectionState.description) {\n        updates.push(_this._updateDescription(peerConnectionState.description));\n      }\n\n      return Promise.all(updates).then(function () {\n        _this.tryTransition('open', key);\n      }, function (error) {\n        _this.tryTransition('open', key);\n\n        throw error;\n      });\n    });\n  };\n  /**\n   * Get the {@link PeerConnectionV2}'s media statistics.\n   * @returns {Promise<StandardizedStatsResponse>}\n   */\n\n\n  PeerConnectionV2.prototype.getStats = function () {\n    var _this = this;\n\n    return getStatistics(this._peerConnection).then(function (response) {\n      return rewriteTrackIds(_this, response);\n    });\n  };\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteLocalTrackId(pcv2, stats) {\n  var trackId = pcv2._getMediaTrackSenderId(stats.trackId);\n\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = __spreadArray([], __read(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    localAudioTrackStats: response.localAudioTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    }),\n    localVideoTrackStats: response.localVideoTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    })\n  });\n}\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n\n/**\n * @event PeerConnectionV2#connectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\n\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRtpSender} sender\n * @return {boolean}\n */\n\n\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\n\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n/**\n * Whether an RTCRtpTransceiver can be recycled.\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean}\n */\n\n\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && ['inactive', 'recvonly'].includes(transceiver.direction);\n}\n/**\n * Take a recycled RTCRtpTransceiver if available.\n * @param {PeerConnectionV2} pcv2\n * @param {Track.Kind} kind\n * @returns {?RTCRtpTransceiver}\n */\n\n\nfunction takeRecycledTransceiver(pcv2, kind) {\n  var preferredCodecs = {\n    audio: pcv2._preferredAudioCodecs.map(function (_a) {\n      var codec = _a.codec;\n      return codec.toLowerCase();\n    }),\n    video: pcv2._preferredVideoCodecs.map(function (_a) {\n      var codec = _a.codec;\n      return codec.toLowerCase();\n    })\n  }[kind];\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\n  var localCodec = preferredCodecs.find(function (codec) {\n    return pcv2._localCodecs.has(codec);\n  });\n\n  if (!localCodec) {\n    return recycledTransceivers.shift();\n  }\n\n  var transceiver = recycledTransceivers.find(function (transceiver) {\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\n  });\n\n  if (transceiver) {\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n  }\n\n  return transceiver;\n}\n/**\n * Update the set of locally supported {@link Codec}s.\n * @param pcv2\n * @returns {void}\n */\n\n\nfunction updateLocalCodecs(pcv2) {\n  var description = pcv2._peerConnection.localDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var codecMap = createCodecMapForMediaSection(section);\n    codecMap.forEach(function (pts, codec) {\n      return pcv2._localCodecs.add(codec);\n    });\n  });\n}\n/**\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction updateRemoteCodecMaps(pcv2) {\n  var description = pcv2._peerConnection.remoteDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n\n    pcv2._remoteCodecMaps.set(mid, codecMap);\n  });\n}\n/**\n * Update the list of recycled RTCRtpTransceivers.\n * @param {PeerConnectionV2} pcv2\n */\n\n\nfunction updateRecycledTransceivers(pcv2) {\n  pcv2._recycledTransceivers.audio = [];\n  pcv2._recycledTransceivers.video = [];\n\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\n      var track = transceiver.receiver.track;\n\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\n    }\n  });\n}\n/**\n * Perform certain updates after an SDP negotiation is completed.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction negotiationCompleted(pcv2) {\n  if (pcv2._isUnifiedPlan) {\n    updateRecycledTransceivers(pcv2);\n    updateLocalCodecs(pcv2);\n    updateRemoteCodecMaps(pcv2);\n  }\n\n  if (pcv2._isRTCRtpSenderParamsSupported) {\n    updateEncodingParameters(pcv2);\n  }\n}\n/**\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction updateEncodingParameters(pcv2) {\n  var _a = pcv2._encodingParameters,\n      maxAudioBitrate = _a.maxAudioBitrate,\n      maxVideoBitrate = _a.maxVideoBitrate;\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\n\n  pcv2._peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).forEach(function (sender) {\n    var maxBitrate = maxBitrates.get(sender.track.kind);\n    var params = sender.getParameters();\n\n    if (maxBitrate === null || maxBitrate === 0) {\n      removeMaxBitrate(params);\n    } else if (pcv2._isChromeScreenShareTrack(sender.track)) {\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n      pcv2._log.warn(\"Not setting maxBitrate for \" + sender.track.kind + \" Track \" + sender.track.id + \" because it appears to be screen share track: \" + sender.track.label);\n    } else {\n      setMaxBitrate(params, maxBitrate);\n    }\n\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n      // a per-encoding-layer property. So, we set the value only on the first\n      // encoding layer. Any attempt to set the value on subsequent encoding\n      // layers (in the case of simulcast) will result in the Promise returned\n      // by RTCRtpSender.setParameters() being rejected.\n      params.encodings[0].networkPriority = 'high';\n    }\n\n    if (isSafari && sender.track.kind === 'video') {\n      var _a = sender.track.getSettings(),\n          width = _a.width,\n          height = _a.height;\n\n      pcv2._updateEncodings(width, height, params.encodings);\n    }\n\n    sender.setParameters(params).catch(function (error) {\n      pcv2._log.warn(\"Error while setting encodings parameters for \" + sender.track.kind + \" Track \" + sender.track.id + \": \" + (error.message || error.name));\n    });\n  });\n}\n/**\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @returns {void}\n */\n\n\nfunction removeMaxBitrate(params) {\n  if (Array.isArray(params.encodings)) {\n    params.encodings.forEach(function (encoding) {\n      return delete encoding.maxBitrate;\n    });\n  }\n}\n/**\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @param {number} maxBitrate\n * @returns {void}\n */\n\n\nfunction setMaxBitrate(params, maxBitrate) {\n  if (isFirefox) {\n    params.encodings = [{\n      maxBitrate: maxBitrate\n    }];\n  } else {\n    params.encodings.forEach(function (encoding) {\n      encoding.maxBitrate = maxBitrate;\n    });\n  }\n}\n\nmodule.exports = PeerConnectionV2;","map":{"version":3,"sources":["../../../lib/signaling/v2/peerconnection.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar DefaultBackoff = require('backoff');\nvar _a = require('@twilio/webrtc'), DefaultMediaStream = _a.MediaStream, DefaultRTCIceCandidate = _a.RTCIceCandidate, DefaultRTCPeerConnection = _a.RTCPeerConnection, DefaultRTCSessionDescription = _a.RTCSessionDescription, getStatistics = _a.getStats;\nvar guessBrowser = require('@twilio/webrtc/lib/util').guessBrowser;\nvar getSdpFormat = require('@twilio/webrtc/lib/util/sdp').getSdpFormat;\nvar _b = require('../../util/constants'), DEFAULT_ICE_GATHERING_TIMEOUT_MS = _b.DEFAULT_ICE_GATHERING_TIMEOUT_MS, DEFAULT_LOG_LEVEL = _b.DEFAULT_LOG_LEVEL, DEFAULT_SESSION_TIMEOUT_SEC = _b.DEFAULT_SESSION_TIMEOUT_SEC, iceRestartBackoffConfig = _b.iceRestartBackoffConfig;\nvar _c = require('../../util/sdp'), createCodecMapForMediaSection = _c.createCodecMapForMediaSection, disableRtx = _c.disableRtx, enableDtxForOpus = _c.enableDtxForOpus, getMediaSections = _c.getMediaSections, removeSSRCAttributes = _c.removeSSRCAttributes, revertSimulcastForNonVP8MediaSections = _c.revertSimulcastForNonVP8MediaSections, setBitrateParameters = _c.setBitrateParameters, setCodecPreferences = _c.setCodecPreferences, setSimulcast = _c.setSimulcast, unifiedPlanAddOrRewriteNewTrackIds = _c.unifiedPlanAddOrRewriteNewTrackIds, unifiedPlanAddOrRewriteTrackIds = _c.unifiedPlanAddOrRewriteTrackIds, unifiedPlanFilterLocalCodecs = _c.unifiedPlanFilterLocalCodecs;\nvar DefaultTimeout = require('../../util/timeout');\nvar _d = require('../../util/twilio-video-errors'), MediaClientLocalDescFailedError = _d.MediaClientLocalDescFailedError, MediaClientRemoteDescFailedError = _d.MediaClientRemoteDescFailedError;\nvar _e = require('../../util'), buildLogLevels = _e.buildLogLevels, getPlatform = _e.getPlatform, isChromeScreenShareTrack = _e.isChromeScreenShareTrack, oncePerTick = _e.oncePerTick;\nvar IceBox = require('./icebox');\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\nvar DataTrackReceiver = require('../../data/receiver');\nvar MediaTrackReceiver = require('../../media/track/receiver');\nvar StateMachine = require('../../statemachine');\nvar Log = require('../../util/log');\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\nvar guess = guessBrowser();\nvar platform = getPlatform();\nvar isAndroid = /android/.test(platform);\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined'\n    && typeof RTCRtpSender.prototype.getParameters === 'function'\n    && typeof RTCRtpSender.prototype.setParameters === 'function';\nvar nInstances = 0;\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\nvar states = {\n    open: [\n        'closed',\n        'updating'\n    ],\n    updating: [\n        'closed',\n        'open'\n    ],\n    closed: []\n};\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#connectionStateChanged\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\nvar PeerConnectionV2 = /** @class */ (function (_super) {\n    __extends(PeerConnectionV2, _super);\n    /**\n     * Construct a {@link PeerConnectionV2}.\n     * @param {string} id\n     * @param {EncodingParametersImpl} encodingParameters\n     * @param {PreferredCodecs} preferredCodecs\n     * @param {object} [options]\n     */\n    function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n        var _this = _super.call(this, 'open', states) || this;\n        options = Object.assign({\n            enableDscp: false,\n            dummyAudioMediaStreamTrack: null,\n            isChromeScreenShareTrack: isChromeScreenShareTrack,\n            iceServers: [],\n            isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n            logLevel: DEFAULT_LOG_LEVEL,\n            offerOptions: {},\n            revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n            sessionTimeout: DEFAULT_SESSION_TIMEOUT_SEC * 1000,\n            setBitrateParameters: setBitrateParameters,\n            setCodecPreferences: setCodecPreferences,\n            setSimulcast: setSimulcast,\n            Backoff: DefaultBackoff,\n            IceConnectionMonitor: DefaultIceConnectionMonitor,\n            MediaStream: DefaultMediaStream,\n            RTCIceCandidate: DefaultRTCIceCandidate,\n            RTCPeerConnection: DefaultRTCPeerConnection,\n            RTCSessionDescription: DefaultRTCSessionDescription,\n            Timeout: DefaultTimeout\n        }, options);\n        var configuration = getConfiguration(options);\n        var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n        var isUnifiedPlan = sdpFormat === 'unified';\n        var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n        var logLevels = buildLogLevels(options.logLevel);\n        var RTCPeerConnection = options.RTCPeerConnection;\n        if (options.enableDscp === true) {\n            options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n            options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n            options.chromeSpecificConstraints.optional.push({ googDscp: true });\n        }\n        var log = options.log ? options.log.createLog('webrtc', _this) : new Log('webrtc', _this, logLevels, options.loggerName);\n        var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n        if (options.dummyAudioMediaStreamTrack) {\n            peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n        }\n        Object.defineProperties(_this, {\n            _appliedTrackIdsToAttributes: {\n                value: new Map(),\n                writable: true\n            },\n            _dataChannels: {\n                value: new Map()\n            },\n            _dataTrackReceivers: {\n                value: new Set()\n            },\n            _descriptionRevision: {\n                writable: true,\n                value: 0\n            },\n            _didGenerateLocalCandidates: {\n                writable: true,\n                value: false\n            },\n            _enableDscp: {\n                value: options.enableDscp\n            },\n            _encodingParameters: {\n                value: encodingParameters\n            },\n            _isChromeScreenShareTrack: {\n                value: options.isChromeScreenShareTrack,\n            },\n            _iceGatheringFailed: {\n                value: false,\n                writable: true\n            },\n            _iceGatheringTimeout: {\n                value: new options.Timeout(function () { return _this._handleIceGatheringTimeout(); }, DEFAULT_ICE_GATHERING_TIMEOUT_MS, false)\n            },\n            _iceRestartBackoff: {\n                value: options.Backoff.exponential(iceRestartBackoffConfig)\n            },\n            _instanceId: {\n                value: ++nInstances\n            },\n            _isIceConnectionInactive: {\n                writable: true,\n                value: false\n            },\n            _isIceLite: {\n                writable: true,\n                value: false\n            },\n            _isIceRestartBackoffInProgress: {\n                writable: true,\n                value: false\n            },\n            _isRestartingIce: {\n                writable: true,\n                value: false\n            },\n            _isUnifiedPlan: {\n                value: isUnifiedPlan\n            },\n            _isRTCRtpSenderParamsSupported: {\n                value: options.isRTCRtpSenderParamsSupported\n            },\n            _lastIceConnectionState: {\n                writable: true,\n                value: null\n            },\n            _lastStableDescriptionRevision: {\n                writable: true,\n                value: 0\n            },\n            _localCandidates: {\n                writable: true,\n                value: []\n            },\n            _localCodecs: {\n                value: new Set()\n            },\n            _localCandidatesRevision: {\n                writable: true,\n                value: 1\n            },\n            _localDescriptionWithoutSimulcast: {\n                writable: true,\n                value: null\n            },\n            _localDescription: {\n                writable: true,\n                value: null\n            },\n            _localMediaStream: {\n                value: localMediaStream\n            },\n            _localUfrag: {\n                writable: true,\n                value: null\n            },\n            _log: {\n                value: log\n            },\n            _eventObserver: {\n                value: options.eventObserver\n            },\n            _remoteCodecMaps: {\n                value: new Map()\n            },\n            _rtpSenders: {\n                value: new Map()\n            },\n            _iceConnectionMonitor: {\n                value: new options.IceConnectionMonitor(peerConnection)\n            },\n            _mediaTrackReceivers: {\n                value: new Set()\n            },\n            _needsAnswer: {\n                writable: true,\n                value: false\n            },\n            _negotiationRole: {\n                writable: true,\n                value: null\n            },\n            _offerOptions: {\n                writable: true,\n                value: options.offerOptions\n            },\n            _onEncodingParametersChanged: {\n                value: oncePerTick(function () {\n                    if (_this._isRTCRtpSenderParamsSupported) {\n                        if (!_this._needsAnswer) {\n                            updateEncodingParameters(_this);\n                        }\n                        return;\n                    }\n                    _this.offer();\n                })\n            },\n            _peerConnection: {\n                value: peerConnection\n            },\n            _preferredAudioCodecs: {\n                value: preferredCodecs.audio\n            },\n            _preferredVideoCodecs: {\n                value: preferredCodecs.video\n            },\n            _shouldApplyDtx: {\n                value: preferredCodecs.audio.every(function (_a) {\n                    var codec = _a.codec;\n                    return codec !== 'opus';\n                })\n                    || preferredCodecs.audio.some(function (_a) {\n                        var codec = _a.codec, dtx = _a.dtx;\n                        return codec === 'opus' && dtx;\n                    })\n            },\n            _shouldApplySimulcast: {\n                value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) { return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast; })\n            },\n            _queuedDescription: {\n                writable: true,\n                value: null\n            },\n            _iceReconnectTimeout: {\n                value: new options.Timeout(function () {\n                    log.debug('ICE reconnect timed out');\n                    _this.close();\n                }, options.sessionTimeout, false)\n            },\n            _recycledTransceivers: {\n                value: {\n                    audio: [],\n                    video: []\n                }\n            },\n            _replaceTrackPromises: {\n                value: new Map()\n            },\n            _remoteCandidates: {\n                writable: true,\n                value: new IceBox()\n            },\n            _sdpFormat: {\n                value: sdpFormat\n            },\n            _setBitrateParameters: {\n                value: options.setBitrateParameters\n            },\n            _setCodecPreferences: {\n                // NOTE(mmalavalli): Re-ordering payload types in order to make sure a non-H264\n                // preferred codec is selected does not work on Android Firefox due to this behavior:\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=1683258. So, we work around this by\n                // not applying any non-H264 preferred video codec.\n                value: isFirefox && isAndroid && preferredCodecs.video[0] && preferredCodecs.video[0].codec.toLowerCase() !== 'h264'\n                    ? function (sdp) { return sdp; }\n                    : options.setCodecPreferences\n            },\n            _setSimulcast: {\n                value: options.setSimulcast\n            },\n            _revertSimulcastForNonVP8MediaSections: {\n                value: options.revertSimulcastForNonVP8MediaSections\n            },\n            _RTCIceCandidate: {\n                value: options.RTCIceCandidate\n            },\n            _RTCPeerConnection: {\n                value: options.RTCPeerConnection\n            },\n            _RTCSessionDescription: {\n                value: options.RTCSessionDescription\n            },\n            _shouldOffer: {\n                writable: true,\n                value: false\n            },\n            _shouldRestartIce: {\n                writable: true,\n                value: false\n            },\n            _trackIdsToAttributes: {\n                value: new Map(),\n                writable: true\n            },\n            _trackMatcher: {\n                writable: true,\n                value: null\n            },\n            id: {\n                enumerable: true,\n                value: id\n            }\n        });\n        encodingParameters.on('changed', _this._onEncodingParametersChanged);\n        peerConnection.addEventListener('connectionstatechange', _this._handleConnectionStateChange.bind(_this));\n        peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n        peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n        peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n        peerConnection.addEventListener('icegatheringstatechange', _this._handleIceGatheringStateChange.bind(_this));\n        peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n        peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n        _this._iceRestartBackoff.on('ready', function () { return _this._initiateIceRestart(); });\n        var self = _this;\n        _this.on('stateChanged', function stateChanged(state) {\n            if (state !== 'closed') {\n                return;\n            }\n            self.removeListener('stateChanged', stateChanged);\n            self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n                self.removeDataTrackSender(dataTrackSender);\n            });\n        });\n        return _this;\n    }\n    PeerConnectionV2.prototype.toString = function () {\n        return \"[PeerConnectionV2 #\" + this._instanceId + \": \" + this.id + \"]\";\n    };\n    Object.defineProperty(PeerConnectionV2.prototype, \"connectionState\", {\n        /**\n         * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's RTCPeerConnectionState\n         * if supported by the browser, its RTCIceConnectionState otherwise.\n         * @property {RTCPeerConnectionState}\n         */\n        get: function () {\n            return this.iceConnectionState === 'failed'\n                ? 'failed' : (this._peerConnection.connectionState || this.iceConnectionState);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PeerConnectionV2.prototype, \"iceConnectionState\", {\n        /**\n         * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n         * RTCIceConnectionState.\n         * @property {RTCIceConnectionState}\n         */\n        get: function () {\n            return ((this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected') || this._iceGatheringFailed)\n                ? 'failed' : this._peerConnection.iceConnectionState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PeerConnectionV2.prototype, \"isApplicationSectionNegotiated\", {\n        /**\n         * Whether the {@link PeerConnectionV2} has negotiated or is in the process\n         * of negotiating the application m= section.\n         * @returns {boolean}\n         */\n        get: function () {\n            if (this._peerConnection.signalingState !== 'closed') {\n                // accessing .localDescription in 'closed' state causes it throw exceptions.\n                return this._peerConnection.localDescription\n                    ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0\n                    : false;\n            }\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates scaleResolutionDownBy for encoding layers.\n     * @param {number} width\n     * @param {number} height\n     * @param {Array<RTCRtpEncodingParameters>} encodings\n     */\n    PeerConnectionV2.prototype._updateEncodings = function (width, height, encodings) {\n        var _this = this;\n        // NOTE(mpatwardhan): All the simulcast encodings in Safari have\n        // the same resolution. So, here we make sure that the lower layers have\n        // lower resolution, as seen in Chrome.\n        var pixelsToMaxActiveLayers = [\n            { pixels: 960 * 540, maxActiveLayers: 3 },\n            { pixels: 480 * 270, maxActiveLayers: 2 },\n            { pixels: 0, maxActiveLayers: 1 }\n        ];\n        var trackPixels = width * height;\n        var activeLayersInfo = pixelsToMaxActiveLayers.find(function (layer) { return trackPixels >= layer.pixels; });\n        var activeLayers = Math.min(encodings.length, activeLayersInfo.maxActiveLayers);\n        encodings.forEach(function (encoding, i) {\n            encoding.active = i < activeLayers;\n            if (encoding.active) {\n                encoding.scaleResolutionDownBy = 1 << (activeLayers - i - 1);\n            }\n            else {\n                delete encoding.scaleResolutionDownBy;\n            }\n            _this._log.debug(\"setting up simulcast layer \" + i + \" with active = \" + encoding.active + \", scaleResolutionDownBy = \" + encoding.scaleResolutionDownBy);\n        });\n    };\n    /**\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\n     * @private\n     * @param {object} candidate\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._addIceCandidate = function (candidate) {\n        var _this = this;\n        return Promise.resolve().then(function () {\n            candidate = new _this._RTCIceCandidate(candidate);\n            return _this._peerConnection.addIceCandidate(candidate);\n        }).catch(function (error) {\n            // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n            // empty candidate string to signal end-of-candidates, followed by a null\n            // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n            // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n            // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n            //\n            // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n            //\n            _this._log.warn(\"Failed to add RTCIceCandidate \" + (candidate ? \"\\\"\" + candidate.candidate + \"\\\"\" : 'null') + \": \"\n                + error.message);\n        });\n    };\n    /**\n     * Add ICE candidates to the {@link PeerConnectionV2}.\n     * @private\n     * @param {Array<object>} candidates\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._addIceCandidates = function (candidates) {\n        return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () { });\n    };\n    /**\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\n     * given MediaStreamTrack.\n     * @private\n     * @param {MediaStreamTrack} track\n     * @returns {RTCRtpTransceiver}\n     */\n    PeerConnectionV2.prototype._addOrUpdateTransceiver = function (track) {\n        var _this = this;\n        var transceiver = takeRecycledTransceiver(this, track.kind);\n        if (transceiver && transceiver.sender) {\n            var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n            if (oldTrackId) {\n                this._log.warn(\"Reusing transceiver: \" + transceiver.mid + \"] \" + oldTrackId + \" => \" + track.id);\n            }\n            // NOTE(mpatwardhan):remember this transceiver while we replace track.\n            // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n            // this one from getting recycled while replaceTrack is pending.\n            this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n                transceiver.direction = 'sendrecv';\n            }, function () {\n                // Do nothing.\n            }).finally(function () {\n                _this._replaceTrackPromises.delete(transceiver);\n            }));\n            return transceiver;\n        }\n        return this._peerConnection.addTransceiver(track);\n    };\n    /**\n     * Check the {@link IceBox}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._checkIceBox = function (description) {\n        var ufrag = getUfrag(description);\n        if (!ufrag) {\n            return Promise.resolve();\n        }\n        var candidates = this._remoteCandidates.setUfrag(ufrag);\n        return this._addIceCandidates(candidates);\n    };\n    /**\n     * Create an answer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<boolean>}\n     */\n    PeerConnectionV2.prototype._answer = function (offer) {\n        var _this = this;\n        return Promise.resolve().then(function () {\n            if (!_this._negotiationRole) {\n                _this._negotiationRole = 'answerer';\n            }\n            return _this._setRemoteDescription(offer);\n        }).catch(function () {\n            throw new MediaClientRemoteDescFailedError();\n        }).then(function () {\n            return _this._peerConnection.createAnswer();\n        }).then(function (answer) {\n            if (isFirefox) {\n                // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n                // RTX in Firefox 79+. For more details about the bug, please go here:\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n                answer = new _this._RTCSessionDescription({\n                    sdp: disableRtx(answer.sdp),\n                    type: answer.type\n                });\n            }\n            else {\n                answer = workaroundIssue8329(answer);\n            }\n            // NOTE(mpatwardhan): Upcoming chrome versions are going to remove ssrc attributes\n            // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n            // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n            // We are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n            // this also helps reduce bytes on wires\n            var updatedSdp = removeSSRCAttributes(answer.sdp, ['mslabel', 'label']);\n            if (_this._shouldApplySimulcast) {\n                var sdpWithoutSimulcast = updatedSdp;\n                updatedSdp = _this._setSimulcast(sdpWithoutSimulcast, _this._sdpFormat, _this._trackIdsToAttributes);\n                // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n                // unset simulcast for sections in local offer where corresponding\n                // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n                updatedSdp = _this._revertSimulcastForNonVP8MediaSections(updatedSdp, sdpWithoutSimulcast, offer.sdp);\n            }\n            // NOTE(mmalavalli): Work around Chromium bug 1074421.\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1074421\n            updatedSdp = updatedSdp.replace(/42e015/g, '42e01f');\n            return _this._setLocalDescription({\n                type: answer.type,\n                sdp: updatedSdp\n            });\n        }).then(function () {\n            return _this._checkIceBox(offer);\n        }).then(function () {\n            return _this._queuedDescription\n                && _this._updateDescription(_this._queuedDescription);\n        }).then(function () {\n            _this._queuedDescription = null;\n            return _this._maybeReoffer(_this._peerConnection.localDescription);\n        }).catch(function (error) {\n            var errorToThrow = error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n            _this._publishMediaWarning({\n                message: 'Failed to _answer',\n                code: errorToThrow.code,\n                error: error\n            });\n            throw errorToThrow;\n        });\n    };\n    /**\n     * Close the underlying RTCPeerConnection. Returns false if the\n     * RTCPeerConnection was already closed.\n     * @private\n     * @returns {boolean}\n     */\n    PeerConnectionV2.prototype._close = function () {\n        this._iceConnectionMonitor.stop();\n        if (this._peerConnection.signalingState !== 'closed') {\n            this._peerConnection.close();\n            this.preempt('closed');\n            this._encodingParameters.removeListener('changed', this._onEncodingParametersChanged);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Handle a \"connectionstatechange\" event.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleConnectionStateChange = function () {\n        this.emit('connectionStateChanged');\n    };\n    /**\n     * Handle a \"datachannel\" event.\n     * @private\n     * @param {RTCDataChannelEvent} event\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleDataChannelEvent = function (event) {\n        var _this = this;\n        var dataChannel = event.channel;\n        var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n        this._dataTrackReceivers.add(dataTrackReceiver);\n        dataChannel.addEventListener('close', function () {\n            _this._dataTrackReceivers.delete(dataTrackReceiver);\n        });\n        this.emit('trackAdded', dataTrackReceiver);\n    };\n    /**\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._handleGlare = function (offer) {\n        var _this = this;\n        this._log.debug('Glare detected; rolling back');\n        if (this._isRestartingIce) {\n            this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n            this._isRestartingIce = false;\n            this._shouldRestartIce = true;\n        }\n        return Promise.resolve().then(function () {\n            _this._trackIdsToAttributes = new Map(_this._appliedTrackIdsToAttributes);\n            return _this._setLocalDescription({ type: 'rollback' });\n        }).then(function () {\n            _this._needsAnswer = false;\n            return _this._answer(offer);\n        }).then(function (didReoffer) {\n            return didReoffer ? Promise.resolve() : _this._offer();\n        });\n    };\n    PeerConnectionV2.prototype._publishMediaWarning = function (_a) {\n        var message = _a.message, code = _a.code, error = _a.error, sdp = _a.sdp;\n        this._eventObserver.emit('event', { level: 'warning', name: 'error', group: 'media', payload: {\n                message: message,\n                code: code,\n                context: JSON.stringify({ error: error.message, sdp: sdp })\n            } });\n    };\n    /**\n     * Handle an ICE candidate event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleIceCandidateEvent = function (event) {\n        if (event.candidate) {\n            this._log.debug('Clearing ICE gathering timeout');\n            this._didGenerateLocalCandidates = true;\n            this._iceGatheringTimeout.clear();\n            this._localCandidates.push(event.candidate);\n        }\n        var peerConnectionState = {\n            ice: {\n                candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n                ufrag: this._localUfrag\n            },\n            id: this.id\n        };\n        if (!event.candidate) {\n            peerConnectionState.ice.complete = true;\n        }\n        if (!(this._isIceLite && event.candidate)) {\n            peerConnectionState.ice.revision = this._localCandidatesRevision++;\n            this.emit('candidates', peerConnectionState);\n        }\n    };\n    /**\n     * Handle an ICE connection state change event.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleIceConnectionStateChange = function () {\n        var _this = this;\n        var iceConnectionState = this._peerConnection.iceConnectionState;\n        var isIceConnectedOrComplete = ['connected', 'completed'].includes(iceConnectionState);\n        var log = this._log;\n        log.debug(\"ICE connection state is \\\"\" + iceConnectionState + \"\\\"\");\n        if (isIceConnectedOrComplete) {\n            this._iceReconnectTimeout.clear();\n            this._iceRestartBackoff.reset();\n        }\n        if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n            // Case 1: Transition to \"failed\".\n            log.warn('ICE failed');\n            this._initiateIceRestartBackoff();\n        }\n        else if (['disconnected', 'failed'].includes(this._lastIceConnectionState) && isIceConnectedOrComplete) {\n            // Case 2: Transition from \"disconnected\" or \"failed\".\n            log.debug('ICE reconnected');\n        }\n        // start monitor media when connected, and continue to monitor while state is complete-disconnected-connected.\n        if (iceConnectionState === 'connected') {\n            this._isIceConnectionInactive = false;\n            this._iceConnectionMonitor.start(function () {\n                // note: iceConnection monitor waits for iceConnectionState=disconnected for\n                // detecting inactivity. Its possible that it may know about disconnected before _handleIceConnectionStateChange\n                _this._iceConnectionMonitor.stop();\n                if (!_this._shouldRestartIce && !_this._isRestartingIce) {\n                    log.warn('ICE Connection Monitor detected inactivity');\n                    _this._isIceConnectionInactive = true;\n                    _this._initiateIceRestartBackoff();\n                    _this.emit('iceConnectionStateChanged');\n                    _this.emit('connectionStateChanged');\n                }\n            });\n        }\n        else if (!['disconnected', 'completed'].includes(iceConnectionState)) { // don't stop monitoring for disconnected or completed.\n            this._iceConnectionMonitor.stop();\n            this._isIceConnectionInactive = false;\n        }\n        this._lastIceConnectionState = iceConnectionState;\n        this.emit('iceConnectionStateChanged');\n    };\n    /**\n     * Handle ICE gathering timeout.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleIceGatheringTimeout = function () {\n        this._log.warn('ICE failed to gather any local candidates');\n        this._iceGatheringFailed = true;\n        this._initiateIceRestartBackoff();\n        this.emit('iceConnectionStateChanged');\n        this.emit('connectionStateChanged');\n    };\n    /**\n     * Handle an ICE gathering state change event.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleIceGatheringStateChange = function () {\n        var iceGatheringState = this._peerConnection.iceGatheringState;\n        var log = this._log;\n        log.debug(\"ICE gathering state is \\\"\" + iceGatheringState + \"\\\"\");\n        // NOTE(mmalavalli): Start the ICE gathering timeout only if the RTCPeerConnection\n        // has started gathering candidates for the first time since the initial offer/answer\n        // or an offer/answer with ICE restart.\n        var _a = this._iceGatheringTimeout, delay = _a.delay, isSet = _a.isSet;\n        if (iceGatheringState === 'gathering' && !this._didGenerateLocalCandidates && !isSet) {\n            log.debug(\"Starting ICE gathering timeout: \" + delay);\n            this._iceGatheringFailed = false;\n            this._iceGatheringTimeout.start();\n        }\n    };\n    /**\n     * Handle a signaling state change event.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleSignalingStateChange = function () {\n        if (this._peerConnection.signalingState === 'stable') {\n            this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n        }\n    };\n    /**\n     * Handle a track event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._handleTrackEvent = function (event) {\n        var _this = this;\n        var sdp = this._peerConnection.remoteDescription\n            ? this._peerConnection.remoteDescription.sdp\n            : null;\n        if (!this._trackMatcher) {\n            this._trackMatcher = event.transceiver && event.transceiver.mid\n                ? new MIDTrackMatcher()\n                // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n                // support, we have to use the same hacky solution as Safari. Revisit\n                // this when RTCRtpTransceivers and MIDs land. We should be able to use\n                // the same technique as Firefox.\n                : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n        }\n        this._trackMatcher.update(sdp);\n        var mediaStreamTrack = event.track;\n        var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n        var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack);\n        // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n        // MediaStreamTrack when the remote peer removes a track. So, when this\n        // MediaStreamTrack is re-used for a different track due to the remote peer\n        // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n        // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n        this._mediaTrackReceivers.forEach(function (trackReceiver) {\n            if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n                _this._mediaTrackReceivers.delete(trackReceiver);\n            }\n        });\n        this._mediaTrackReceivers.add(mediaTrackReceiver);\n        mediaStreamTrack.addEventListener('ended', function () { return _this._mediaTrackReceivers.delete(mediaTrackReceiver); });\n        this.emit('trackAdded', mediaTrackReceiver);\n    };\n    /**\n     * Initiate ICE Restart.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._initiateIceRestart = function () {\n        if (this._peerConnection.signalingState === 'closed') {\n            return;\n        }\n        var log = this._log;\n        log.warn('Attempting to restart ICE');\n        this._didGenerateLocalCandidates = false;\n        this._isIceRestartBackoffInProgress = false;\n        this._shouldRestartIce = true;\n        var _a = this._iceReconnectTimeout, delay = _a.delay, isSet = _a.isSet;\n        if (!isSet) {\n            log.debug(\"Starting ICE reconnect timeout: \" + delay);\n            this._iceReconnectTimeout.start();\n        }\n        this.offer();\n    };\n    /**\n     * Schedule an ICE Restart.\n     * @private\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype._initiateIceRestartBackoff = function () {\n        if (this._peerConnection.signalingState === 'closed' || this._isIceRestartBackoffInProgress) {\n            return;\n        }\n        this._log.warn('An ICE restart has been scheduled');\n        this._isIceRestartBackoffInProgress = true;\n        this._iceRestartBackoff.backoff();\n    };\n    /**\n     * Conditionally re-offer.\n     * @private\n     * @param {?RTCSessionDescriptionInit} localDescription\n     * @returns {Promise<boolean>}\n     */\n    PeerConnectionV2.prototype._maybeReoffer = function (localDescription) {\n        var shouldReoffer = this._shouldOffer;\n        if (localDescription && localDescription.sdp) {\n            // NOTE(mmalavalli): For \"unified-plan\" sdps, if the local RTCSessionDescription\n            // has fewer audio and/or video send* m= lines than the corresponding RTCRtpSenders\n            // with non-null MediaStreamTracks, it means that the newly added RTCRtpSenders\n            // require renegotiation.\n            if (this._isUnifiedPlan) {\n                var senders_1 = this._peerConnection.getSenders().filter(function (sender) { return sender.track; });\n                shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n                    var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n                    var sendersOfKind = senders_1.filter(isSenderOfKind.bind(null, kind));\n                    return shouldOffer || (mediaSections.length < sendersOfKind.length);\n                }, shouldReoffer);\n            }\n            // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n            // but no m= application section.\n            var hasDataTrack = this._dataChannels.size > 0;\n            var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n            var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n            shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n        }\n        var promise = shouldReoffer ? this._offer() : Promise.resolve();\n        return promise.then(function () { return shouldReoffer; });\n    };\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._offer = function () {\n        var _this = this;\n        var offerOptions = Object.assign({}, this._offerOptions);\n        this._needsAnswer = true;\n        if (this._shouldRestartIce) {\n            this._shouldRestartIce = false;\n            this._isRestartingIce = true;\n            offerOptions.iceRestart = true;\n        }\n        return Promise.all(this._replaceTrackPromises.values()).then(function () {\n            return _this._peerConnection.createOffer(offerOptions);\n        }).catch(function (error) {\n            var errorToThrow = new MediaClientLocalDescFailedError();\n            _this._publishMediaWarning({\n                message: 'Failed to create offer',\n                code: errorToThrow.code,\n                error: error\n            });\n            throw errorToThrow;\n        }).then(function (offer) {\n            if (isFirefox) {\n                // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n                // RTX in Firefox 79+. For more details about the bug, please go here:\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n                offer = new _this._RTCSessionDescription({\n                    sdp: disableRtx(offer.sdp),\n                    type: offer.type\n                });\n            }\n            else {\n                offer = workaroundIssue8329(offer);\n            }\n            // NOTE(mpatwardhan): upcoming chrome versions are going to remove ssrc attributes\n            // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n            // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n            // Looks like we are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n            // this also helps reduce bytes on wires\n            var sdp = removeSSRCAttributes(offer.sdp, ['mslabel', 'label']);\n            sdp = _this._isUnifiedPlan && _this._peerConnection.remoteDescription\n                ? unifiedPlanFilterLocalCodecs(sdp, _this._peerConnection.remoteDescription.sdp)\n                : sdp;\n            var updatedSdp = _this._setCodecPreferences(sdp, _this._preferredAudioCodecs, _this._preferredVideoCodecs);\n            _this._shouldOffer = false;\n            if (!_this._negotiationRole) {\n                _this._negotiationRole = 'offerer';\n            }\n            if (_this._shouldApplySimulcast) {\n                _this._localDescriptionWithoutSimulcast = {\n                    type: 'offer',\n                    sdp: updatedSdp\n                };\n                updatedSdp = _this._setSimulcast(updatedSdp, _this._sdpFormat, _this._trackIdsToAttributes);\n            }\n            return _this._setLocalDescription({\n                type: 'offer',\n                sdp: updatedSdp\n            });\n        });\n    };\n    /**\n     * Get the MediaTrackSender ID of the given MediaStreamTrack ID.\n     * Since a MediaTrackSender's underlying MediaStreamTrack can be\n     * replaced, the corresponding IDs can mismatch.\n     * @private\n     * @param {Track.ID} id\n     * @returns {Track.ID}\n     */\n    PeerConnectionV2.prototype._getMediaTrackSenderId = function (trackId) {\n        var mediaTrackSender = Array.from(this._rtpSenders.keys()).find(function (_a) {\n            var id = _a.track.id;\n            return id === trackId;\n        });\n        return mediaTrackSender ? mediaTrackSender.id : trackId;\n    };\n    /**\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\n     * @private\n     * @param {RTCSessionDescription} description\n     * @return {RTCSessionDescription}\n     */\n    PeerConnectionV2.prototype._addOrRewriteLocalTrackIds = function (description) {\n        var _this = this;\n        var transceivers = this._peerConnection.getTransceivers();\n        var activeTransceivers = transceivers.filter(function (_a) {\n            var sender = _a.sender, stopped = _a.stopped;\n            return !stopped && sender && sender.track;\n        });\n        // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n        // SDPs, and even if they are, there is no guarantee that they will be the same as the\n        // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n        // to the assigned m= sections here.\n        var assignedTransceivers = activeTransceivers.filter(function (_a) {\n            var mid = _a.mid;\n            return mid;\n        });\n        var midsToTrackIds = new Map(assignedTransceivers.map(function (_a) {\n            var mid = _a.mid, sender = _a.sender;\n            return [mid, _this._getMediaTrackSenderId(sender.track.id)];\n        }));\n        var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds);\n        // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n        // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n        var unassignedTransceivers = activeTransceivers.filter(function (_a) {\n            var mid = _a.mid;\n            return !mid;\n        });\n        var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) { return [\n            kind,\n            unassignedTransceivers.filter(function (_a) {\n                var sender = _a.sender;\n                return sender.track.kind === kind;\n            }).map(function (_a) {\n                var sender = _a.sender;\n                return _this._getMediaTrackSenderId(sender.track.id);\n            })\n        ]; }));\n        var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n        return new this._RTCSessionDescription({\n            sdp: sdp2,\n            type: description.type\n        });\n    };\n    /**\n     * Rollback and apply the given offer.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._rollbackAndApplyOffer = function (offer) {\n        var _this = this;\n        return this._setLocalDescription({ type: 'rollback' }).then(function () { return _this._setLocalDescription(offer); });\n    };\n    /**\n     * Set a local description on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._setLocalDescription = function (description) {\n        var _this = this;\n        if (description.type !== 'rollback' && this._shouldApplyDtx) {\n            description = new this._RTCSessionDescription({\n                sdp: enableDtxForOpus(description.sdp),\n                type: description.type\n            });\n        }\n        return this._peerConnection.setLocalDescription(description).catch(function (error) {\n            _this._log.warn(\"Calling setLocalDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed with the error \\\"\" + error.message + \"\\\".\");\n            var errorToThrow = new MediaClientLocalDescFailedError();\n            var publishWarning = {\n                message: \"Calling setLocalDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed\",\n                code: errorToThrow.code,\n                error: error\n            };\n            if (description.sdp) {\n                _this._log.warn(\"The SDP was \" + description.sdp);\n                publishWarning.sdp = description.sdp;\n            }\n            _this._publishMediaWarning(publishWarning);\n            throw errorToThrow;\n        }).then(function () {\n            if (description.type !== 'rollback') {\n                _this._localDescription = _this._isUnifiedPlan ? _this._addOrRewriteLocalTrackIds(description) : description;\n                // NOTE(mmalavalli): In order for this feature to be backward compatible with older\n                // SDK versions which to not support opus DTX, we append \"usedtx=1\" to the local SDP\n                // only while applying it. We will not send it over the wire to prevent inadvertent\n                // enabling of opus DTX in older SDKs. Newer SDKs will append \"usedtx=1\" by themselves\n                // if the developer has requested opus DTX to be enabled. (JSDK-3063)\n                if (_this._shouldApplyDtx) {\n                    _this._localDescription = new _this._RTCSessionDescription({\n                        sdp: enableDtxForOpus(_this._localDescription.sdp, []),\n                        type: _this._localDescription.type\n                    });\n                }\n                _this._localCandidates = [];\n                if (description.type === 'offer') {\n                    _this._descriptionRevision++;\n                }\n                else if (description.type === 'answer') {\n                    _this._lastStableDescriptionRevision = _this._descriptionRevision;\n                    negotiationCompleted(_this);\n                }\n                _this._localUfrag = getUfrag(description);\n                _this.emit('description', _this.getState());\n            }\n        });\n    };\n    /**\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._setRemoteDescription = function (description) {\n        var _this = this;\n        if (description.sdp) {\n            if (!this._isRTCRtpSenderParamsSupported) {\n                description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n            }\n            description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\n            if (this._shouldApplyDtx) {\n                description.sdp = enableDtxForOpus(description.sdp);\n            }\n            else {\n                // NOTE(mmalavalli): Remove \"usedtx=1\" from opus's fmtp line if present\n                // since DTX is disabled.\n                description.sdp = enableDtxForOpus(description.sdp, []);\n            }\n            if (isFirefox) {\n                // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n                // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n                // doesn't include any new MediaStreams in Firefox. Its `streams` member\n                // will always be the empty Array.\n                description.sdp = filterOutMediaStreamIds(description.sdp);\n            }\n            if (!this._peerConnection.remoteDescription) {\n                this._isIceLite = /a=ice-lite/.test(description.sdp);\n            }\n        }\n        description = new this._RTCSessionDescription(description);\n        // eslint-disable-next-line consistent-return\n        return Promise.resolve().then(function () {\n            // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n            // unset simulcast for sections in local offer where corresponding\n            // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n            if (description.type === 'answer' && _this._shouldApplySimulcast) {\n                var sdpWithoutSimulcastForNonVP8MediaSections = _this._revertSimulcastForNonVP8MediaSections(_this._localDescription.sdp, _this._localDescriptionWithoutSimulcast.sdp, description.sdp);\n                if (sdpWithoutSimulcastForNonVP8MediaSections !== _this._localDescription.sdp) {\n                    return _this._rollbackAndApplyOffer({\n                        type: _this._localDescription.type,\n                        sdp: sdpWithoutSimulcastForNonVP8MediaSections\n                    });\n                }\n            }\n        }).then(function () { return _this._peerConnection.setRemoteDescription(description); }).then(function () {\n            if (description.type === 'answer') {\n                if (_this._isRestartingIce) {\n                    _this._log.debug('An ICE restart was in-progress and is now completed');\n                    _this._isRestartingIce = false;\n                }\n                negotiationCompleted(_this);\n            }\n        }, function (error) {\n            _this._log.warn(\"Calling setRemoteDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed with the error \\\"\" + error.message + \"\\\".\");\n            if (description.sdp) {\n                _this._log.warn(\"The SDP was \" + description.sdp);\n            }\n            throw error;\n        });\n    };\n    /**\n     * Update the {@link PeerConnectionV2}'s description.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._updateDescription = function (description) {\n        var _this = this;\n        switch (description.type) {\n            case 'answer':\n            case 'pranswer':\n                if (description.revision !== this._descriptionRevision\n                    || this._peerConnection.signalingState !== 'have-local-offer') {\n                    return Promise.resolve();\n                }\n                this._descriptionRevision = description.revision;\n                break;\n            case 'close':\n                return this._close();\n            case 'create-offer':\n                if (description.revision <= this._lastStableDescriptionRevision) {\n                    return Promise.resolve();\n                }\n                else if (this._needsAnswer) {\n                    this._queuedDescription = description;\n                    return Promise.resolve();\n                }\n                this._descriptionRevision = description.revision;\n                return this._offer();\n            case 'offer':\n                if (description.revision <= this._lastStableDescriptionRevision\n                    || this._peerConnection.signalingState === 'closed') {\n                    return Promise.resolve();\n                }\n                if (this._peerConnection.signalingState === 'have-local-offer') {\n                    // NOTE(mpatwardhan): For a peer connection\n                    // 1) createOffer always generate SDP with `setup:actpass`\n                    // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n                    // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n                    // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n                    // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n                    // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n                    // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n                    if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n                        this._queuedDescription = description;\n                        return Promise.resolve();\n                    }\n                    this._descriptionRevision = description.revision;\n                    return this._handleGlare(description);\n                }\n                this._descriptionRevision = description.revision;\n                return this._answer(description).then(function () { });\n            default:\n            // Do nothing.\n        }\n        // Handle answer or pranswer.\n        var revision = description.revision;\n        return Promise.resolve().then(function () {\n            return _this._setRemoteDescription(description);\n        }).catch(function (error) {\n            var errorToThrow = new MediaClientRemoteDescFailedError();\n            _this._publishMediaWarning({\n                message: \"Calling setRemoteDescription with an RTCSessionDescription of type \\\"\" + description.type + \"\\\" failed\",\n                code: errorToThrow.code,\n                error: error,\n                sdp: description.sdp\n            });\n            throw errorToThrow;\n        }).then(function () {\n            _this._lastStableDescriptionRevision = revision;\n            _this._needsAnswer = false;\n            return _this._checkIceBox(description);\n        }).then(function () {\n            return _this._queuedDescription\n                && _this._updateDescription(_this._queuedDescription);\n        }).then(function () {\n            _this._queuedDescription = null;\n            return _this._maybeReoffer(_this._peerConnection.localDescription).then(function () { });\n        });\n    };\n    /**\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\n     * @private\n     * @param {object} iceState\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype._updateIce = function (iceState) {\n        var candidates = this._remoteCandidates.update(iceState);\n        return this._addIceCandidates(candidates);\n    };\n    /**\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype.addDataTrackSender = function (dataTrackSender) {\n        if (this._dataChannels.has(dataTrackSender)) {\n            return;\n        }\n        try {\n            var dataChannelDict = {\n                ordered: dataTrackSender.ordered\n            };\n            if (dataTrackSender.maxPacketLifeTime !== null) {\n                dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n            }\n            if (dataTrackSender.maxRetransmits !== null) {\n                dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n            }\n            var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n            dataTrackSender.addDataChannel(dataChannel);\n            this._dataChannels.set(dataTrackSender, dataChannel);\n        }\n        catch (error) {\n            this._log.warn(\"Error creating an RTCDataChannel for DataTrack \\\"\" + dataTrackSender.id + \"\\\": \" + error.message);\n        }\n    };\n    /**\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype.addMediaTrackSender = function (mediaTrackSender) {\n        if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n            return;\n        }\n        var sender;\n        if (this._localMediaStream) {\n            this._localMediaStream.addTrack(mediaTrackSender.track);\n            sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n        }\n        else {\n            var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n            sender = transceiver.sender;\n        }\n        mediaTrackSender.addSender(sender);\n        this._rtpSenders.set(mediaTrackSender, sender);\n    };\n    /**\n     * Close the {@link PeerConnectionV2}.\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype.close = function () {\n        if (this._close()) {\n            this._descriptionRevision++;\n            this._localDescription = { type: 'close' };\n            this.emit('description', this.getState());\n        }\n    };\n    /**\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n     * {@link PeerConnectionV2}.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n    PeerConnectionV2.prototype.getTrackReceivers = function () {\n        return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    };\n    /**\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n     * @returns {?object}\n     */\n    PeerConnectionV2.prototype.getState = function () {\n        if (!this._localDescription) {\n            return null;\n        }\n        // NOTE(mpatwardhan): Return most recent localDescription. If the most recent local description is an\n        // answer, and this method is called for sending a \"sync\" message while the next remote offer is being processed,\n        // we need to send the most recent stable description revision instead of the current description revision,\n        // which is supposed to be for the next local answer.\n        var localDescriptionRevision = this._localDescription.type === 'answer' ? this._lastStableDescriptionRevision : this._descriptionRevision;\n        var localDescription = {\n            type: this._localDescription.type,\n            revision: localDescriptionRevision\n        };\n        if (this._localDescription.sdp) {\n            localDescription.sdp = this._localDescription.sdp;\n        }\n        return {\n            description: localDescription,\n            id: this.id\n        };\n    };\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype.offer = function () {\n        var _this = this;\n        if (this._needsAnswer || this._isRestartingIce) {\n            this._shouldOffer = true;\n            return Promise.resolve();\n        }\n        return this.bracket('offering', function (key) {\n            _this.transition('updating', key);\n            var promise = _this._needsAnswer || _this._isRestartingIce ? Promise.resolve() : _this._offer();\n            return promise.then(function () {\n                _this.tryTransition('open', key);\n            }, function (error) {\n                _this.tryTransition('open', key);\n                throw error;\n            });\n        });\n    };\n    /**\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype.removeDataTrackSender = function (dataTrackSender) {\n        var dataChannel = this._dataChannels.get(dataTrackSender);\n        if (dataChannel) {\n            dataTrackSender.removeDataChannel(dataChannel);\n            this._dataChannels.delete(dataTrackSender);\n            dataChannel.close();\n        }\n    };\n    /**\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype.removeMediaTrackSender = function (mediaTrackSender) {\n        var sender = this._rtpSenders.get(mediaTrackSender);\n        if (!sender) {\n            return;\n        }\n        if (this._peerConnection.signalingState !== 'closed') {\n            this._peerConnection.removeTrack(sender);\n        }\n        if (this._localMediaStream) {\n            this._localMediaStream.removeTrack(mediaTrackSender.track);\n        }\n        mediaTrackSender.removeSender(sender);\n        this._rtpSenders.delete(mediaTrackSender);\n    };\n    /**\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\n     * @param {RTCConfiguration} configuration\n     * @returns {void}\n     */\n    PeerConnectionV2.prototype.setConfiguration = function (configuration) {\n        if (typeof this._peerConnection.setConfiguration === 'function') {\n            this._peerConnection.setConfiguration(getConfiguration(configuration));\n        }\n    };\n    /**\n     * Set the ICE reconnect timeout period.\n     * @param {number} period - Period in milliseconds.\n     * @returns {this}\n     */\n    PeerConnectionV2.prototype.setIceReconnectTimeout = function (period) {\n        this._iceReconnectTimeout.setDelay(period);\n        this._log.debug('Updated ICE reconnection timeout period:', this._iceReconnectTimeout.delay);\n        return this;\n    };\n    /**\n     * Update the {@link PeerConnectionV2}.\n     * @param {object} peerConnectionState\n     * @returns {Promise<void>}\n     */\n    PeerConnectionV2.prototype.update = function (peerConnectionState) {\n        var _this = this;\n        return this.bracket('updating', function (key) {\n            if (_this.state === 'closed') {\n                return Promise.resolve();\n            }\n            _this.transition('updating', key);\n            var updates = [];\n            if (peerConnectionState.ice) {\n                updates.push(_this._updateIce(peerConnectionState.ice));\n            }\n            if (peerConnectionState.description) {\n                updates.push(_this._updateDescription(peerConnectionState.description));\n            }\n            return Promise.all(updates).then(function () {\n                _this.tryTransition('open', key);\n            }, function (error) {\n                _this.tryTransition('open', key);\n                throw error;\n            });\n        });\n    };\n    /**\n     * Get the {@link PeerConnectionV2}'s media statistics.\n     * @returns {Promise<StandardizedStatsResponse>}\n     */\n    PeerConnectionV2.prototype.getStats = function () {\n        var _this = this;\n        return getStatistics(this._peerConnection).then(function (response) { return rewriteTrackIds(_this, response); });\n    };\n    return PeerConnectionV2;\n}(StateMachine));\nfunction rewriteLocalTrackId(pcv2, stats) {\n    var trackId = pcv2._getMediaTrackSenderId(stats.trackId);\n    return Object.assign(stats, { trackId: trackId });\n}\nfunction rewriteTrackId(pcv2, stats) {\n    var receiver = __spreadArray([], __read(pcv2._mediaTrackReceivers)).find(function (receiver) { return receiver.track.id === stats.trackId; });\n    var trackId = receiver ? receiver.id : null;\n    return Object.assign(stats, { trackId: trackId });\n}\nfunction rewriteTrackIds(pcv2, response) {\n    return Object.assign(response, {\n        remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) { return rewriteTrackId(pcv2, stats); }),\n        remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) { return rewriteTrackId(pcv2, stats); }),\n        localAudioTrackStats: response.localAudioTrackStats.map(function (stats) { return rewriteLocalTrackId(pcv2, stats); }),\n        localVideoTrackStats: response.localVideoTrackStats.map(function (stats) { return rewriteLocalTrackId(pcv2, stats); }),\n    });\n}\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n/**\n * @event PeerConnectionV2#connectionStateChanged\n */\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\nfunction getUfrag(description) {\n    if (description.sdp) {\n        var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n        if (match) {\n            return match[1];\n        }\n    }\n    return null;\n}\nfunction getConfiguration(configuration) {\n    return Object.assign({\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n    }, configuration);\n}\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRtpSender} sender\n * @return {boolean}\n */\nfunction isSenderOfKind(kind, sender) {\n    var track = sender.track;\n    return track && track.kind === kind && track.readyState !== 'ended';\n}\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\nfunction filterOutMediaStreamIds(sdp) {\n    return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n/**\n * Whether an RTCRtpTransceiver can be recycled.\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean}\n */\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n    return !transceiver.stopped\n        && !pcv2._replaceTrackPromises.has(transceiver)\n        && ['inactive', 'recvonly'].includes(transceiver.direction);\n}\n/**\n * Take a recycled RTCRtpTransceiver if available.\n * @param {PeerConnectionV2} pcv2\n * @param {Track.Kind} kind\n * @returns {?RTCRtpTransceiver}\n */\nfunction takeRecycledTransceiver(pcv2, kind) {\n    var preferredCodecs = {\n        audio: pcv2._preferredAudioCodecs.map(function (_a) {\n            var codec = _a.codec;\n            return codec.toLowerCase();\n        }),\n        video: pcv2._preferredVideoCodecs.map(function (_a) {\n            var codec = _a.codec;\n            return codec.toLowerCase();\n        })\n    }[kind];\n    var recycledTransceivers = pcv2._recycledTransceivers[kind];\n    var localCodec = preferredCodecs.find(function (codec) { return pcv2._localCodecs.has(codec); });\n    if (!localCodec) {\n        return recycledTransceivers.shift();\n    }\n    var transceiver = recycledTransceivers.find(function (transceiver) {\n        var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n        return remoteCodecMap && remoteCodecMap.has(localCodec);\n    });\n    if (transceiver) {\n        recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n    }\n    return transceiver;\n}\n/**\n * Update the set of locally supported {@link Codec}s.\n * @param pcv2\n * @returns {void}\n */\nfunction updateLocalCodecs(pcv2) {\n    var description = pcv2._peerConnection.localDescription;\n    if (!description) {\n        return;\n    }\n    getMediaSections(description.sdp).forEach(function (section) {\n        var codecMap = createCodecMapForMediaSection(section);\n        codecMap.forEach(function (pts, codec) { return pcv2._localCodecs.add(codec); });\n    });\n}\n/**\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction updateRemoteCodecMaps(pcv2) {\n    var description = pcv2._peerConnection.remoteDescription;\n    if (!description) {\n        return;\n    }\n    getMediaSections(description.sdp).forEach(function (section) {\n        var mid = section.match(/^a=mid:(.+)$/m)[1];\n        var codecMap = createCodecMapForMediaSection(section);\n        pcv2._remoteCodecMaps.set(mid, codecMap);\n    });\n}\n/**\n * Update the list of recycled RTCRtpTransceivers.\n * @param {PeerConnectionV2} pcv2\n */\nfunction updateRecycledTransceivers(pcv2) {\n    pcv2._recycledTransceivers.audio = [];\n    pcv2._recycledTransceivers.video = [];\n    pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n        if (shouldRecycleTransceiver(transceiver, pcv2)) {\n            var track = transceiver.receiver.track;\n            pcv2._recycledTransceivers[track.kind].push(transceiver);\n        }\n    });\n}\n/**\n * Perform certain updates after an SDP negotiation is completed.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction negotiationCompleted(pcv2) {\n    if (pcv2._isUnifiedPlan) {\n        updateRecycledTransceivers(pcv2);\n        updateLocalCodecs(pcv2);\n        updateRemoteCodecMaps(pcv2);\n    }\n    if (pcv2._isRTCRtpSenderParamsSupported) {\n        updateEncodingParameters(pcv2);\n    }\n}\n/**\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction updateEncodingParameters(pcv2) {\n    var _a = pcv2._encodingParameters, maxAudioBitrate = _a.maxAudioBitrate, maxVideoBitrate = _a.maxVideoBitrate;\n    var maxBitrates = new Map([\n        ['audio', maxAudioBitrate],\n        ['video', maxVideoBitrate]\n    ]);\n    pcv2._peerConnection.getSenders().filter(function (sender) { return sender.track; }).forEach(function (sender) {\n        var maxBitrate = maxBitrates.get(sender.track.kind);\n        var params = sender.getParameters();\n        if (maxBitrate === null || maxBitrate === 0) {\n            removeMaxBitrate(params);\n        }\n        else if (pcv2._isChromeScreenShareTrack(sender.track)) {\n            // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n            // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n            pcv2._log.warn(\"Not setting maxBitrate for \" + sender.track.kind + \" Track \" + sender.track.id + \" because it appears to be screen share track: \" + sender.track.label);\n        }\n        else {\n            setMaxBitrate(params, maxBitrate);\n        }\n        if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n            // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n            // a per-encoding-layer property. So, we set the value only on the first\n            // encoding layer. Any attempt to set the value on subsequent encoding\n            // layers (in the case of simulcast) will result in the Promise returned\n            // by RTCRtpSender.setParameters() being rejected.\n            params.encodings[0].networkPriority = 'high';\n        }\n        if (isSafari && sender.track.kind === 'video') {\n            var _a = sender.track.getSettings(), width = _a.width, height = _a.height;\n            pcv2._updateEncodings(width, height, params.encodings);\n        }\n        sender.setParameters(params).catch(function (error) {\n            pcv2._log.warn(\"Error while setting encodings parameters for \" + sender.track.kind + \" Track \" + sender.track.id + \": \" + (error.message || error.name));\n        });\n    });\n}\n/**\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @returns {void}\n */\nfunction removeMaxBitrate(params) {\n    if (Array.isArray(params.encodings)) {\n        params.encodings.forEach(function (encoding) { return delete encoding.maxBitrate; });\n    }\n}\n/**\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @param {number} maxBitrate\n * @returns {void}\n */\nfunction setMaxBitrate(params, maxBitrate) {\n    if (isFirefox) {\n        params.encodings = [{ maxBitrate: maxBitrate }];\n    }\n    else {\n        params.encodings.forEach(function (encoding) {\n            encoding.maxBitrate = maxBitrate;\n        });\n    }\n}\nmodule.exports = PeerConnectionV2;\n//# sourceMappingURL=peerconnection.js.map"]},"metadata":{},"sourceType":"script"}