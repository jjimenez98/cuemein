{"ast":null,"code":"/* globals webkitAudioContext, AudioContext */\n'use strict';\n\nvar NativeAudioContext = typeof AudioContext !== 'undefined' ? AudioContext : typeof webkitAudioContext !== 'undefined' ? webkitAudioContext : null;\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\n\nvar AudioContextFactory = function () {\n  /**\n   * @param {AudioContextFactoryOptions} [options]\n   */\n  function AudioContextFactory(options) {\n    options = Object.assign({\n      AudioContext: NativeAudioContext\n    }, options);\n    Object.defineProperties(this, {\n      _AudioContext: {\n        value: options.AudioContext\n      },\n      _audioContext: {\n        value: null,\n        writable: true\n      },\n      _holders: {\n        value: new Set()\n      },\n      AudioContextFactory: {\n        enumerable: true,\n        value: AudioContextFactory\n      }\n    });\n  }\n  /**\n   * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n   * call to {@link AudioContextFactory#release}. Calling this increments an\n   * internal reference count.\n   * @param {*} holder - The object to hold a reference to the AudioContext\n   * @returns {?AudioContext}\n   */\n\n\n  AudioContextFactory.prototype.getOrCreate = function (holder) {\n    if (!this._holders.has(holder)) {\n      this._holders.add(holder);\n\n      if (this._AudioContext && !this._audioContext) {\n        try {\n          this._audioContext = new this._AudioContext();\n        } catch (error) {// Do nothing;\n        }\n      }\n    }\n\n    return this._audioContext;\n  };\n  /**\n   * Decrement the internal reference count. If it reaches zero, close and destroy\n   * the AudioContext.\n   * @param {*} holder - The object that held a reference to the AudioContext\n   * @returns {void}\n   */\n\n\n  AudioContextFactory.prototype.release = function (holder) {\n    if (this._holders.has(holder)) {\n      this._holders.delete(holder);\n\n      if (!this._holders.size && this._audioContext) {\n        this._audioContext.close();\n\n        this._audioContext = null;\n      }\n    }\n  };\n\n  return AudioContextFactory;\n}();\n\nmodule.exports = new AudioContextFactory();","map":{"version":3,"sources":["../../lib/webaudio/audiocontext.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,IAAM,kBAAkB,GAAG,OAAO,YAAP,KAAwB,WAAxB,GACvB,YADuB,GAEvB,OAAO,kBAAP,KAA8B,WAA9B,GACE,kBADF,GAEE,IAJN;AAMA;;;AAGG;;AAEH;;;;;AAKG;;AACH,IAAA,mBAAA,GAAA,YAAA;AACE;;AAEG;AACH,WAAA,mBAAA,CAAY,OAAZ,EAAmB;AACjB,IAAA,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc;AACtB,MAAA,YAAY,EAAE;AADQ,KAAd,EAEP,OAFO,CAAV;AAGA,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE,OAAO,CAAC;AADF,OADa;AAI5B,MAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE,IADM;AAEb,QAAA,QAAQ,EAAE;AAFG,OAJa;AAQ5B,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAE,IAAI,GAAJ;AADC,OARkB;AAW5B,MAAA,mBAAmB,EAAE;AACnB,QAAA,UAAU,EAAE,IADO;AAEnB,QAAA,KAAK,EAAE;AAFY;AAXO,KAA9B;AAgBD;AAED;;;;;;AAMG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,MAAZ,EAAkB;AAChB,QAAI,CAAC,KAAK,QAAL,CAAc,GAAd,CAAkB,MAAlB,CAAL,EAAgC;AAC9B,WAAK,QAAL,CAAc,GAAd,CAAkB,MAAlB;;AACA,UAAI,KAAK,aAAL,IAAsB,CAAC,KAAK,aAAhC,EAA+C;AAC7C,YAAI;AACF,eAAK,aAAL,GAAqB,IAAI,KAAK,aAAT,EAArB;AACD,SAFD,CAEE,OAAO,KAAP,EAAc,CACd;AACD;AACF;AACF;;AACD,WAAO,KAAK,aAAZ;AACD,GAZD;AAcA;;;;;AAKG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAAc;AACZ,QAAI,KAAK,QAAL,CAAc,GAAd,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,WAAK,QAAL,CAAc,MAAd,CAAqB,MAArB;;AACA,UAAI,CAAC,KAAK,QAAL,CAAc,IAAf,IAAuB,KAAK,aAAhC,EAA+C;AAC7C,aAAK,aAAL,CAAmB,KAAnB;;AACA,aAAK,aAAL,GAAqB,IAArB;AACD;AACF;AACF,GARD;;AASF,SAAA,mBAAA;AAAC,CA9DD,EAAA;;AAgEA,MAAM,CAAC,OAAP,GAAiB,IAAI,mBAAJ,EAAjB","sourceRoot":"","sourcesContent":["/* globals webkitAudioContext, AudioContext */\n'use strict';\nvar NativeAudioContext = typeof AudioContext !== 'undefined'\n    ? AudioContext\n    : typeof webkitAudioContext !== 'undefined'\n        ? webkitAudioContext\n        : null;\n/**\n * @interface AudioContextFactoryOptions\n * @property {AudioContext} [AudioContext] - The AudioContext constructor\n */\n/**\n * {@link AudioContextFactory} ensures we construct at most one AudioContext\n * at a time, and that it is eventually closed when we no longer need it.\n * @property {AudioContextFactory} AudioContextFactory - The\n *   {@link AudioContextFactory} constructor\n */\nvar AudioContextFactory = /** @class */ (function () {\n    /**\n     * @param {AudioContextFactoryOptions} [options]\n     */\n    function AudioContextFactory(options) {\n        options = Object.assign({\n            AudioContext: NativeAudioContext\n        }, options);\n        Object.defineProperties(this, {\n            _AudioContext: {\n                value: options.AudioContext\n            },\n            _audioContext: {\n                value: null,\n                writable: true\n            },\n            _holders: {\n                value: new Set()\n            },\n            AudioContextFactory: {\n                enumerable: true,\n                value: AudioContextFactory\n            }\n        });\n    }\n    /**\n     * Each call to {@link AudioContextFactory#getOrCreate} should be paired with a\n     * call to {@link AudioContextFactory#release}. Calling this increments an\n     * internal reference count.\n     * @param {*} holder - The object to hold a reference to the AudioContext\n     * @returns {?AudioContext}\n     */\n    AudioContextFactory.prototype.getOrCreate = function (holder) {\n        if (!this._holders.has(holder)) {\n            this._holders.add(holder);\n            if (this._AudioContext && !this._audioContext) {\n                try {\n                    this._audioContext = new this._AudioContext();\n                }\n                catch (error) {\n                    // Do nothing;\n                }\n            }\n        }\n        return this._audioContext;\n    };\n    /**\n     * Decrement the internal reference count. If it reaches zero, close and destroy\n     * the AudioContext.\n     * @param {*} holder - The object that held a reference to the AudioContext\n     * @returns {void}\n     */\n    AudioContextFactory.prototype.release = function (holder) {\n        if (this._holders.has(holder)) {\n            this._holders.delete(holder);\n            if (!this._holders.size && this._audioContext) {\n                this._audioContext.close();\n                this._audioContext = null;\n            }\n        }\n    };\n    return AudioContextFactory;\n}());\nmodule.exports = new AudioContextFactory();\n//# sourceMappingURL=audiocontext.js.map"]},"metadata":{},"sourceType":"script"}