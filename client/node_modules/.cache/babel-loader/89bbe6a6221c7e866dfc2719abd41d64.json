{"ast":null,"code":"'use strict';\n\nvar _a = require('../../util/constants'),\n    ICE_ACTIVITY_CHECK_PERIOD_MS = _a.ICE_ACTIVITY_CHECK_PERIOD_MS,\n    ICE_INACTIVITY_THRESHOLD_MS = _a.ICE_INACTIVITY_THRESHOLD_MS;\n/**\n * Monitors a {@link RTCPeerConnection}'s stats and notifies\n * caller when inactivity is detected.\n */\n\n\nvar IceConnectionMonitor = function () {\n  /**\n   * Construct an {@link IceConnectionMonitor}.\n   * @param {RTCPeerConnection} peerConnection\n   * @param {object} [options]\n   */\n  function IceConnectionMonitor(peerConnection, options) {\n    options = Object.assign({\n      activityCheckPeriodMs: ICE_ACTIVITY_CHECK_PERIOD_MS,\n      inactivityThresholdMs: ICE_INACTIVITY_THRESHOLD_MS\n    }, options);\n    Object.defineProperties(this, {\n      _activityCheckPeriodMs: {\n        value: options.activityCheckPeriodMs\n      },\n      _inactivityThresholdMs: {\n        value: options.inactivityThresholdMs\n      },\n      _lastActivity: {\n        value: null,\n        writable: true\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _timer: {\n        value: null,\n        writable: true\n      },\n      _onIceConnectionStateChanged: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  IceConnectionMonitor.prototype._getActivePairStat = function (stats) {\n    var statsArray = Array.from(stats.values());\n    var hasInBoundTracks = statsArray.find(function (stat) {\n      return stat.type === 'inbound-rtp';\n    });\n\n    if (!hasInBoundTracks) {\n      // NOTE(mpatwardhan): when there are no tracks shared on a peerConnection\n      // we may see inactivity on bytesReceived - but that is not real inactivity,\n      // ignore it.\n      return null;\n    }\n\n    var activePairStats = statsArray.find(function (stat) {\n      return stat.type === 'candidate-pair' && stat.nominated;\n    }); // NOTE(mpatwardhan): sometimes (JSDK-2667) after getting disconnected while switching network\n    // we may not find active pair. Treat this as 0 bytesReceived so that we count it towards inactivity.\n\n    return activePairStats || {\n      bytesReceived: 0,\n      timestamp: Math.round(new Date().getTime())\n    };\n  };\n  /**\n   * Get ICE connection stats, and extract received and send bytes.\n   * @returns Promise<?RTCIceCandidatePairStats>\n   */\n\n\n  IceConnectionMonitor.prototype._getIceConnectionStats = function () {\n    var _this = this;\n\n    return this._peerConnection.getStats().then(function (stats) {\n      return _this._getActivePairStat(stats);\n    }).catch(function () {\n      return null;\n    });\n  };\n  /**\n   * schedules/un-schedules inactivity callback.\n   */\n\n\n  IceConnectionMonitor.prototype._scheduleInactivityCallback = function (callback) {\n    var _this = this;\n\n    if (callback && this._onIceConnectionStateChanged === null) {\n      // schedule callback\n      this._onIceConnectionStateChanged = function () {\n        if (_this._peerConnection.iceConnectionState === 'disconnected') {\n          // eslint-disable-next-line callback-return\n          callback();\n        }\n      };\n\n      this._peerConnection.addEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n    } else if (!callback && this._onIceConnectionStateChanged) {\n      // unschedule callback\n      this._peerConnection.removeEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n\n      this._onIceConnectionStateChanged = null;\n    }\n  };\n  /**\n   * Start monitoring the ICE connection.\n   * Monitors bytes received on active ice connection pair,\n   * invokes onIceConnectionInactive when inactivity is detected.\n   * @param {function} onIceConnectionInactive\n   */\n\n\n  IceConnectionMonitor.prototype.start = function (onIceConnectionInactive) {\n    var _this = this;\n\n    this.stop();\n    this._timer = setInterval(function () {\n      _this._getIceConnectionStats().then(function (iceStats) {\n        if (!iceStats) {\n          return;\n        }\n\n        if (!_this._lastActivity || _this._lastActivity.bytesReceived !== iceStats.bytesReceived) {\n          _this._lastActivity = iceStats; // detected activity, cancel scheduled callback if any.\n\n          _this._scheduleInactivityCallback(null);\n        }\n\n        if (iceStats.timestamp - _this._lastActivity.timestamp >= _this._inactivityThresholdMs) {\n          // detected inactivity.\n          if (_this._peerConnection.iceConnectionState === 'disconnected') {\n            onIceConnectionInactive();\n          } else if (_this._onIceConnectionStateChanged === null) {\n            _this._scheduleInactivityCallback(onIceConnectionInactive);\n          }\n        }\n      });\n    }, this._activityCheckPeriodMs);\n  };\n  /**\n   * Stop monitoring the ICE connection state.\n   * @returns {void}\n   */\n\n\n  IceConnectionMonitor.prototype.stop = function () {\n    this._scheduleInactivityCallback(null);\n\n    if (this._timer !== null) {\n      clearInterval(this._timer);\n      this._timer = null;\n      this._lastActivity = null;\n    }\n  };\n\n  return IceConnectionMonitor;\n}();\n\nmodule.exports = IceConnectionMonitor;","map":{"version":3,"sources":["../../../lib/signaling/v2/iceconnectionmonitor.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar _a = require('../../util/constants'), ICE_ACTIVITY_CHECK_PERIOD_MS = _a.ICE_ACTIVITY_CHECK_PERIOD_MS, ICE_INACTIVITY_THRESHOLD_MS = _a.ICE_INACTIVITY_THRESHOLD_MS;\n/**\n * Monitors a {@link RTCPeerConnection}'s stats and notifies\n * caller when inactivity is detected.\n */\nvar IceConnectionMonitor = /** @class */ (function () {\n    /**\n     * Construct an {@link IceConnectionMonitor}.\n     * @param {RTCPeerConnection} peerConnection\n     * @param {object} [options]\n     */\n    function IceConnectionMonitor(peerConnection, options) {\n        options = Object.assign({\n            activityCheckPeriodMs: ICE_ACTIVITY_CHECK_PERIOD_MS,\n            inactivityThresholdMs: ICE_INACTIVITY_THRESHOLD_MS,\n        }, options);\n        Object.defineProperties(this, {\n            _activityCheckPeriodMs: {\n                value: options.activityCheckPeriodMs\n            },\n            _inactivityThresholdMs: {\n                value: options.inactivityThresholdMs\n            },\n            _lastActivity: {\n                value: null,\n                writable: true\n            },\n            _peerConnection: {\n                value: peerConnection\n            },\n            _timer: {\n                value: null,\n                writable: true,\n            },\n            _onIceConnectionStateChanged: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    IceConnectionMonitor.prototype._getActivePairStat = function (stats) {\n        var statsArray = Array.from(stats.values());\n        var hasInBoundTracks = statsArray.find(function (stat) { return stat.type === 'inbound-rtp'; });\n        if (!hasInBoundTracks) {\n            // NOTE(mpatwardhan): when there are no tracks shared on a peerConnection\n            // we may see inactivity on bytesReceived - but that is not real inactivity,\n            // ignore it.\n            return null;\n        }\n        var activePairStats = statsArray.find(function (stat) { return stat.type === 'candidate-pair' && stat.nominated; });\n        // NOTE(mpatwardhan): sometimes (JSDK-2667) after getting disconnected while switching network\n        // we may not find active pair. Treat this as 0 bytesReceived so that we count it towards inactivity.\n        return activePairStats || {\n            bytesReceived: 0,\n            timestamp: Math.round((new Date()).getTime())\n        };\n    };\n    /**\n     * Get ICE connection stats, and extract received and send bytes.\n     * @returns Promise<?RTCIceCandidatePairStats>\n     */\n    IceConnectionMonitor.prototype._getIceConnectionStats = function () {\n        var _this = this;\n        return this._peerConnection.getStats().then(function (stats) { return _this._getActivePairStat(stats); }).catch(function () {\n            return null;\n        });\n    };\n    /**\n     * schedules/un-schedules inactivity callback.\n     */\n    IceConnectionMonitor.prototype._scheduleInactivityCallback = function (callback) {\n        var _this = this;\n        if (callback && this._onIceConnectionStateChanged === null) {\n            // schedule callback\n            this._onIceConnectionStateChanged = function () {\n                if (_this._peerConnection.iceConnectionState === 'disconnected') {\n                    // eslint-disable-next-line callback-return\n                    callback();\n                }\n            };\n            this._peerConnection.addEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n        }\n        else if (!callback && this._onIceConnectionStateChanged) {\n            // unschedule callback\n            this._peerConnection.removeEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n            this._onIceConnectionStateChanged = null;\n        }\n    };\n    /**\n     * Start monitoring the ICE connection.\n     * Monitors bytes received on active ice connection pair,\n     * invokes onIceConnectionInactive when inactivity is detected.\n     * @param {function} onIceConnectionInactive\n     */\n    IceConnectionMonitor.prototype.start = function (onIceConnectionInactive) {\n        var _this = this;\n        this.stop();\n        this._timer = setInterval(function () {\n            _this._getIceConnectionStats().then(function (iceStats) {\n                if (!iceStats) {\n                    return;\n                }\n                if (!_this._lastActivity || _this._lastActivity.bytesReceived !== iceStats.bytesReceived) {\n                    _this._lastActivity = iceStats;\n                    // detected activity, cancel scheduled callback if any.\n                    _this._scheduleInactivityCallback(null);\n                }\n                if (iceStats.timestamp - _this._lastActivity.timestamp >= _this._inactivityThresholdMs) {\n                    // detected inactivity.\n                    if (_this._peerConnection.iceConnectionState === 'disconnected') {\n                        onIceConnectionInactive();\n                    }\n                    else if (_this._onIceConnectionStateChanged === null) {\n                        _this._scheduleInactivityCallback(onIceConnectionInactive);\n                    }\n                }\n            });\n        }, this._activityCheckPeriodMs);\n    };\n    /**\n     * Stop monitoring the ICE connection state.\n     * @returns {void}\n     */\n    IceConnectionMonitor.prototype.stop = function () {\n        this._scheduleInactivityCallback(null);\n        if (this._timer !== null) {\n            clearInterval(this._timer);\n            this._timer = null;\n            this._lastActivity = null;\n        }\n    };\n    return IceConnectionMonitor;\n}());\nmodule.exports = IceConnectionMonitor;\n//# sourceMappingURL=iceconnectionmonitor.js.map"]},"metadata":{},"sourceType":"script"}