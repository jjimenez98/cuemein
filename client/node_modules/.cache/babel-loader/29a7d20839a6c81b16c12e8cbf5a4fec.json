{"ast":null,"code":"/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n\n/* istanbul ignore file */\n\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function noop() {};\n\nvar undefinedType = \"undefined\";\nvar isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"]; // Cross-browser bind equivalent that works at least back to IE6\n\nfunction bindMethod(obj, methodName) {\n  var method = obj[methodName];\n\n  if (typeof method.bind === 'function') {\n    return method.bind(obj);\n  } else {\n    try {\n      return Function.prototype.bind.call(method, obj);\n    } catch (e) {\n      // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n      return function () {\n        return Function.prototype.apply.apply(method, [obj, arguments]);\n      };\n    }\n  }\n} // Trace() doesn't print the message in IE, so for that case we need to wrap it\n\n\nfunction traceForIE() {\n  if (console.log) {\n    if (console.log.apply) {\n      console.log.apply(console, arguments);\n    } else {\n      // In old IE, native console methods themselves don't have apply().\n      Function.prototype.apply.apply(console.log, [console, arguments]);\n    }\n  }\n\n  if (console.trace) console.trace();\n} // Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\n\n\nfunction realMethod(methodName) {\n  if (methodName === 'debug') {\n    methodName = 'log';\n  }\n\n  if (typeof console === undefinedType) {\n    return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n  } else if (methodName === 'trace' && isIE) {\n    return traceForIE;\n  } else if (console[methodName] !== undefined) {\n    return bindMethod(console, methodName);\n  } else if (console.log !== undefined) {\n    return bindMethod(console, 'log');\n  } else {\n    return noop;\n  }\n} // These private functions always need `this` to be set properly\n\n\nfunction replaceLoggingMethods(level, loggerName) {\n  /*jshint validthis:true */\n  for (var i = 0; i < logMethods.length; i++) {\n    var methodName = logMethods[i];\n    this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n  } // Define log.log as an alias for log.debug\n\n\n  this.log = this.debug;\n} // In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\n\n\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n  return function () {\n    if (typeof console !== undefinedType) {\n      replaceLoggingMethods.call(this, level, loggerName);\n      this[methodName].apply(this, arguments);\n    }\n  };\n} // By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\n\n\nfunction defaultMethodFactory(methodName, level, loggerName) {\n  /*jshint validthis:true */\n  return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\n\nfunction Logger(name, defaultLevel, factory) {\n  var self = this;\n  var currentLevel;\n  var storageKey = \"loglevel\";\n\n  if (typeof name === \"string\") {\n    storageKey += \":\" + name;\n  } else if (typeof name === \"symbol\") {\n    storageKey = undefined;\n  }\n\n  function persistLevelIfPossible(levelNum) {\n    var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n    if (typeof window === undefinedType || !storageKey) return; // Use localStorage if available\n\n    try {\n      window.localStorage[storageKey] = levelName;\n      return;\n    } catch (ignore) {} // Use session cookie as fallback\n\n\n    try {\n      window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n    } catch (ignore) {}\n  }\n\n  function getPersistedLevel() {\n    var storedLevel;\n    if (typeof window === undefinedType || !storageKey) return;\n\n    try {\n      storedLevel = window.localStorage[storageKey];\n    } catch (ignore) {} // Fallback to cookies if local storage gives us nothing\n\n\n    if (typeof storedLevel === undefinedType) {\n      try {\n        var cookie = window.document.cookie;\n        var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n\n        if (location !== -1) {\n          storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n        }\n      } catch (ignore) {}\n    } // If the stored level is not valid, treat it as if nothing was stored.\n\n\n    if (self.levels[storedLevel] === undefined) {\n      storedLevel = undefined;\n    }\n\n    return storedLevel;\n  }\n  /*\n   *\n   * Public logger API - see https://github.com/pimterry/loglevel for details\n   *\n   */\n\n\n  self.name = name;\n  self.levels = {\n    \"TRACE\": 0,\n    \"DEBUG\": 1,\n    \"INFO\": 2,\n    \"WARN\": 3,\n    \"ERROR\": 4,\n    \"SILENT\": 5\n  };\n  self.methodFactory = factory || defaultMethodFactory;\n\n  self.getLevel = function () {\n    return currentLevel;\n  };\n\n  self.setLevel = function (level, persist) {\n    if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n      level = self.levels[level.toUpperCase()];\n    }\n\n    if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n      currentLevel = level;\n\n      if (persist !== false) {\n        // defaults to true\n        persistLevelIfPossible(level);\n      }\n\n      replaceLoggingMethods.call(self, level, name);\n\n      if (typeof console === undefinedType && level < self.levels.SILENT) {\n        return \"No console available for logging\";\n      }\n    } else {\n      throw \"log.setLevel() called with invalid level: \" + level;\n    }\n  };\n\n  self.setDefaultLevel = function (level) {\n    if (!getPersistedLevel()) {\n      self.setLevel(level, false);\n    }\n  };\n\n  self.enableAll = function (persist) {\n    self.setLevel(self.levels.TRACE, persist);\n  };\n\n  self.disableAll = function (persist) {\n    self.setLevel(self.levels.SILENT, persist);\n  }; // Initialize with the right level\n\n\n  var initialLevel = getPersistedLevel();\n\n  if (initialLevel == null) {\n    initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n  }\n\n  self.setLevel(initialLevel, false);\n}\n/*\n *\n * Top-level API\n *\n */\n\n\nvar defaultLogger = new Logger();\nvar _loggersByName = {};\n\ndefaultLogger.getLogger = function getLogger(name) {\n  if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n    throw new TypeError(\"You must supply a name when creating a logger.\");\n  }\n\n  var logger = _loggersByName[name];\n\n  if (!logger) {\n    logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n  }\n\n  return logger;\n}; // Grab the current global log variable in case of overwrite\n\n\nvar _log = typeof window !== undefinedType ? window.log : undefined;\n\ndefaultLogger.noConflict = function () {\n  if (typeof window !== undefinedType && window.log === defaultLogger) {\n    window.log = _log;\n  }\n\n  return defaultLogger;\n};\n\ndefaultLogger.getLoggers = function getLoggers() {\n  return _loggersByName;\n}; // ES6 default export, for compatibility\n\n\ndefaultLogger['default'] = defaultLogger;\nmodule.exports = defaultLogger;","map":{"version":3,"sources":["../../lib/vendor/loglevel.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n/* istanbul ignore file */\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function () { };\nvar undefinedType = \"undefined\";\nvar isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (/Trident\\/|MSIE /.test(window.navigator.userAgent));\nvar logMethods = [\n    \"trace\",\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\"\n];\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(obj, methodName) {\n    var method = obj[methodName];\n    if (typeof method.bind === 'function') {\n        return method.bind(obj);\n    }\n    else {\n        try {\n            return Function.prototype.bind.call(method, obj);\n        }\n        catch (e) {\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n            return function () {\n                return Function.prototype.apply.apply(method, [obj, arguments]);\n            };\n        }\n    }\n}\n// Trace() doesn't print the message in IE, so for that case we need to wrap it\nfunction traceForIE() {\n    if (console.log) {\n        if (console.log.apply) {\n            console.log.apply(console, arguments);\n        }\n        else {\n            // In old IE, native console methods themselves don't have apply().\n            Function.prototype.apply.apply(console.log, [console, arguments]);\n        }\n    }\n    if (console.trace)\n        console.trace();\n}\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(methodName) {\n    if (methodName === 'debug') {\n        methodName = 'log';\n    }\n    if (typeof console === undefinedType) {\n        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n    }\n    else if (methodName === 'trace' && isIE) {\n        return traceForIE;\n    }\n    else if (console[methodName] !== undefined) {\n        return bindMethod(console, methodName);\n    }\n    else if (console.log !== undefined) {\n        return bindMethod(console, 'log');\n    }\n    else {\n        return noop;\n    }\n}\n// These private functions always need `this` to be set properly\nfunction replaceLoggingMethods(level, loggerName) {\n    /*jshint validthis:true */\n    for (var i = 0; i < logMethods.length; i++) {\n        var methodName = logMethods[i];\n        this[methodName] = (i < level) ?\n            noop :\n            this.methodFactory(methodName, level, loggerName);\n    }\n    // Define log.log as an alias for log.debug\n    this.log = this.debug;\n}\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n    return function () {\n        if (typeof console !== undefinedType) {\n            replaceLoggingMethods.call(this, level, loggerName);\n            this[methodName].apply(this, arguments);\n        }\n    };\n}\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(methodName, level, loggerName) {\n    /*jshint validthis:true */\n    return realMethod(methodName) ||\n        enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\nfunction Logger(name, defaultLevel, factory) {\n    var self = this;\n    var currentLevel;\n    var storageKey = \"loglevel\";\n    if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n    }\n    else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n    }\n    function persistLevelIfPossible(levelNum) {\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n        if (typeof window === undefinedType || !storageKey)\n            return;\n        // Use localStorage if available\n        try {\n            window.localStorage[storageKey] = levelName;\n            return;\n        }\n        catch (ignore) { }\n        // Use session cookie as fallback\n        try {\n            window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n        }\n        catch (ignore) { }\n    }\n    function getPersistedLevel() {\n        var storedLevel;\n        if (typeof window === undefinedType || !storageKey)\n            return;\n        try {\n            storedLevel = window.localStorage[storageKey];\n        }\n        catch (ignore) { }\n        // Fallback to cookies if local storage gives us nothing\n        if (typeof storedLevel === undefinedType) {\n            try {\n                var cookie = window.document.cookie;\n                var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n                if (location !== -1) {\n                    storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                }\n            }\n            catch (ignore) { }\n        }\n        // If the stored level is not valid, treat it as if nothing was stored.\n        if (self.levels[storedLevel] === undefined) {\n            storedLevel = undefined;\n        }\n        return storedLevel;\n    }\n    /*\n     *\n     * Public logger API - see https://github.com/pimterry/loglevel for details\n     *\n     */\n    self.name = name;\n    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n        \"ERROR\": 4, \"SILENT\": 5 };\n    self.methodFactory = factory || defaultMethodFactory;\n    self.getLevel = function () {\n        return currentLevel;\n    };\n    self.setLevel = function (level, persist) {\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n            level = self.levels[level.toUpperCase()];\n        }\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n            currentLevel = level;\n            if (persist !== false) { // defaults to true\n                persistLevelIfPossible(level);\n            }\n            replaceLoggingMethods.call(self, level, name);\n            if (typeof console === undefinedType && level < self.levels.SILENT) {\n                return \"No console available for logging\";\n            }\n        }\n        else {\n            throw \"log.setLevel() called with invalid level: \" + level;\n        }\n    };\n    self.setDefaultLevel = function (level) {\n        if (!getPersistedLevel()) {\n            self.setLevel(level, false);\n        }\n    };\n    self.enableAll = function (persist) {\n        self.setLevel(self.levels.TRACE, persist);\n    };\n    self.disableAll = function (persist) {\n        self.setLevel(self.levels.SILENT, persist);\n    };\n    // Initialize with the right level\n    var initialLevel = getPersistedLevel();\n    if (initialLevel == null) {\n        initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n    }\n    self.setLevel(initialLevel, false);\n}\n/*\n *\n * Top-level API\n *\n */\nvar defaultLogger = new Logger();\nvar _loggersByName = {};\ndefaultLogger.getLogger = function getLogger(name) {\n    if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n        throw new TypeError(\"You must supply a name when creating a logger.\");\n    }\n    var logger = _loggersByName[name];\n    if (!logger) {\n        logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n    }\n    return logger;\n};\n// Grab the current global log variable in case of overwrite\nvar _log = (typeof window !== undefinedType) ? window.log : undefined;\ndefaultLogger.noConflict = function () {\n    if (typeof window !== undefinedType &&\n        window.log === defaultLogger) {\n        window.log = _log;\n    }\n    return defaultLogger;\n};\ndefaultLogger.getLoggers = function getLoggers() {\n    return _loggersByName;\n};\n// ES6 default export, for compatibility\ndefaultLogger['default'] = defaultLogger;\nmodule.exports = defaultLogger;\n//# sourceMappingURL=loglevel.js.map"]},"metadata":{},"sourceType":"script"}