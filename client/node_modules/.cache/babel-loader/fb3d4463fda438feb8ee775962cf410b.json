{"ast":null,"code":"/* eslint new-cap:0 */\n'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar defaultGetLogger = require('../vendor/loglevel').getLogger;\n\nvar constants = require('./constants');\n\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = constants.DEFAULT_LOGGER_NAME;\n\nvar E = require('./constants').typeErrors;\n\nvar deprecationWarningsByComponentConstructor;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n\n  var deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n/**\n * Selectively outputs messages to console based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\n\n\nvar Log = function () {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   * @param {String} loggerName - Name of the logger instance. Used when calling getLogger from loglevel module\n   * @param {Function} [getLogger] - optional method used internally.\n   */\n  function Log(moduleName, component, logLevels, loggerName, getLogger) {\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if (typeof logLevels !== 'object') {\n      logLevels = {};\n    }\n\n    getLogger = getLogger || defaultGetLogger;\n    validateLogLevels(logLevels);\n    /* istanbul ignore next */\n\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      _loggerName: {\n        get: function get() {\n          var name = loggerName && typeof loggerName === 'string' ? loggerName : DEFAULT_LOGGER_NAME;\n\n          if (!this._logLevelsEqual) {\n            name = name + \"-\" + moduleName;\n          }\n\n          return name;\n        }\n      },\n      _logger: {\n        get: function get() {\n          var logger = getLogger(this._loggerName);\n          var level = this._logLevels[moduleName] || DEFAULT_LOG_LEVEL; // There is no 'off' in the logger module. It uses 'silent' instead\n\n          level = level === 'off' ? 'silent' : level;\n          logger.setDefaultLevel(level);\n          return logger;\n        }\n      },\n      _logLevelsEqual: {\n        get: function get() {\n          // True if all levels are the same\n          return new Set(Object.values(this._logLevels)).size === 1;\n        }\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: {\n        get: component.toString.bind(component)\n      }\n    });\n  }\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n\n\n  Log.getLevelByName = function (name) {\n    if (!isNaN(name)) {\n      return parseInt(name, 10);\n    }\n\n    name = name.toUpperCase();\n    validateLogLevel(name);\n    return Log[name];\n  };\n  /**\n   * Create a child {@link Log} instance with this._logLevels\n   * @param moduleName - Name of the logging module\n   * @param component - Component owning this instance of {@link Log}\n   * @returns {Log} this\n   */\n\n\n  Log.prototype.createLog = function (moduleName, component) {\n    var name = this._loggerName; // Grab the original logger name\n\n    if (!this._logLevelsEqual) {\n      name = name.substring(0, name.lastIndexOf('-'));\n    }\n\n    return new Log(moduleName, component, this._logLevels, name);\n  };\n  /**\n   * Set new log levels.\n   * This changes the levels for all its ancestors,\n   * siblings, and children and descendants instances of {@link Log}.\n   * @param {LogLevels} levels - New log levels\n   * @throws {TwilioError} INVALID_ARGUMENT\n   * @returns {Log} this\n   */\n\n\n  Log.prototype.setLevels = function (levels) {\n    validateLogLevels(levels);\n    Object.assign(this._logLevels, levels);\n    return this;\n  };\n  /**\n   * Log a message using the logger method appropriate for the specified logLevel\n   * @param {Number} logLevel - Log level of the message being logged\n   * @param {Array} messages - Message(s) to log\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.log = function (logLevel, messages) {\n    var name = Log._levels[logLevel]; // eslint-disable-next-line no-use-before-define\n\n    if (!name) {\n      throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n    }\n\n    name = name.toLowerCase();\n    var prefix = [new Date().toISOString(), name, this.name];\n    (this._logger[name] || function noop() {}).apply(void 0, __spreadArray([], __read(prefix.concat(messages))));\n    return this;\n  };\n  /**\n   * Log a debug message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.debug = function () {\n    return this.log(Log.DEBUG, [].slice.call(arguments));\n  };\n  /**\n   * Log a deprecation warning. Deprecation warnings are logged as warnings and\n   * they are only ever logged once.\n   * @param {String} deprecationWarning - The deprecation warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.deprecated = function (deprecationWarning) {\n    var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n\n    if (deprecationWarnings.has(deprecationWarning)) {\n      return this;\n    }\n\n    deprecationWarnings.add(deprecationWarning);\n    return this.warn(deprecationWarning);\n  };\n  /**\n   * Log an info message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.info = function () {\n    return this.log(Log.INFO, [].slice.call(arguments));\n  };\n  /**\n   * Log a warn message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.warn = function () {\n    return this.log(Log.WARN, [].slice.call(arguments));\n  };\n  /**\n   * Log a warning once.\n   * @param {String} warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.warnOnce = function (warning) {\n    if (this._warnings.has(warning)) {\n      return this;\n    }\n\n    this._warnings.add(warning);\n\n    return this.warn(warning);\n  };\n  /**\n   * Log an error message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n\n\n  Log.prototype.error = function () {\n    return this.log(Log.ERROR, [].slice.call(arguments));\n  };\n  /**\n   * Log an error message and throw an exception\n   * @param {TwilioError} error - Error to throw\n   * @param {String} customMessage - Custom message for the error\n   * @public\n   */\n\n\n  Log.prototype.throw = function (error, customMessage) {\n    if (error.clone) {\n      error = error.clone(customMessage);\n    }\n\n    this.log(Log.ERROR, error);\n    throw error;\n  };\n\n  return Log;\n}(); // Singleton Constants\n\n/* eslint key-spacing:0 */\n\n/* istanbul ignore next */\n\n\nObject.defineProperties(Log, {\n  DEBUG: {\n    value: 0\n  },\n  INFO: {\n    value: 1\n  },\n  WARN: {\n    value: 2\n  },\n  ERROR: {\n    value: 3\n  },\n  OFF: {\n    value: 4\n  },\n  _levels: {\n    value: ['DEBUG', 'INFO', 'WARN', 'ERROR', 'OFF']\n  }\n});\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\n\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n  LOG_LEVELS_SET[level] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(function (moduleName) {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;","map":{"version":3,"sources":["../../lib/util/log.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint new-cap:0 */\n'use strict';\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar defaultGetLogger = require('../vendor/loglevel').getLogger;\nvar constants = require('./constants');\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME = constants.DEFAULT_LOGGER_NAME;\nvar E = require('./constants').typeErrors;\nvar deprecationWarningsByComponentConstructor;\nfunction getDeprecationWarnings(componentConstructor) {\n    deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n    if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n        return deprecationWarningsByComponentConstructor.get(componentConstructor);\n    }\n    var deprecationWarnings = new Set();\n    deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n    return deprecationWarnings;\n}\n/**\n * Selectively outputs messages to console based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\nvar Log = /** @class */ (function () {\n    /**\n     * Construct a new {@link Log} object.\n     * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n     * @param {object} component - Component owning this instance of {@link Log}\n     * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n     * @param {String} loggerName - Name of the logger instance. Used when calling getLogger from loglevel module\n     * @param {Function} [getLogger] - optional method used internally.\n     */\n    function Log(moduleName, component, logLevels, loggerName, getLogger) {\n        if (typeof moduleName !== 'string') {\n            throw E.INVALID_TYPE('moduleName', 'string');\n        }\n        if (!component) {\n            throw E.REQUIRED_ARGUMENT('component');\n        }\n        if (typeof logLevels !== 'object') {\n            logLevels = {};\n        }\n        getLogger = getLogger || defaultGetLogger;\n        validateLogLevels(logLevels);\n        /* istanbul ignore next */\n        Object.defineProperties(this, {\n            _component: {\n                value: component\n            },\n            _logLevels: {\n                value: logLevels\n            },\n            _warnings: {\n                value: new Set()\n            },\n            _loggerName: {\n                get: function get() {\n                    var name = loggerName && typeof loggerName === 'string' ? loggerName : DEFAULT_LOGGER_NAME;\n                    if (!this._logLevelsEqual) {\n                        name = name + \"-\" + moduleName;\n                    }\n                    return name;\n                }\n            },\n            _logger: {\n                get: function get() {\n                    var logger = getLogger(this._loggerName);\n                    var level = this._logLevels[moduleName] || DEFAULT_LOG_LEVEL;\n                    // There is no 'off' in the logger module. It uses 'silent' instead\n                    level = level === 'off' ? 'silent' : level;\n                    logger.setDefaultLevel(level);\n                    return logger;\n                }\n            },\n            _logLevelsEqual: {\n                get: function get() {\n                    // True if all levels are the same\n                    return (new Set(Object.values(this._logLevels)).size) === 1;\n                }\n            },\n            logLevel: {\n                get: function get() {\n                    return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n                }\n            },\n            name: { get: component.toString.bind(component) }\n        });\n    }\n    /**\n     * Get the log level (number) by its name (string)\n     * @param {String} name - Name of the log level\n     * @returns {Number} Requested log level\n     * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n     * @public\n     */\n    Log.getLevelByName = function (name) {\n        if (!isNaN(name)) {\n            return parseInt(name, 10);\n        }\n        name = name.toUpperCase();\n        validateLogLevel(name);\n        return Log[name];\n    };\n    /**\n     * Create a child {@link Log} instance with this._logLevels\n     * @param moduleName - Name of the logging module\n     * @param component - Component owning this instance of {@link Log}\n     * @returns {Log} this\n     */\n    Log.prototype.createLog = function (moduleName, component) {\n        var name = this._loggerName;\n        // Grab the original logger name\n        if (!this._logLevelsEqual) {\n            name = name.substring(0, name.lastIndexOf('-'));\n        }\n        return new Log(moduleName, component, this._logLevels, name);\n    };\n    /**\n     * Set new log levels.\n     * This changes the levels for all its ancestors,\n     * siblings, and children and descendants instances of {@link Log}.\n     * @param {LogLevels} levels - New log levels\n     * @throws {TwilioError} INVALID_ARGUMENT\n     * @returns {Log} this\n     */\n    Log.prototype.setLevels = function (levels) {\n        validateLogLevels(levels);\n        Object.assign(this._logLevels, levels);\n        return this;\n    };\n    /**\n     * Log a message using the logger method appropriate for the specified logLevel\n     * @param {Number} logLevel - Log level of the message being logged\n     * @param {Array} messages - Message(s) to log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.log = function (logLevel, messages) {\n        var name = Log._levels[logLevel];\n        // eslint-disable-next-line no-use-before-define\n        if (!name) {\n            throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n        }\n        name = name.toLowerCase();\n        var prefix = [new Date().toISOString(), name, this.name];\n        (this._logger[name] || function noop() { }).apply(void 0, __spreadArray([], __read(prefix.concat(messages))));\n        return this;\n    };\n    /**\n     * Log a debug message\n     * @param {...String} messages - Message(s) to pass to the logger\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.debug = function () {\n        return this.log(Log.DEBUG, [].slice.call(arguments));\n    };\n    /**\n     * Log a deprecation warning. Deprecation warnings are logged as warnings and\n     * they are only ever logged once.\n     * @param {String} deprecationWarning - The deprecation warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.deprecated = function (deprecationWarning) {\n        var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n        if (deprecationWarnings.has(deprecationWarning)) {\n            return this;\n        }\n        deprecationWarnings.add(deprecationWarning);\n        return this.warn(deprecationWarning);\n    };\n    /**\n     * Log an info message\n     * @param {...String} messages - Message(s) to pass to the logger\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.info = function () {\n        return this.log(Log.INFO, [].slice.call(arguments));\n    };\n    /**\n     * Log a warn message\n     * @param {...String} messages - Message(s) to pass to the logger\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.warn = function () {\n        return this.log(Log.WARN, [].slice.call(arguments));\n    };\n    /**\n     * Log a warning once.\n     * @param {String} warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.warnOnce = function (warning) {\n        if (this._warnings.has(warning)) {\n            return this;\n        }\n        this._warnings.add(warning);\n        return this.warn(warning);\n    };\n    /**\n     * Log an error message\n     * @param {...String} messages - Message(s) to pass to the logger\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n    Log.prototype.error = function () {\n        return this.log(Log.ERROR, [].slice.call(arguments));\n    };\n    /**\n     * Log an error message and throw an exception\n     * @param {TwilioError} error - Error to throw\n     * @param {String} customMessage - Custom message for the error\n     * @public\n     */\n    Log.prototype.throw = function (error, customMessage) {\n        if (error.clone) {\n            error = error.clone(customMessage);\n        }\n        this.log(Log.ERROR, error);\n        throw error;\n    };\n    return Log;\n}());\n// Singleton Constants\n/* eslint key-spacing:0 */\n/* istanbul ignore next */\nObject.defineProperties(Log, {\n    DEBUG: { value: 0 },\n    INFO: { value: 1 },\n    WARN: { value: 2 },\n    ERROR: { value: 3 },\n    OFF: { value: 4 },\n    _levels: {\n        value: [\n            'DEBUG',\n            'INFO',\n            'WARN',\n            'ERROR',\n            'OFF',\n        ]\n    }\n});\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n    LOG_LEVELS_SET[level] = true;\n    LOG_LEVEL_VALUES.push(i);\n    return level;\n});\nfunction validateLogLevel(level) {\n    if (!(level in LOG_LEVELS_SET)) {\n        throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n    }\n}\nfunction validateLogLevels(levels) {\n    Object.keys(levels).forEach(function (moduleName) {\n        validateLogLevel(levels[moduleName].toUpperCase());\n    });\n}\nmodule.exports = Log;\n//# sourceMappingURL=log.js.map"]},"metadata":{},"sourceType":"script"}