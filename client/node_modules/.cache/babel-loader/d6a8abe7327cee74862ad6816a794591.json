{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\n\n\nvar LocalMediaRestartDeferreds = function () {\n  /**\n   * Constructor.\n   */\n  function LocalMediaRestartDeferreds() {\n    Object.defineProperties(this, {\n      _audio: {\n        value: defer(),\n        writable: true\n      },\n      _video: {\n        value: defer(),\n        writable: true\n      }\n    }); // Initially, resolve both the Deferreds.\n\n    this._audio.resolve();\n\n    this._video.resolve();\n  }\n  /**\n   * Resolve the Deferred for audio or video.\n   * @param {'audio'|'video'} kind\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.resolveDeferred = function (kind) {\n    if (kind === 'audio') {\n      this._audio.resolve();\n    } else {\n      this._video.resolve();\n    }\n  };\n  /**\n   * Start the Deferred for audio or video.\n   * @param {'audio' | 'video'} kind\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.startDeferred = function (kind) {\n    if (kind === 'audio') {\n      this._audio = defer();\n    } else {\n      this._video = defer();\n    }\n  };\n  /**\n   * Wait until the Deferred for audio or video is resolved.\n   * @param {'audio'|'video'} kind\n   * @returns {Promise<void>}\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.whenResolved = function (kind) {\n    return kind === 'audio' ? this._audio.promise : this._video.promise;\n  };\n\n  return LocalMediaRestartDeferreds;\n}();\n\nmodule.exports = new LocalMediaRestartDeferreds();","map":{"version":3,"sources":["../../lib/util/localmediarestartdeferreds.js"],"names":[],"mappings":"AAAA;;AAEQ,IAAA,KAAK,GAAK,OAAO,CAAC,IAAD,CAAP,CAAL,KAAL;AAER;;;AAGG;;;AACH,IAAA,0BAAA,GAAA,YAAA;AACE;;AAEG;AACH,WAAA,0BAAA,GAAA;AACE,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,MAAM,EAAE;AACN,QAAA,KAAK,EAAE,KAAK,EADN;AAEN,QAAA,QAAQ,EAAE;AAFJ,OADoB;AAK5B,MAAA,MAAM,EAAE;AACN,QAAA,KAAK,EAAE,KAAK,EADN;AAEN,QAAA,QAAQ,EAAE;AAFJ;AALoB,KAA9B,EADF,CAYE;;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,SAAK,MAAL,CAAY,OAAZ;AACD;AAED;;;AAGG;;;AACH,EAAA,0BAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,IAAhB,EAAoB;AAClB,QAAI,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAK,MAAL,CAAY,OAAZ;AACD,KAFD,MAEO;AACL,WAAK,MAAL,CAAY,OAAZ;AACD;AACF,GAND;AAQA;;;AAGG;;;AACH,EAAA,0BAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAAkB;AAChB,QAAI,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAK,MAAL,GAAc,KAAK,EAAnB;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc,KAAK,EAAnB;AACD;AACF,GAND;AAQA;;;;AAIG;;;AACH,EAAA,0BAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAAiB;AACf,WAAO,IAAI,KAAK,OAAT,GAAmB,KAAK,MAAL,CAAY,OAA/B,GAAyC,KAAK,MAAL,CAAY,OAA5D;AACD,GAFD;;AAGF,SAAA,0BAAA;AAAC,CArDD,EAAA;;AAuDA,MAAM,CAAC,OAAP,GAAiB,IAAI,0BAAJ,EAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar defer = require('./').defer;\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\nvar LocalMediaRestartDeferreds = /** @class */ (function () {\n    /**\n     * Constructor.\n     */\n    function LocalMediaRestartDeferreds() {\n        Object.defineProperties(this, {\n            _audio: {\n                value: defer(),\n                writable: true\n            },\n            _video: {\n                value: defer(),\n                writable: true\n            }\n        });\n        // Initially, resolve both the Deferreds.\n        this._audio.resolve();\n        this._video.resolve();\n    }\n    /**\n     * Resolve the Deferred for audio or video.\n     * @param {'audio'|'video'} kind\n     */\n    LocalMediaRestartDeferreds.prototype.resolveDeferred = function (kind) {\n        if (kind === 'audio') {\n            this._audio.resolve();\n        }\n        else {\n            this._video.resolve();\n        }\n    };\n    /**\n     * Start the Deferred for audio or video.\n     * @param {'audio' | 'video'} kind\n     */\n    LocalMediaRestartDeferreds.prototype.startDeferred = function (kind) {\n        if (kind === 'audio') {\n            this._audio = defer();\n        }\n        else {\n            this._video = defer();\n        }\n    };\n    /**\n     * Wait until the Deferred for audio or video is resolved.\n     * @param {'audio'|'video'} kind\n     * @returns {Promise<void>}\n     */\n    LocalMediaRestartDeferreds.prototype.whenResolved = function (kind) {\n        return kind === 'audio' ? this._audio.promise : this._video.promise;\n    };\n    return LocalMediaRestartDeferreds;\n}());\nmodule.exports = new LocalMediaRestartDeferreds();\n//# sourceMappingURL=localmediarestartdeferreds.js.map"]},"metadata":{},"sourceType":"script"}