{"ast":null,"code":"'use strict';\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\n\nvar MovingAverageDelta = function () {\n  /**\n   * Constructor.\n   */\n  function MovingAverageDelta() {\n    Object.defineProperties(this, {\n      _samples: {\n        value: [{\n          denominator: 0,\n          numerator: 0\n        }, {\n          denominator: 0,\n          numerator: 0\n        }]\n      }\n    });\n  }\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n\n\n  MovingAverageDelta.prototype.get = function () {\n    var samples = this._samples;\n    var denominatorDelta = samples[1].denominator - samples[0].denominator || Infinity;\n    var numeratorDelta = samples[1].numerator - samples[0].numerator;\n    return numeratorDelta / denominatorDelta;\n  };\n  /**\n   * Put a sample and get rid of the older sample to maintain sample size of 2.\n   * @param numerator\n   * @param denominator\n   */\n\n\n  MovingAverageDelta.prototype.putSample = function (numerator, denominator) {\n    var samples = this._samples;\n    samples.shift();\n    samples.push({\n      denominator: denominator,\n      numerator: numerator\n    });\n  };\n\n  return MovingAverageDelta;\n}();\n\nmodule.exports = MovingAverageDelta;","map":{"version":3,"sources":["../../lib/util/movingaveragedelta.js"],"names":[],"mappings":"AAAA;AAEA;;;;;;AAMG;;AACH,IAAA,kBAAA,GAAA,YAAA;AACE;;AAEG;AACH,WAAA,kBAAA,GAAA;AACE,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAE,CACL;AAAE,UAAA,WAAW,EAAE,CAAf;AAAkB,UAAA,SAAS,EAAE;AAA7B,SADK,EAEL;AAAE,UAAA,WAAW,EAAE,CAAf;AAAkB,UAAA,SAAS,EAAE;AAA7B,SAFK;AADC;AADkB,KAA9B;AAQD;AAED;;;AAGG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,YAAA;AACU,QAAU,OAAO,GAAK,KAAL,QAAjB;AACR,QAAM,gBAAgB,GAAI,OAAO,CAAC,CAAD,CAAP,CAAW,WAAX,GAAyB,OAAO,CAAC,CAAD,CAAP,CAAW,WAArC,IAAqD,QAA9E;AACA,QAAM,cAAc,GAAG,OAAO,CAAC,CAAD,CAAP,CAAW,SAAX,GAAuB,OAAO,CAAC,CAAD,CAAP,CAAW,SAAzD;AACA,WAAO,cAAc,GAAG,gBAAxB;AACD,GALD;AAOA;;;;AAIG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,SAAV,EAAqB,WAArB,EAAgC;AACtB,QAAU,OAAO,GAAK,KAAL,QAAjB;AACR,IAAA,OAAO,CAAC,KAAR;AACA,IAAA,OAAO,CAAC,IAAR,CAAa;AAAE,MAAA,WAAW,EAAA,WAAb;AAAe,MAAA,SAAS,EAAA;AAAxB,KAAb;AACD,GAJD;;AAKF,SAAA,kBAAA;AAAC,CApCD,EAAA;;AAsCA,MAAM,CAAC,OAAP,GAAiB,kBAAjB","sourceRoot":"","sourcesContent":["'use strict';\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\nvar MovingAverageDelta = /** @class */ (function () {\n    /**\n     * Constructor.\n     */\n    function MovingAverageDelta() {\n        Object.defineProperties(this, {\n            _samples: {\n                value: [\n                    { denominator: 0, numerator: 0 },\n                    { denominator: 0, numerator: 0 }\n                ],\n            }\n        });\n    }\n    /**\n     * Get the moving average delta.\n     * @returns {number}\n     */\n    MovingAverageDelta.prototype.get = function () {\n        var samples = this._samples;\n        var denominatorDelta = (samples[1].denominator - samples[0].denominator) || Infinity;\n        var numeratorDelta = samples[1].numerator - samples[0].numerator;\n        return numeratorDelta / denominatorDelta;\n    };\n    /**\n     * Put a sample and get rid of the older sample to maintain sample size of 2.\n     * @param numerator\n     * @param denominator\n     */\n    MovingAverageDelta.prototype.putSample = function (numerator, denominator) {\n        var samples = this._samples;\n        samples.shift();\n        samples.push({ denominator: denominator, numerator: numerator });\n    };\n    return MovingAverageDelta;\n}());\nmodule.exports = MovingAverageDelta;\n//# sourceMappingURL=movingaveragedelta.js.map"]},"metadata":{},"sourceType":"script"}