{"ast":null,"code":"'use strict';\n\nvar LocalAudioTrackStats = require('./localaudiotrackstats');\n\nvar LocalVideoTrackStats = require('./localvideotrackstats');\n\nvar RemoteAudioTrackStats = require('./remoteaudiotrackstats');\n\nvar RemoteVideoTrackStats = require('./remotevideotrackstats');\n/**\n * Statistics report for an RTCPeerConnection.\n * @property {string} peerConnectionId - ID of the RTCPeerConnection\n * @property {Array<LocalAudioTrackStats>} localAudioTrackStats - List of {@link LocalAudioTrackStats}\n * @property {Array<LocalVideoTrackStats>} localVideoTrackStats - List of {@link LocalVideoTrackStats}\n * @property {Array<RemoteAudioTrackStats>} remoteAudioTrackStats - List of {@link RemoteAudioTrackStats}\n * @property {Array<RemoteVideoTrackStats>} remoteVideoTrackStats - List of {@link RemoteVideoTrackStats}\n */\n\n\nvar StatsReport = function () {\n  /**\n   * @param {string} peerConnectionId - RTCPeerConnection ID\n   * @param {StandardizedStatsResponse} statsResponse\n   * @param {boolean} prepareForInsights - if report is being prepared to send to insights.\n   */\n  function StatsReport(peerConnectionId, statsResponse, prepareForInsights) {\n    if (typeof peerConnectionId !== 'string') {\n      throw new Error('RTCPeerConnection id must be a string');\n    }\n\n    Object.defineProperties(this, {\n      peerConnectionId: {\n        value: peerConnectionId,\n        enumerable: true\n      },\n      localAudioTrackStats: {\n        value: statsResponse.localAudioTrackStats.map(function (report) {\n          return new LocalAudioTrackStats(report.trackId, report, prepareForInsights);\n        }),\n        enumerable: true\n      },\n      localVideoTrackStats: {\n        value: statsResponse.localVideoTrackStats.map(function (report) {\n          return new LocalVideoTrackStats(report.trackId, report, prepareForInsights);\n        }),\n        enumerable: true\n      },\n      remoteAudioTrackStats: {\n        value: statsResponse.remoteAudioTrackStats.map(function (report) {\n          return new RemoteAudioTrackStats(report.trackId, report);\n        }),\n        enumerable: true\n      },\n      remoteVideoTrackStats: {\n        value: statsResponse.remoteVideoTrackStats.map(function (report) {\n          return new RemoteVideoTrackStats(report.trackId, report);\n        }),\n        enumerable: true\n      }\n    });\n  }\n\n  return StatsReport;\n}();\n\nmodule.exports = StatsReport;","map":{"version":3,"sources":["../../lib/stats/statsreport.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,oBAAoB,GAAG,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAM,oBAAoB,GAAG,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAD,CAArC;;AACA,IAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAD,CAArC;AAEA;;;;;;;AAOG;;;AACH,IAAA,WAAA,GAAA,YAAA;AACE;;;;AAIG;AACH,WAAA,WAAA,CAAY,gBAAZ,EAA8B,aAA9B,EAA6C,kBAA7C,EAA+D;AAC7D,QAAI,OAAO,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,YAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,gBAAgB,EAAE;AAChB,QAAA,KAAK,EAAE,gBADS;AAEhB,QAAA,UAAU,EAAE;AAFI,OADU;AAK5B,MAAA,oBAAoB,EAAE;AACpB,QAAA,KAAK,EAAE,aAAa,CAAC,oBAAd,CAAmC,GAAnC,CAAuC,UAAA,MAAA,EAAM;AAAI,iBAAA,IAAI,oBAAJ,CAAyB,MAAM,CAAC,OAAhC,EAAyC,MAAzC,EAAA,kBAAA,CAAA;AAAoE,SAArH,CADa;AAEpB,QAAA,UAAU,EAAE;AAFQ,OALM;AAS5B,MAAA,oBAAoB,EAAE;AACpB,QAAA,KAAK,EAAE,aAAa,CAAC,oBAAd,CAAmC,GAAnC,CAAuC,UAAA,MAAA,EAAM;AAAI,iBAAA,IAAI,oBAAJ,CAAyB,MAAM,CAAC,OAAhC,EAAyC,MAAzC,EAAA,kBAAA,CAAA;AAAoE,SAArH,CADa;AAEpB,QAAA,UAAU,EAAE;AAFQ,OATM;AAa5B,MAAA,qBAAqB,EAAE;AACrB,QAAA,KAAK,EAAE,aAAa,CAAC,qBAAd,CAAoC,GAApC,CAAwC,UAAA,MAAA,EAAM;AAAI,iBAAA,IAAI,qBAAJ,CAA0B,MAAM,CAAC,OAAjC,EAAA,MAAA,CAAA;AAAiD,SAAnG,CADc;AAErB,QAAA,UAAU,EAAE;AAFS,OAbK;AAiB5B,MAAA,qBAAqB,EAAE;AACrB,QAAA,KAAK,EAAE,aAAa,CAAC,qBAAd,CAAoC,GAApC,CAAwC,UAAA,MAAA,EAAM;AAAI,iBAAA,IAAI,qBAAJ,CAA0B,MAAM,CAAC,OAAjC,EAAA,MAAA,CAAA;AAAiD,SAAnG,CADc;AAErB,QAAA,UAAU,EAAE;AAFS;AAjBK,KAA9B;AAsBD;;AACH,SAAA,WAAA;AAAC,CAlCD,EAAA;;AAoCA,MAAM,CAAC,OAAP,GAAiB,WAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar LocalAudioTrackStats = require('./localaudiotrackstats');\nvar LocalVideoTrackStats = require('./localvideotrackstats');\nvar RemoteAudioTrackStats = require('./remoteaudiotrackstats');\nvar RemoteVideoTrackStats = require('./remotevideotrackstats');\n/**\n * Statistics report for an RTCPeerConnection.\n * @property {string} peerConnectionId - ID of the RTCPeerConnection\n * @property {Array<LocalAudioTrackStats>} localAudioTrackStats - List of {@link LocalAudioTrackStats}\n * @property {Array<LocalVideoTrackStats>} localVideoTrackStats - List of {@link LocalVideoTrackStats}\n * @property {Array<RemoteAudioTrackStats>} remoteAudioTrackStats - List of {@link RemoteAudioTrackStats}\n * @property {Array<RemoteVideoTrackStats>} remoteVideoTrackStats - List of {@link RemoteVideoTrackStats}\n */\nvar StatsReport = /** @class */ (function () {\n    /**\n     * @param {string} peerConnectionId - RTCPeerConnection ID\n     * @param {StandardizedStatsResponse} statsResponse\n     * @param {boolean} prepareForInsights - if report is being prepared to send to insights.\n     */\n    function StatsReport(peerConnectionId, statsResponse, prepareForInsights) {\n        if (typeof peerConnectionId !== 'string') {\n            throw new Error('RTCPeerConnection id must be a string');\n        }\n        Object.defineProperties(this, {\n            peerConnectionId: {\n                value: peerConnectionId,\n                enumerable: true\n            },\n            localAudioTrackStats: {\n                value: statsResponse.localAudioTrackStats.map(function (report) { return new LocalAudioTrackStats(report.trackId, report, prepareForInsights); }),\n                enumerable: true\n            },\n            localVideoTrackStats: {\n                value: statsResponse.localVideoTrackStats.map(function (report) { return new LocalVideoTrackStats(report.trackId, report, prepareForInsights); }),\n                enumerable: true\n            },\n            remoteAudioTrackStats: {\n                value: statsResponse.remoteAudioTrackStats.map(function (report) { return new RemoteAudioTrackStats(report.trackId, report); }),\n                enumerable: true\n            },\n            remoteVideoTrackStats: {\n                value: statsResponse.remoteVideoTrackStats.map(function (report) { return new RemoteVideoTrackStats(report.trackId, report); }),\n                enumerable: true\n            }\n        });\n    }\n    return StatsReport;\n}());\nmodule.exports = StatsReport;\n//# sourceMappingURL=statsreport.js.map"]},"metadata":{},"sourceType":"script"}