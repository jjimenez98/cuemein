{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar guessBrowser = require('@twilio/webrtc/lib/util').guessBrowser;\n\nvar IceReportFactory = require('./icereportfactory');\n\nvar PeerConnectionReport = require('./peerconnectionreport');\n\nvar ReceiverReportFactory = require('./receiverreportfactory');\n\nvar SenderReportFactory = require('./senderreportfactory');\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\n\n\nvar PeerConnectionReportFactory = function () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n\n\n  PeerConnectionReportFactory.prototype.next = function () {\n    var _this = this;\n\n    var updatePromise = guessBrowser() === 'firefox' ? updateFirefox(this) : updateChrome(this);\n    return updatePromise.then(function () {\n      var audioSenderReportFactories = __spreadArray([], __read(_this.audio.send.values()));\n\n      var videoSenderReportFactories = __spreadArray([], __read(_this.video.send.values()));\n\n      var audioReceiverReportFactories = __spreadArray([], __read(_this.audio.recv.values()));\n\n      var videoReceiverReportFactories = __spreadArray([], __read(_this.video.recv.values()));\n\n      var report = new PeerConnectionReport(_this.ice.lastReport, {\n        send: audioSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: audioReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      }, {\n        send: videoSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: videoReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      });\n      _this.lastReport = report;\n      return report;\n    });\n  };\n\n  return PeerConnectionReportFactory;\n}();\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\n\n\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      var e_1, _a;\n\n      try {\n        // NOTE(mroberts): We have to rewrite Ids due to this bug:\n        //\n        //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n        //\n        for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var stats = _c.value;\n\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + \"-\" + stats.id;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\n\n/**\n* @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n* @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n* @param {RTCStatsReport} report\n* @param {RTCStats} stats\n* @param {TrackId} [trackId]\n* @returns {?ReceiverReportFactory}\n*/\n\n\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n\n  return null;\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\n\n\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.send,\n    video: factory.video.send\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\n\n\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.recv,\n    video: factory.video.recv\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\n\n\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\n\n\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\n\n\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\n\n\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\n\n\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_2, _a;\n\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (guessBrowser() !== 'firefox' && !stats.trackId) {\n          continue;\n        }\n\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\n\n\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_3, _a;\n\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\n\n\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop_1 = function _loop_1(mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop_1(mediaType);\n  }\n}\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\n\n\nfunction updateIceReport(ice, report) {\n  var e_4, _a, e_5, _b;\n\n  var selectedCandidatePair;\n\n  try {\n    for (var _c = __values(report.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var stats = _d.value;\n\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n\n  try {\n    for (var _e = __values(report.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var stats = _f.value;\n\n      if (stats.type === 'candidate-pair' && stats.nominated && ('selected' in stats ? stats.selected : true)) {\n        ice.next(stats);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\n\n\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_a) {\n    var _b = __read(_a, 3),\n        senderReports = _b[0],\n        receiverReports = _b[1],\n        pcReport = _b[2];\n\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\n\n\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;","map":{"version":3,"sources":["../../lib/stats/peerconnectionreportfactory.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar guessBrowser = require('@twilio/webrtc/lib/util').guessBrowser;\nvar IceReportFactory = require('./icereportfactory');\nvar PeerConnectionReport = require('./peerconnectionreport');\nvar ReceiverReportFactory = require('./receiverreportfactory');\nvar SenderReportFactory = require('./senderreportfactory');\n/**\n * @typedef {string} TrackId\n */\n/**\n * @typedef {string} StatsId\n */\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\nvar PeerConnectionReportFactory = /** @class */ (function () {\n    /**\n     * Construct a {@link PeerConnectionReportFactory}.\n     * @param {RTCPeerConnection} pc\n     */\n    function PeerConnectionReportFactory(pc) {\n        Object.defineProperties(this, {\n            pc: {\n                enumerable: true,\n                value: pc\n            },\n            ice: {\n                enumerable: true,\n                value: new IceReportFactory()\n            },\n            audio: {\n                enumerable: true,\n                value: {\n                    send: new Map(),\n                    recv: new Map()\n                }\n            },\n            video: {\n                enumerable: true,\n                value: {\n                    send: new Map(),\n                    recv: new Map()\n                }\n            },\n            lastReport: {\n                enumerable: true,\n                value: null,\n                writable: true\n            }\n        });\n    }\n    /**\n     * Create a {@link PeerConnectionReport}.\n     * @returns {Promise<PeerConnectionReport>}\n     */\n    PeerConnectionReportFactory.prototype.next = function () {\n        var _this = this;\n        var updatePromise = guessBrowser() === 'firefox'\n            ? updateFirefox(this)\n            : updateChrome(this);\n        return updatePromise.then(function () {\n            var audioSenderReportFactories = __spreadArray([], __read(_this.audio.send.values()));\n            var videoSenderReportFactories = __spreadArray([], __read(_this.video.send.values()));\n            var audioReceiverReportFactories = __spreadArray([], __read(_this.audio.recv.values()));\n            var videoReceiverReportFactories = __spreadArray([], __read(_this.video.recv.values()));\n            var report = new PeerConnectionReport(_this.ice.lastReport, {\n                send: audioSenderReportFactories.map(function (factory) { return factory.lastReport; }).filter(function (report) { return report; }),\n                recv: audioReceiverReportFactories.map(function (factory) { return factory.lastReport; }).filter(function (report) { return report; })\n            }, {\n                send: videoSenderReportFactories.map(function (factory) { return factory.lastReport; }).filter(function (report) { return report; }),\n                recv: videoReceiverReportFactories.map(function (factory) { return factory.lastReport; }).filter(function (report) { return report; })\n            });\n            _this.lastReport = report;\n            return report;\n        });\n    };\n    return PeerConnectionReportFactory;\n}());\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n    return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n        var trackId = senderOrReceiver.track.id;\n        return senderOrReceiver.getStats().then(function (report) {\n            var e_1, _a;\n            try {\n                // NOTE(mroberts): We have to rewrite Ids due to this bug:\n                //\n                //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n                //\n                for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var stats = _c.value;\n                    if (stats.type === 'inbound-rtp') {\n                        stats.id = trackId + \"-\" + stats.id;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return [trackId, report];\n        });\n    })).then(function (pairs) { return new Map(pairs); });\n}\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */ /**\n* @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n* @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n* @param {RTCStatsReport} report\n* @param {RTCStats} stats\n* @param {TrackId} [trackId]\n* @returns {?ReceiverReportFactory}\n*/\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n    var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n    if (!trackId) {\n        var trackStats = report.get(stats.trackId);\n        if (trackStats) {\n            trackId = trackStats.trackIdentifier;\n        }\n    }\n    if (sendersOrReceivers && trackId) {\n        if (sendersOrReceivers.has(stats.id)) {\n            return sendersOrReceivers.get(stats.id);\n        }\n        var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n        sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n    }\n    return null;\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n    return { audio: factory.audio.send, video: factory.video.send };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n    return { audio: factory.audio.recv, video: factory.video.recv };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n    return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n    return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n    return {\n        audio: new Set(factory.audio.send.keys()),\n        video: new Set(factory.video.send.keys())\n    };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n    return {\n        audio: new Set(factory.audio.recv.keys()),\n        video: new Set(factory.video.recv.keys())\n    };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n    var e_2, _a;\n    try {\n        for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var stats = _c.value;\n            if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n                if (guessBrowser() !== 'firefox' && !stats.trackId) {\n                    continue;\n                }\n                var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n                if (senderReportFactoryIdsToDelete) {\n                    senderReportFactoryIdsToDelete.delete(stats.id);\n                }\n                var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n                if (senderReportFactory) {\n                    var remoteInboundStats = report.get(stats.remoteId);\n                    senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n                }\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n    var e_3, _a;\n    try {\n        for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var stats = _c.value;\n            if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n                var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n                if (receiverReportFactoryIdsToDelete) {\n                    receiverReportFactoryIdsToDelete.delete(stats.id);\n                }\n                var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n                if (receiverReportFactory) {\n                    receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n                }\n            }\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n}\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n    var _loop_1 = function (mediaType) {\n        var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n        var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n        senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) { return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId); });\n    };\n    for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n        _loop_1(mediaType);\n    }\n}\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n    var e_4, _a, e_5, _b;\n    var selectedCandidatePair;\n    try {\n        for (var _c = __values(report.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stats = _d.value;\n            if (stats.type === 'transport') {\n                selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n            }\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n    if (selectedCandidatePair) {\n        ice.next(selectedCandidatePair);\n        return;\n    }\n    try {\n        for (var _e = __values(report.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var stats = _f.value;\n            if (stats.type === 'candidate-pair'\n                && stats.nominated\n                && ('selected' in stats ? stats.selected : true)) {\n                ice.next(stats);\n            }\n        }\n    }\n    catch (e_5_1) { e_5 = { error: e_5_1 }; }\n    finally {\n        try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        }\n        finally { if (e_5) throw e_5.error; }\n    }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateFirefox(factory) {\n    var senders = factory.pc.getTransceivers()\n        .filter(function (transceiver) { return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track; })\n        .map(function (transceiver) { return transceiver.sender; });\n    var receivers = factory.pc.getTransceivers()\n        .filter(function (transceiver) { return transceiver.currentDirection && transceiver.currentDirection.match(/recv/); })\n        .map(function (transceiver) { return transceiver.receiver; });\n    return Promise.all([\n        getSenderOrReceiverReports(senders),\n        getSenderOrReceiverReports(receivers),\n        factory.pc.getStats()\n    ]).then(function (_a) {\n        var _b = __read(_a, 3), senderReports = _b[0], receiverReports = _b[1], pcReport = _b[2];\n        var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n        var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n        senderReports.forEach(function (report, trackId) { return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId); });\n        deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n        var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n        var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n        receiverReports.forEach(function (report, trackId) { return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId); });\n        deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n        updateIceReport(factory.ice, pcReport);\n    });\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateChrome(factory) {\n    return factory.pc.getStats().then(function (report) {\n        var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n        var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n        updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n        deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n        var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n        var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n        updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n        deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n        updateIceReport(factory.ice, report);\n    });\n}\nmodule.exports = PeerConnectionReportFactory;\n//# sourceMappingURL=peerconnectionreportfactory.js.map"]},"metadata":{},"sourceType":"script"}