{"ast":null,"code":"'use strict';\n\nvar flatMap = require('./util').flatMap;\n\nvar guessBrowser = require('./util').guessBrowser;\n\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\n\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\n\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\n\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n\n  return _getStats(peerConnection, options);\n}\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\n\n\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n  var trackStatsPromises = flatMap([[localAudioTracks, 'localAudioTrackStats', false], [localVideoTracks, 'localVideoTrackStats', false], [remoteAudioTracks, 'remoteAudioTrackStats', true], [remoteVideoTracks, 'remoteVideoTrackStats', true]], function (triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function (track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function (trackStatsArray) {\n        trackStatsArray.forEach(function (trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n  return Promise.all(trackStatsPromises).then(function () {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function (activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\n\n\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome || typeof options.testForSafari !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\n\n\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    type: 'string'\n  }, {\n    key: 'port',\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type ? activeLocalCandidateStats[keyInfo.key] : keyInfo.key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type ? activeRemoteCandidateStats[keyInfo.key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string',\n    fixup: function fixup(state) {\n      return state === 'inprogress' ? 'in-progress' : state;\n    }\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? keyInfo.fixup ? keyInfo.fixup(activeCandidatePairStats[keyInfo.key]) : activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\n\n\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    ffKeys: ['address', 'ipAddress'],\n    type: 'string'\n  }, {\n    key: 'port',\n    ffKeys: ['portNumber'],\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    ffKeys: ['transport'],\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeLocalCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key] : activeLocalCandidateStats[key] : key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeRemoteCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key] : activeRemoteCandidateStats[key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\n\n\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function (senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function (track) {\n      return track && track.kind === kind;\n    });\n  }\n\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function (stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n\n  if (typeof options.testForSafari !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    } // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n\n\n    return Promise.reject(new Error(['getStats() is not supported on this version of Safari', 'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'].join(' ')));\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function (resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function (response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n\n    peerConnection.getStats(track).then(function (response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function (resolve, reject) {\n    peerConnection.getStats(track).then(function (response) {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\n\n\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function (report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\n\n\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null; // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n\n  var outbound = [];\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n  response.forEach(function (stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n\n      case 'track':\n        track = stat;\n        break;\n\n      case 'codec':\n        codec = stat;\n        break;\n\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n  var isRemote = track && track.remoteSource;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(function (source) {\n    var standardizedStats = {};\n    var statSources = [source, // local rtp stats\n    track, codec, remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function (statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    var ssrc = getStatValue('ssrc');\n\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n    var mimeType = getStatValue('mimeType');\n\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    var roundTripTime = getStatValue('roundTripTime');\n\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    var jitter = getStatValue('jitter');\n\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    var frameWidth = getStatValue('frameWidth');\n\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n      }\n    }\n\n    var frameHeight = getStatValue('frameHeight');\n\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n      }\n    }\n\n    var framesPerSecond = getStatValue('framesPerSecond');\n\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats.frameRateSent = framesPerSecond;\n    }\n\n    var bytesReceived = getStatValue('bytesReceived');\n\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    var bytesSent = getStatValue('bytesSent');\n\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    var packetsLost = getStatValue('packetsLost');\n\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    var packetsReceived = getStatValue('packetsReceived');\n\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    var packetsSent = getStatValue('packetsSent');\n\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    var audioLevel = getStatValue('audioLevel');\n\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    var framesEncoded = getStatValue('framesEncoded');\n\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    var framesDecoded = getStatValue('framesDecoded');\n\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n  return stats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\n\n\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n  var inbound = null;\n  var outbound = null; // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n\n  response.forEach(function (stat) {\n    if (stat.isRemote) {\n      return;\n    }\n\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var ssrc = getStatValue('ssrc');\n\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  var jitter = getStatValue('jitter');\n\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  var framesEncoded = getStatValue('framesEncoded');\n\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  var framesDecoded = getStatValue('framesDecoded');\n\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\n\nmodule.exports = getStats;","map":{"version":3,"sources":["/Users/javierjimenez/cuemeinDeploy/capstone/client/node_modules/@twilio/webrtc/lib/getstats.js"],"names":["flatMap","require","guessBrowser","guessBrowserVersion","getSdpFormat","guess","guessVersion","isChrome","isFirefox","isSafari","chromeMajorVersion","major","CHROME_LEGACY_MAX_AUDIO_LEVEL","getStats","peerConnection","options","Promise","reject","Error","_getStats","localAudioTracks","getTracks","localVideoTracks","remoteAudioTracks","remoteVideoTracks","statsResponse","activeIceCandidatePair","localAudioTrackStats","localVideoTrackStats","remoteAudioTrackStats","remoteVideoTrackStats","trackStatsPromises","triple","tracks","statsArrayName","isRemote","map","track","getTrackStats","Object","assign","then","trackStatsArray","forEach","trackStats","trackId","id","push","all","getActiveIceCandidatePairStats","activeIceCandidatePairStatsReport","testForChrome","testForSafari","standardizeChromeOrSafariActiveIceCandidatePairStats","testForFirefox","standardizeFirefoxActiveIceCandidatePairStats","stats","activeCandidatePairStats","Array","from","values","find","stat","type","nominated","activeLocalCandidateStats","get","localCandidateId","activeRemoteCandidateStats","remoteCandidateId","standardizedCandidateStatsKeys","key","standardizedLocalCandidateStatsKeys","concat","standatdizedLocalCandidateStatsReport","reduce","report","keyInfo","standardizedRemoteCandidateStatsReport","fixup","state","localCandidate","remoteCandidate","ffKeys","candidateTypes","host","peerreflexive","relayed","serverreflexive","kind","localOrRemote","getSendersOrReceivers","senderOrReceiver","filter","getStreams","stream","chromeOrSafariGetTrackStats","firefoxGetTrackStats","join","resolve","response","standardizeChromeLegacyStats","standardizeChromeOrSafariStats","standardizeFirefoxStats","ssrcReport","result","standardizedStats","timestamp","Math","round","Number","names","name","codecName","roundTripTime","jitter","frameWidthInput","frameHeightInput","frameWidthSent","frameHeightSent","frameWidthReceived","frameHeightReceived","frameRateInput","frameRateSent","frameRateReceived","inbound","outbound","remoteInbound","remoteOutbound","codec","remoteSource","mainSources","source","statSources","ssrc","getStatValue","sourceFound","statSource","String","mimeType","split","length","frameWidth","frameHeight","framesPerSecond","bytesReceived","bytesSent","packetsLost","packetsReceived","packetsSent","audioLevel","audioOutputLevel","audioInputLevel","totalPacketSendDalay","totalPacketSendDelay","totalEncodeTime","framesEncoded","estimatedPlayoutTimestamp","totalDecodeTime","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","Map","remoteId","first","second","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,OAAhC;;AACA,IAAIE,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAArC;;AACA,IAAIC,mBAAmB,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBE,mBAA5C;;AACA,IAAIC,YAAY,GAAGH,OAAO,CAAC,YAAD,CAAP,CAAsBG,YAAzC;;AAEA,IAAIC,KAAK,GAAGH,YAAY,EAAxB;AACA,IAAII,YAAY,GAAGH,mBAAmB,EAAtC;AACA,IAAII,QAAQ,GAAGF,KAAK,KAAK,QAAzB;AACA,IAAIG,SAAS,GAAGH,KAAK,KAAK,SAA1B;AACA,IAAII,QAAQ,GAAGJ,KAAK,KAAK,QAAzB;AAEA,IAAIK,kBAAkB,GAAGH,QAAQ,GAAGD,YAAY,CAACK,KAAhB,GAAwB,IAAzD;AAEA,IAAIC,6BAA6B,GAAG,KAApC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,cAAlB,EAAkCC,OAAlC,EAA2C;AACzC,MAAI,EAAED,cAAc,IAAI,OAAOA,cAAc,CAACD,QAAtB,KAAmC,UAAvD,CAAJ,EAAwE;AACtE,WAAOG,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gDAAV,CAAf,CAAP;AACD;;AACD,SAAOC,SAAS,CAACL,cAAD,EAAiBC,OAAjB,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,SAAT,CAAmBL,cAAnB,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIK,gBAAgB,GAAGC,SAAS,CAACP,cAAD,EAAiB,OAAjB,EAA0B,OAA1B,CAAhC;AACA,MAAIQ,gBAAgB,GAAGD,SAAS,CAACP,cAAD,EAAiB,OAAjB,EAA0B,OAA1B,CAAhC;AACA,MAAIS,iBAAiB,GAAGF,SAAS,CAACP,cAAD,EAAiB,OAAjB,CAAjC;AACA,MAAIU,iBAAiB,GAAGH,SAAS,CAACP,cAAD,EAAiB,OAAjB,CAAjC;AAEA,MAAIW,aAAa,GAAG;AAClBC,IAAAA,sBAAsB,EAAE,IADN;AAElBC,IAAAA,oBAAoB,EAAE,EAFJ;AAGlBC,IAAAA,oBAAoB,EAAE,EAHJ;AAIlBC,IAAAA,qBAAqB,EAAE,EAJL;AAKlBC,IAAAA,qBAAqB,EAAE;AALL,GAApB;AAQA,MAAIC,kBAAkB,GAAG/B,OAAO,CAAC,CAC/B,CAACoB,gBAAD,EAAmB,sBAAnB,EAA2C,KAA3C,CAD+B,EAE/B,CAACE,gBAAD,EAAmB,sBAAnB,EAA2C,KAA3C,CAF+B,EAG/B,CAACC,iBAAD,EAAoB,uBAApB,EAA6C,IAA7C,CAH+B,EAI/B,CAACC,iBAAD,EAAoB,uBAApB,EAA6C,IAA7C,CAJ+B,CAAD,EAK7B,UAASQ,MAAT,EAAiB;AAClB,QAAIC,MAAM,GAAGD,MAAM,CAAC,CAAD,CAAnB;AACA,QAAIE,cAAc,GAAGF,MAAM,CAAC,CAAD,CAA3B;AACA,QAAIG,QAAQ,GAAGH,MAAM,CAAC,CAAD,CAArB;AACA,WAAOC,MAAM,CAACG,GAAP,CAAW,UAASC,KAAT,EAAgB;AAChC,aAAOC,aAAa,CAACxB,cAAD,EAAiBuB,KAAjB,EAAwBE,MAAM,CAACC,MAAP,CAAc;AACxDL,QAAAA,QAAQ,EAAEA;AAD8C,OAAd,EAEzCpB,OAFyC,CAAxB,CAAb,CAEM0B,IAFN,CAEW,UAASC,eAAT,EAA0B;AAC1CA,QAAAA,eAAe,CAACC,OAAhB,CAAwB,UAASC,UAAT,EAAqB;AAC3CA,UAAAA,UAAU,CAACC,OAAX,GAAqBR,KAAK,CAACS,EAA3B;AACArB,UAAAA,aAAa,CAACS,cAAD,CAAb,CAA8Ba,IAA9B,CAAmCH,UAAnC;AACD,SAHD;AAID,OAPM,CAAP;AAQD,KATM,CAAP;AAUD,GAnB+B,CAAhC;AAqBA,SAAO5B,OAAO,CAACgC,GAAR,CAAYjB,kBAAZ,EAAgCU,IAAhC,CAAqC,YAAW;AACrD,WAAOQ,8BAA8B,CAACnC,cAAD,EAAiBC,OAAjB,CAArC;AACD,GAFM,EAEJ0B,IAFI,CAEC,UAASS,iCAAT,EAA4C;AAClDzB,IAAAA,aAAa,CAACC,sBAAd,GAAuCwB,iCAAvC;AACA,WAAOzB,aAAP;AACD,GALM,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwB,8BAAT,CAAwCnC,cAAxC,EAAwDC,OAAxD,EAAiE;AAC/DA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAI,OAAOA,OAAO,CAACoC,aAAf,KAAiC,WAAjC,IAAgD5C,QAAhD,IACC,OAAOQ,OAAO,CAACqC,aAAf,KAAkC,WADnC,IACkD3C,QADtD,EACgE;AAC9D,WAAOK,cAAc,CAACD,QAAf,GAA0B4B,IAA1B,CACLY,oDADK,CAAP;AAED;;AACD,MAAI,OAAOtC,OAAO,CAACuC,cAAf,KAAkC,WAAlC,IAAiD9C,SAArD,EAAgE;AAC9D,WAAOM,cAAc,CAACD,QAAf,GAA0B4B,IAA1B,CAA+Bc,6CAA/B,CAAP;AACD;;AACD,SAAOvC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4CAAV,CAAf,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASmC,oDAAT,CAA8DG,KAA9D,EAAqE;AACnE,MAAIC,wBAAwB,GAAGC,KAAK,CAACC,IAAN,CAAWH,KAAK,CAACI,MAAN,EAAX,EAA2BC,IAA3B,CAAgC,UAASC,IAAT,EAAe;AAC5E,WAAOA,IAAI,CAACC,IAAL,KAAc,gBAAd,IAAkCD,IAAI,CAACE,SAA9C;AACD,GAF8B,CAA/B;;AAIA,MAAI,CAACP,wBAAL,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,MAAIQ,yBAAyB,GAAGT,KAAK,CAACU,GAAN,CAAUT,wBAAwB,CAACU,gBAAnC,CAAhC;AACA,MAAIC,0BAA0B,GAAGZ,KAAK,CAACU,GAAN,CAAUT,wBAAwB,CAACY,iBAAnC,CAAjC;AAEA,MAAIC,8BAA8B,GAAG,CACnC;AAAEC,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GADmC,EAEnC;AAAEQ,IAAAA,GAAG,EAAE,IAAP;AAAaR,IAAAA,IAAI,EAAE;AAAnB,GAFmC,EAGnC;AAAEQ,IAAAA,GAAG,EAAE,MAAP;AAAeR,IAAAA,IAAI,EAAE;AAArB,GAHmC,EAInC;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GAJmC,EAKnC;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GALmC,EAMnC;AAAEQ,IAAAA,GAAG,EAAE,KAAP;AAAcR,IAAAA,IAAI,EAAE;AAApB,GANmC,CAArC;AASA,MAAIS,mCAAmC,GAAGF,8BAA8B,CAACG,MAA/B,CAAsC,CAC9E;AAAEF,IAAAA,GAAG,EAAE,SAAP;AAAkBR,IAAAA,IAAI,EAAE;AAAxB,GAD8E,EAE9E;AAAEQ,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GAF8E,CAAtC,CAA1C;AAKA,MAAIW,qCAAqC,GAAGT,yBAAyB,GACjEO,mCAAmC,CAACG,MAApC,CAA2C,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACrED,IAAAA,MAAM,CAACC,OAAO,CAACN,GAAT,CAAN,GAAsB,OAAON,yBAAyB,CAACY,OAAO,CAACN,GAAT,CAAhC,KAAkDM,OAAO,CAACd,IAA1D,GAClBE,yBAAyB,CAACY,OAAO,CAACN,GAAT,CADP,GAElBM,OAAO,CAACN,GAAR,KAAgB,SAAhB,GAA4B,KAA5B,GAAoC,IAFxC;AAGA,WAAOK,MAAP;AACD,GALC,EAKC,EALD,CADiE,GAOjE,IAPJ;AASA,MAAIE,sCAAsC,GAAGV,0BAA0B,GACnEE,8BAA8B,CAACK,MAA/B,CAAsC,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AAChED,IAAAA,MAAM,CAACC,OAAO,CAACN,GAAT,CAAN,GAAsB,OAAOH,0BAA0B,CAACS,OAAO,CAACN,GAAT,CAAjC,KAAmDM,OAAO,CAACd,IAA3D,GAClBK,0BAA0B,CAACS,OAAO,CAACN,GAAT,CADR,GAElB,IAFJ;AAGA,WAAOK,MAAP;AACD,GALC,EAKC,EALD,CADmE,GAOnE,IAPJ;AASA,SAAO,CACL;AAAEL,IAAAA,GAAG,EAAE,0BAAP;AAAmCR,IAAAA,IAAI,EAAE;AAAzC,GADK,EAEL;AAAEQ,IAAAA,GAAG,EAAE,0BAAP;AAAmCR,IAAAA,IAAI,EAAE;AAAzC,GAFK,EAGL;AAAEQ,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GAHK,EAIL;AAAEQ,IAAAA,GAAG,EAAE,WAAP;AAAoBR,IAAAA,IAAI,EAAE;AAA1B,GAJK,EAKL;AAAEQ,IAAAA,GAAG,EAAE,qBAAP;AAA8BR,IAAAA,IAAI,EAAE;AAApC,GALK,EAML;AAAEQ,IAAAA,GAAG,EAAE,sBAAP;AAA+BR,IAAAA,IAAI,EAAE;AAArC,GANK,EAOL;AAAEQ,IAAAA,GAAG,EAAE,6BAAP;AAAsCR,IAAAA,IAAI,EAAE;AAA5C,GAPK,EAQL;AAAEQ,IAAAA,GAAG,EAAE,yBAAP;AAAkCR,IAAAA,IAAI,EAAE;AAAxC,GARK,EASL;AAAEQ,IAAAA,GAAG,EAAE,WAAP;AAAoBR,IAAAA,IAAI,EAAE;AAA1B,GATK,EAUL;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GAVK,EAWL;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GAXK,EAYL;AAAEQ,IAAAA,GAAG,EAAE,kBAAP;AAA2BR,IAAAA,IAAI,EAAE;AAAjC,GAZK,EAaL;AAAEQ,IAAAA,GAAG,EAAE,cAAP;AAAuBR,IAAAA,IAAI,EAAE;AAA7B,GAbK,EAcL;AAAEQ,IAAAA,GAAG,EAAE,mBAAP;AAA4BR,IAAAA,IAAI,EAAE;AAAlC,GAdK,EAeL;AAAEQ,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GAfK,EAgBL;AAAEQ,IAAAA,GAAG,EAAE,yBAAP;AAAkCR,IAAAA,IAAI,EAAE;AAAxC,GAhBK,EAiBL;AAAEQ,IAAAA,GAAG,EAAE,qBAAP;AAA8BR,IAAAA,IAAI,EAAE;AAApC,GAjBK,EAkBL;AAAEQ,IAAAA,GAAG,EAAE,OAAP;AAAgBR,IAAAA,IAAI,EAAE,QAAtB;AAAgCgB,IAAAA,KAAK,EAAE,eAASC,KAAT,EAAgB;AAAE,aAAOA,KAAK,KAAK,YAAV,GAAyB,aAAzB,GAAyCA,KAAhD;AAAwD;AAAjH,GAlBK,EAmBL;AAAET,IAAAA,GAAG,EAAE,oBAAP;AAA6BR,IAAAA,IAAI,EAAE;AAAnC,GAnBK,EAoBL;AAAEQ,IAAAA,GAAG,EAAE,aAAP;AAAsBR,IAAAA,IAAI,EAAE;AAA5B,GApBK,EAqBL;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GArBK,EAsBLY,MAtBK,CAsBE,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACjCD,IAAAA,MAAM,CAACC,OAAO,CAACN,GAAT,CAAN,GAAsB,OAAOd,wBAAwB,CAACoB,OAAO,CAACN,GAAT,CAA/B,KAAiDM,OAAO,CAACd,IAAzD,GACjBc,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACE,KAAR,CAActB,wBAAwB,CAACoB,OAAO,CAACN,GAAT,CAAtC,CAAhB,GAAuEd,wBAAwB,CAACoB,OAAO,CAACN,GAAT,CAD9E,GAElB,IAFJ;AAGA,WAAOK,MAAP;AACD,GA3BM,EA2BJ;AACDK,IAAAA,cAAc,EAAEP,qCADf;AAEDQ,IAAAA,eAAe,EAAEJ;AAFhB,GA3BI,CAAP;AA+BD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASvB,6CAAT,CAAuDC,KAAvD,EAA8D;AAC5D,MAAIC,wBAAwB,GAAGC,KAAK,CAACC,IAAN,CAAWH,KAAK,CAACI,MAAN,EAAX,EAA2BC,IAA3B,CAAgC,UAASC,IAAT,EAAe;AAC5E,WAAOA,IAAI,CAACC,IAAL,KAAc,gBAAd,IAAkCD,IAAI,CAACE,SAA9C;AACD,GAF8B,CAA/B;;AAIA,MAAI,CAACP,wBAAL,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,MAAIQ,yBAAyB,GAAGT,KAAK,CAACU,GAAN,CAAUT,wBAAwB,CAACU,gBAAnC,CAAhC;AACA,MAAIC,0BAA0B,GAAGZ,KAAK,CAACU,GAAN,CAAUT,wBAAwB,CAACY,iBAAnC,CAAjC;AAEA,MAAIC,8BAA8B,GAAG,CACnC;AAAEC,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GADmC,EAEnC;AAAEQ,IAAAA,GAAG,EAAE,IAAP;AAAaY,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,WAAZ,CAArB;AAA+CpB,IAAAA,IAAI,EAAE;AAArD,GAFmC,EAGnC;AAAEQ,IAAAA,GAAG,EAAE,MAAP;AAAeY,IAAAA,MAAM,EAAE,CAAC,YAAD,CAAvB;AAAuCpB,IAAAA,IAAI,EAAE;AAA7C,GAHmC,EAInC;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GAJmC,EAKnC;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBY,IAAAA,MAAM,EAAE,CAAC,WAAD,CAA3B;AAA0CpB,IAAAA,IAAI,EAAE;AAAhD,GALmC,EAMnC;AAAEQ,IAAAA,GAAG,EAAE,KAAP;AAAcR,IAAAA,IAAI,EAAE;AAApB,GANmC,CAArC;AASA,MAAIS,mCAAmC,GAAGF,8BAA8B,CAACG,MAA/B,CAAsC,CAC9E;AAAEF,IAAAA,GAAG,EAAE,SAAP;AAAkBR,IAAAA,IAAI,EAAE;AAAxB,GAD8E,EAE9E;AAAEQ,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GAF8E,CAAtC,CAA1C;AAKA,MAAIqB,cAAc,GAAG;AACnBC,IAAAA,IAAI,EAAE,MADa;AAEnBC,IAAAA,aAAa,EAAE,OAFI;AAGnBC,IAAAA,OAAO,EAAE,OAHU;AAInBC,IAAAA,eAAe,EAAE;AAJE,GAArB;AAOA,MAAId,qCAAqC,GAAGT,yBAAyB,GACjEO,mCAAmC,CAACG,MAApC,CAA2C,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACrE,QAAIN,GAAG,GAAGM,OAAO,CAACM,MAAR,IAAkBN,OAAO,CAACM,MAAR,CAAetB,IAAf,CAAoB,UAASU,GAAT,EAAc;AAC5D,aAAOA,GAAG,IAAIN,yBAAd;AACD,KAF2B,CAAlB,IAEJY,OAAO,CAACN,GAFd;AAGAK,IAAAA,MAAM,CAACC,OAAO,CAACN,GAAT,CAAN,GAAsB,OAAON,yBAAyB,CAACM,GAAD,CAAhC,KAA0CM,OAAO,CAACd,IAAlD,GAClBQ,GAAG,KAAK,eAAR,GACEa,cAAc,CAACnB,yBAAyB,CAACM,GAAD,CAA1B,CAAd,IAAkDN,yBAAyB,CAACM,GAAD,CAD7E,GAEEN,yBAAyB,CAACM,GAAD,CAHT,GAIlBA,GAAG,KAAK,SAAR,GAAoB,KAApB,GAA4B,IAJhC;AAKA,WAAOK,MAAP;AACD,GAVC,EAUC,EAVD,CADiE,GAYjE,IAZJ;AAcA,MAAIE,sCAAsC,GAAGV,0BAA0B,GACnEE,8BAA8B,CAACK,MAA/B,CAAsC,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AAChE,QAAIN,GAAG,GAAGM,OAAO,CAACM,MAAR,IAAkBN,OAAO,CAACM,MAAR,CAAetB,IAAf,CAAoB,UAASU,GAAT,EAAc;AAC5D,aAAOA,GAAG,IAAIH,0BAAd;AACD,KAF2B,CAAlB,IAEJS,OAAO,CAACN,GAFd;AAGAK,IAAAA,MAAM,CAACC,OAAO,CAACN,GAAT,CAAN,GAAsB,OAAOH,0BAA0B,CAACG,GAAD,CAAjC,KAA2CM,OAAO,CAACd,IAAnD,GAClBQ,GAAG,KAAK,eAAR,GACEa,cAAc,CAAChB,0BAA0B,CAACG,GAAD,CAA3B,CAAd,IAAmDH,0BAA0B,CAACG,GAAD,CAD/E,GAEEH,0BAA0B,CAACG,GAAD,CAHV,GAIlB,IAJJ;AAKA,WAAOK,MAAP;AACD,GAVC,EAUC,EAVD,CADmE,GAYnE,IAZJ;AAcA,SAAO,CACL;AAAEL,IAAAA,GAAG,EAAE,0BAAP;AAAmCR,IAAAA,IAAI,EAAE;AAAzC,GADK,EAEL;AAAEQ,IAAAA,GAAG,EAAE,0BAAP;AAAmCR,IAAAA,IAAI,EAAE;AAAzC,GAFK,EAGL;AAAEQ,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GAHK,EAIL;AAAEQ,IAAAA,GAAG,EAAE,WAAP;AAAoBR,IAAAA,IAAI,EAAE;AAA1B,GAJK,EAKL;AAAEQ,IAAAA,GAAG,EAAE,qBAAP;AAA8BR,IAAAA,IAAI,EAAE;AAApC,GALK,EAML;AAAEQ,IAAAA,GAAG,EAAE,sBAAP;AAA+BR,IAAAA,IAAI,EAAE;AAArC,GANK,EAOL;AAAEQ,IAAAA,GAAG,EAAE,6BAAP;AAAsCR,IAAAA,IAAI,EAAE;AAA5C,GAPK,EAQL;AAAEQ,IAAAA,GAAG,EAAE,yBAAP;AAAkCR,IAAAA,IAAI,EAAE;AAAxC,GARK,EASL;AAAEQ,IAAAA,GAAG,EAAE,WAAP;AAAoBR,IAAAA,IAAI,EAAE;AAA1B,GATK,EAUL;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GAVK,EAWL;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GAXK,EAYL;AAAEQ,IAAAA,GAAG,EAAE,kBAAP;AAA2BR,IAAAA,IAAI,EAAE;AAAjC,GAZK,EAaL;AAAEQ,IAAAA,GAAG,EAAE,cAAP;AAAuBR,IAAAA,IAAI,EAAE;AAA7B,GAbK,EAcL;AAAEQ,IAAAA,GAAG,EAAE,mBAAP;AAA4BR,IAAAA,IAAI,EAAE;AAAlC,GAdK,EAeL;AAAEQ,IAAAA,GAAG,EAAE,eAAP;AAAwBR,IAAAA,IAAI,EAAE;AAA9B,GAfK,EAgBL;AAAEQ,IAAAA,GAAG,EAAE,yBAAP;AAAkCR,IAAAA,IAAI,EAAE;AAAxC,GAhBK,EAiBL;AAAEQ,IAAAA,GAAG,EAAE,qBAAP;AAA8BR,IAAAA,IAAI,EAAE;AAApC,GAjBK,EAkBL;AAAEQ,IAAAA,GAAG,EAAE,OAAP;AAAgBR,IAAAA,IAAI,EAAE;AAAtB,GAlBK,EAmBL;AAAEQ,IAAAA,GAAG,EAAE,oBAAP;AAA6BR,IAAAA,IAAI,EAAE;AAAnC,GAnBK,EAoBL;AAAEQ,IAAAA,GAAG,EAAE,aAAP;AAAsBR,IAAAA,IAAI,EAAE;AAA5B,GApBK,EAqBL;AAAEQ,IAAAA,GAAG,EAAE,UAAP;AAAmBR,IAAAA,IAAI,EAAE;AAAzB,GArBK,EAsBLY,MAtBK,CAsBE,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACjCD,IAAAA,MAAM,CAACC,OAAO,CAACN,GAAT,CAAN,GAAsB,OAAOd,wBAAwB,CAACoB,OAAO,CAACN,GAAT,CAA/B,KAAiDM,OAAO,CAACd,IAAzD,GAClBN,wBAAwB,CAACoB,OAAO,CAACN,GAAT,CADN,GAElB,IAFJ;AAGA,WAAOK,MAAP;AACD,GA3BM,EA2BJ;AACDK,IAAAA,cAAc,EAAEP,qCADf;AAEDQ,IAAAA,eAAe,EAAEJ;AAFhB,GA3BI,CAAP;AA+BD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASzD,SAAT,CAAmBP,cAAnB,EAAmC2E,IAAnC,EAAyCC,aAAzC,EAAwD;AACtD,MAAIC,qBAAqB,GAAGD,aAAa,KAAK,OAAlB,GAA4B,YAA5B,GAA2C,cAAvE;;AACA,MAAI5E,cAAc,CAAC6E,qBAAD,CAAlB,EAA2C;AACzC,WAAO7E,cAAc,CAAC6E,qBAAD,CAAd,GAAwCvD,GAAxC,CAA4C,UAASwD,gBAAT,EAA2B;AAC5E,aAAOA,gBAAgB,CAACvD,KAAxB;AACD,KAFM,EAEJwD,MAFI,CAEG,UAASxD,KAAT,EAAgB;AACxB,aAAOA,KAAK,IAAIA,KAAK,CAACoD,IAAN,KAAeA,IAA/B;AACD,KAJM,CAAP;AAKD;;AACD,MAAIK,UAAU,GAAGJ,aAAa,KAAK,OAAlB,GAA4B,iBAA5B,GAAgD,kBAAjE;AACA,SAAO1F,OAAO,CAACc,cAAc,CAACgF,UAAD,CAAd,EAAD,EAA+B,UAASC,MAAT,EAAiB;AAC5D,QAAI1E,SAAS,GAAGoE,IAAI,KAAK,OAAT,GAAmB,gBAAnB,GAAsC,gBAAtD;AACA,WAAOM,MAAM,CAAC1E,SAAD,CAAN,EAAP;AACD,GAHa,CAAd;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,aAAT,CAAuBxB,cAAvB,EAAuCuB,KAAvC,EAA8CtB,OAA9C,EAAuD;AACrDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAI,OAAOA,OAAO,CAACoC,aAAf,KAAiC,WAAjC,IAAgD5C,QAApD,EAA8D;AAC5D,WAAOyF,2BAA2B,CAAClF,cAAD,EAAiBuB,KAAjB,CAAlC;AACD;;AACD,MAAI,OAAOtB,OAAO,CAACuC,cAAf,KAAmC,WAAnC,IAAkD9C,SAAtD,EAAiE;AAC/D,WAAOyF,oBAAoB,CAACnF,cAAD,EAAiBuB,KAAjB,EAAwBtB,OAAO,CAACoB,QAAhC,CAA3B;AACD;;AACD,MAAI,OAAOpB,OAAO,CAACqC,aAAf,KAAkC,WAAlC,IAAiD3C,QAArD,EAA+D;AAC7D,QAAI,OAAOM,OAAO,CAACqC,aAAf,KAAkC,WAAlC,IAAiDhD,YAAY,OAAO,SAAxE,EAAmF;AACjF,aAAO4F,2BAA2B,CAAClF,cAAD,EAAiBuB,KAAjB,CAAlC;AACD,KAH4D,CAI7D;AACA;AACA;;;AACA,WAAOrB,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,CAC9B,uDAD8B,EAE9B,iEAF8B,EAG9BgF,IAH8B,CAGzB,GAHyB,CAAV,CAAf,CAAP;AAID;;AACD,SAAOlF,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4CAAV,CAAf,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8E,2BAAT,CAAqClF,cAArC,EAAqDuB,KAArD,EAA4D;AAC1D,SAAO,IAAIrB,OAAJ,CAAY,UAASmF,OAAT,EAAkBlF,MAAlB,EAA0B;AAC3C,QAAIP,kBAAkB,IAAIA,kBAAkB,GAAG,EAA/C,EAAmD;AACjDI,MAAAA,cAAc,CAACD,QAAf,CAAwB,UAASuF,QAAT,EAAmB;AACzCD,QAAAA,OAAO,CAAC,CAACE,4BAA4B,CAACD,QAAD,EAAW/D,KAAX,CAA7B,CAAD,CAAP;AACD,OAFD,EAEG,IAFH,EAESpB,MAFT;AAGA;AACD;;AACDH,IAAAA,cAAc,CAACD,QAAf,CAAwBwB,KAAxB,EAA+BI,IAA/B,CAAoC,UAAS2D,QAAT,EAAmB;AACrDD,MAAAA,OAAO,CAACG,8BAA8B,CAACF,QAAD,CAA/B,CAAP;AACD,KAFD,EAEGnF,MAFH;AAGD,GAVM,CAAP;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgF,oBAAT,CAA8BnF,cAA9B,EAA8CuB,KAA9C,EAAqDF,QAArD,EAA+D;AAC7D,SAAO,IAAInB,OAAJ,CAAY,UAASmF,OAAT,EAAkBlF,MAAlB,EAA0B;AAC3CH,IAAAA,cAAc,CAACD,QAAf,CAAwBwB,KAAxB,EAA+BI,IAA/B,CAAoC,UAAS2D,QAAT,EAAmB;AACrDD,MAAAA,OAAO,CAAC,CAACI,uBAAuB,CAACH,QAAD,EAAWjE,QAAX,CAAxB,CAAD,CAAP;AACD,KAFD,EAEGlB,MAFH;AAGD,GAJM,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoF,4BAAT,CAAsCD,QAAtC,EAAgD/D,KAAhD,EAAuD;AACrD,MAAImE,UAAU,GAAGJ,QAAQ,CAACK,MAAT,GAAkB5C,IAAlB,CAAuB,UAASe,MAAT,EAAiB;AACvD,WAAOA,MAAM,CAACb,IAAP,KAAgB,MAAhB,IAA0Ba,MAAM,CAACd,IAAP,CAAY,aAAZ,MAA+BzB,KAAK,CAACS,EAAtE;AACD,GAFgB,CAAjB;AAIA,MAAI4D,iBAAiB,GAAG,EAAxB;;AAEA,MAAIF,UAAJ,EAAgB;AACdE,IAAAA,iBAAiB,CAACC,SAAlB,GAA8BC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACN,UAAU,CAACG,SAAZ,CAAjB,CAA9B;AACAD,IAAAA,iBAAiB,GAAGF,UAAU,CAACO,KAAX,GAAmBpC,MAAnB,CAA0B,UAASnB,KAAT,EAAgBwD,IAAhB,EAAsB;AAClE,cAAQA,IAAR;AACE,aAAK,eAAL;AACExD,UAAAA,KAAK,CAACyD,SAAN,GAAkBT,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAlB;AACA;;AACF,aAAK,SAAL;AACExD,UAAAA,KAAK,CAAC0D,aAAN,GAAsBJ,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA5B;AACA;;AACF,aAAK,oBAAL;AACExD,UAAAA,KAAK,CAAC2D,MAAN,GAAeL,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAArB;AACA;;AACF,aAAK,qBAAL;AACExD,UAAAA,KAAK,CAAC4D,eAAN,GAAwBN,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA9B;AACA;;AACF,aAAK,sBAAL;AACExD,UAAAA,KAAK,CAAC6D,gBAAN,GAAyBP,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA/B;AACA;;AACF,aAAK,oBAAL;AACExD,UAAAA,KAAK,CAAC8D,cAAN,GAAuBR,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA7B;AACA;;AACF,aAAK,qBAAL;AACExD,UAAAA,KAAK,CAAC+D,eAAN,GAAwBT,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA9B;AACA;;AACF,aAAK,wBAAL;AACExD,UAAAA,KAAK,CAACgE,kBAAN,GAA2BV,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAAjC;AACA;;AACF,aAAK,yBAAL;AACExD,UAAAA,KAAK,CAACiE,mBAAN,GAA4BX,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAAlC;AACA;;AACF,aAAK,oBAAL;AACExD,UAAAA,KAAK,CAACkE,cAAN,GAAuBZ,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA7B;AACA;;AACF,aAAK,mBAAL;AACExD,UAAAA,KAAK,CAACmE,aAAN,GAAsBb,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAA5B;AACA;;AACF,aAAK,uBAAL;AACExD,UAAAA,KAAK,CAACoE,iBAAN,GAA0Bd,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAAhC;AACA;;AACF,aAAK,MAAL;AACExD,UAAAA,KAAK,CAACwD,IAAD,CAAL,GAAcR,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAd;AACA;;AACF,aAAK,eAAL;AACA,aAAK,WAAL;AACA,aAAK,aAAL;AACA,aAAK,iBAAL;AACA,aAAK,aAAL;AACA,aAAK,iBAAL;AACA,aAAK,kBAAL;AACExD,UAAAA,KAAK,CAACwD,IAAD,CAAL,GAAcF,MAAM,CAACN,UAAU,CAAC1C,IAAX,CAAgBkD,IAAhB,CAAD,CAApB;AACA;AAhDJ;;AAmDA,aAAOxD,KAAP;AACD,KArDmB,EAqDjBkD,iBArDiB,CAApB;AAsDD;;AAED,SAAOA,iBAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASJ,8BAAT,CAAwCF,QAAxC,EAAkD;AAChD,MAAIyB,OAAO,GAAG,IAAd,CADgD,CAGhD;AACA;;AACA,MAAIC,QAAQ,GAAG,EAAf;AAEA,MAAIC,aAAa,GAAG,IAApB;AACA,MAAIC,cAAc,GAAG,IAArB;AACA,MAAI3F,KAAK,GAAG,IAAZ;AACA,MAAI4F,KAAK,GAAG,IAAZ;AAEA7B,EAAAA,QAAQ,CAACzD,OAAT,CAAiB,UAASmB,IAAT,EAAe;AAC9B,YAAQA,IAAI,CAACC,IAAb;AACE,WAAK,aAAL;AACE8D,QAAAA,OAAO,GAAG/D,IAAV;AACA;;AACF,WAAK,cAAL;AACEgE,QAAAA,QAAQ,CAAC/E,IAAT,CAAce,IAAd;AACA;;AACF,WAAK,OAAL;AACEzB,QAAAA,KAAK,GAAGyB,IAAR;AACA;;AACF,WAAK,OAAL;AACEmE,QAAAA,KAAK,GAAGnE,IAAR;AACA;;AACF,WAAK,oBAAL;AACEiE,QAAAA,aAAa,GAAGjE,IAAhB;AACA;;AACF,WAAK,qBAAL;AACEkE,QAAAA,cAAc,GAAGlE,IAAjB;AACA;AAlBJ;AAoBD,GArBD;AAuBA,MAAI3B,QAAQ,GAAGE,KAAK,IAAIA,KAAK,CAAC6F,YAA9B;AACA,MAAIC,WAAW,GAAGhG,QAAQ,GAAG,CAAC0F,OAAD,CAAH,GAAeC,QAAzC;AACA,MAAItE,KAAK,GAAG,EAAZ;AACA,MAAI0E,YAAY,GAAG/F,QAAQ,GAAG6F,cAAH,GAAoBD,aAA/C,CAtCgD,CAsCc;;AAE9DI,EAAAA,WAAW,CAACxF,OAAZ,CAAoB,UAASyF,MAAT,EAAiB;AACnC,QAAI1B,iBAAiB,GAAG,EAAxB;AACA,QAAI2B,WAAW,GAAG,CAChBD,MADgB,EACR;AACR/F,IAAAA,KAFgB,EAGhB4F,KAHgB,EAIhBC,YAAY,IAAIA,YAAY,CAACI,IAAb,KAAsBF,MAAM,CAACE,IAA7C,GAAoDJ,YAApD,GAAmE,IAJnD,CAIyD;AAJzD,KAAlB;;AAOA,aAASK,YAAT,CAAsBvB,IAAtB,EAA4B;AAC1B,UAAIwB,WAAW,GAAGH,WAAW,CAACxE,IAAZ,CAAiB,UAAS4E,UAAT,EAAqB;AACtD,eAAOA,UAAU,IAAI,OAAOA,UAAU,CAACzB,IAAD,CAAjB,KAA4B,WAAjD;AACD,OAFiB,KAEZ,IAFN;AAIA,aAAOwB,WAAW,GAAGA,WAAW,CAACxB,IAAD,CAAd,GAAuB,IAAzC;AACD;;AAED,QAAIsB,IAAI,GAAGC,YAAY,CAAC,MAAD,CAAvB;;AACA,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B5B,MAAAA,iBAAiB,CAAC4B,IAAlB,GAAyBI,MAAM,CAACJ,IAAD,CAA/B;AACD;;AAED,QAAI3B,SAAS,GAAG4B,YAAY,CAAC,WAAD,CAA5B;AACA7B,IAAAA,iBAAiB,CAACC,SAAlB,GAA8BC,IAAI,CAACC,KAAL,CAAWF,SAAX,CAA9B;AAEA,QAAIgC,QAAQ,GAAGJ,YAAY,CAAC,UAAD,CAA3B;;AACA,QAAI,OAAOI,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,KAAT,CAAe,GAAf,CAAX;AACAlC,MAAAA,iBAAiB,CAACO,SAAlB,GAA8B0B,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAtC;AACD;;AAED,QAAI3B,aAAa,GAAGqB,YAAY,CAAC,eAAD,CAAhC;;AACA,QAAI,OAAOrB,aAAP,KAAyB,QAA7B,EAAuC;AACrCR,MAAAA,iBAAiB,CAACQ,aAAlB,GAAkCN,IAAI,CAACC,KAAL,CAAWK,aAAa,GAAG,IAA3B,CAAlC;AACD;;AAED,QAAIC,MAAM,GAAGoB,YAAY,CAAC,QAAD,CAAzB;;AACA,QAAI,OAAOpB,MAAP,KAAkB,QAAtB,EAAgC;AAC9BT,MAAAA,iBAAiB,CAACS,MAAlB,GAA2BP,IAAI,CAACC,KAAL,CAAWM,MAAM,GAAG,IAApB,CAA3B;AACD;;AAED,QAAI2B,UAAU,GAAGP,YAAY,CAAC,YAAD,CAA7B;;AACA,QAAI,OAAOO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,UAAI3G,QAAJ,EAAc;AACZuE,QAAAA,iBAAiB,CAACc,kBAAlB,GAAuCsB,UAAvC;AACD,OAFD,MAEO;AACLpC,QAAAA,iBAAiB,CAACY,cAAlB,GAAmCwB,UAAnC;AACD;AACF;;AAED,QAAIC,WAAW,GAAGR,YAAY,CAAC,aAAD,CAA9B;;AACA,QAAI,OAAOQ,WAAP,KAAuB,QAA3B,EAAqC;AACnC,UAAI5G,QAAJ,EAAc;AACZuE,QAAAA,iBAAiB,CAACe,mBAAlB,GAAwCsB,WAAxC;AACD,OAFD,MAEO;AACLrC,QAAAA,iBAAiB,CAACa,eAAlB,GAAoCwB,WAApC;AACD;AACF;;AAED,QAAIC,eAAe,GAAGT,YAAY,CAAC,iBAAD,CAAlC;;AACA,QAAI,OAAOS,eAAP,KAA2B,QAA/B,EAAyC;AACvCtC,MAAAA,iBAAiB,CAACiB,aAAlB,GAAkCqB,eAAlC;AACD;;AAED,QAAIC,aAAa,GAAGV,YAAY,CAAC,eAAD,CAAhC;;AACA,QAAI,OAAOU,aAAP,KAAyB,QAA7B,EAAuC;AACrCvC,MAAAA,iBAAiB,CAACuC,aAAlB,GAAkCA,aAAlC;AACD;;AAED,QAAIC,SAAS,GAAGX,YAAY,CAAC,WAAD,CAA5B;;AACA,QAAI,OAAOW,SAAP,KAAqB,QAAzB,EAAmC;AACjCxC,MAAAA,iBAAiB,CAACwC,SAAlB,GAA8BA,SAA9B;AACD;;AAED,QAAIC,WAAW,GAAGZ,YAAY,CAAC,aAAD,CAA9B;;AACA,QAAI,OAAOY,WAAP,KAAuB,QAA3B,EAAqC;AACnCzC,MAAAA,iBAAiB,CAACyC,WAAlB,GAAgCA,WAAhC;AACD;;AAED,QAAIC,eAAe,GAAGb,YAAY,CAAC,iBAAD,CAAlC;;AACA,QAAI,OAAOa,eAAP,KAA2B,QAA/B,EAAyC;AACvC1C,MAAAA,iBAAiB,CAAC0C,eAAlB,GAAoCA,eAApC;AACD;;AAED,QAAIC,WAAW,GAAGd,YAAY,CAAC,aAAD,CAA9B;;AACA,QAAI,OAAOc,WAAP,KAAuB,QAA3B,EAAqC;AACnC3C,MAAAA,iBAAiB,CAAC2C,WAAlB,GAAgCA,WAAhC;AACD;;AAED,QAAIC,UAAU,GAAGf,YAAY,CAAC,YAAD,CAA7B;;AACA,QAAI,OAAOe,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,MAAAA,UAAU,GAAG1C,IAAI,CAACC,KAAL,CAAWyC,UAAU,GAAG1I,6BAAxB,CAAb;;AACA,UAAIuB,QAAJ,EAAc;AACZuE,QAAAA,iBAAiB,CAAC6C,gBAAlB,GAAqCD,UAArC;AACD,OAFD,MAEO;AACL5C,QAAAA,iBAAiB,CAAC8C,eAAlB,GAAoCF,UAApC;AACD;AACF;;AAED,QAAIG,oBAAoB,GAAGlB,YAAY,CAAC,sBAAD,CAAvC;;AACA,QAAI,OAAOkB,oBAAP,KAAgC,QAApC,EAA8C;AAC5C/C,MAAAA,iBAAiB,CAACgD,oBAAlB,GAAyCD,oBAAzC;AACD;;AAED,QAAIE,eAAe,GAAGpB,YAAY,CAAC,iBAAD,CAAlC;;AACA,QAAI,OAAOoB,eAAP,KAA2B,QAA/B,EAAyC;AACvCjD,MAAAA,iBAAiB,CAACiD,eAAlB,GAAoCA,eAApC;AACD;;AAED,QAAIC,aAAa,GAAGrB,YAAY,CAAC,eAAD,CAAhC;;AACA,QAAI,OAAOqB,aAAP,KAAyB,QAA7B,EAAuC;AACrClD,MAAAA,iBAAiB,CAACkD,aAAlB,GAAkCA,aAAlC;AACD;;AAED,QAAIC,yBAAyB,GAAGtB,YAAY,CAAC,2BAAD,CAA5C;;AACA,QAAI,OAAOsB,yBAAP,KAAqC,QAAzC,EAAmD;AACjDnD,MAAAA,iBAAiB,CAACmD,yBAAlB,GAA8CA,yBAA9C;AACD;;AAED,QAAIC,eAAe,GAAGvB,YAAY,CAAC,iBAAD,CAAlC;;AACA,QAAI,OAAOuB,eAAP,KAA2B,QAA/B,EAAyC;AACvCpD,MAAAA,iBAAiB,CAACoD,eAAlB,GAAoCA,eAApC;AACD;;AAED,QAAIC,aAAa,GAAGxB,YAAY,CAAC,eAAD,CAAhC;;AACA,QAAI,OAAOwB,aAAP,KAAyB,QAA7B,EAAuC;AACrCrD,MAAAA,iBAAiB,CAACqD,aAAlB,GAAkCA,aAAlC;AACD;;AAED,QAAIC,iBAAiB,GAAGzB,YAAY,CAAC,mBAAD,CAApC;;AACA,QAAI,OAAOyB,iBAAP,KAA6B,QAAjC,EAA2C;AACzCtD,MAAAA,iBAAiB,CAACsD,iBAAlB,GAAsCA,iBAAtC;AACD;;AAED,QAAIC,wBAAwB,GAAG1B,YAAY,CAAC,0BAAD,CAA3C;;AACA,QAAI,OAAO0B,wBAAP,KAAoC,QAAxC,EAAkD;AAChDvD,MAAAA,iBAAiB,CAACuD,wBAAlB,GAA6CA,wBAA7C;AACD;;AAEDzG,IAAAA,KAAK,CAACT,IAAN,CAAW2D,iBAAX;AACD,GA5ID;AA8IA,SAAOlD,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+C,uBAAT,CAAiCH,QAAjC,EAA2CjE,QAA3C,EAAqD;AACnD;AACA;AACA;AACA;AACA;AACA;AACAiE,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,IAAI8D,GAAJ,EAAvB;AAEA,MAAIrC,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAG,IAAf,CAVmD,CAYnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1B,EAAAA,QAAQ,CAACzD,OAAT,CAAiB,UAASmB,IAAT,EAAe;AAC9B,QAAIA,IAAI,CAAC3B,QAAT,EAAmB;AACjB;AACD;;AACD,YAAQ2B,IAAI,CAACC,IAAb;AACE,WAAK,aAAL;AACE8D,QAAAA,OAAO,GAAG/D,IAAV;AACAgE,QAAAA,QAAQ,GAAG1B,QAAQ,CAAClC,GAAT,CAAaJ,IAAI,CAACqG,QAAlB,CAAX;AACA;;AACF,WAAK,cAAL;AACErC,QAAAA,QAAQ,GAAGhE,IAAX;AACA+D,QAAAA,OAAO,GAAGzB,QAAQ,CAAClC,GAAT,CAAaJ,IAAI,CAACqG,QAAlB,CAAV;AACA;AARJ;AAUD,GAdD;AAgBA,MAAIC,KAAK,GAAGjI,QAAQ,GAAG0F,OAAH,GAAaC,QAAjC;AACA,MAAIuC,MAAM,GAAGlI,QAAQ,GAAG2F,QAAH,GAAcD,OAAnC;;AAEA,WAASU,YAAT,CAAsBvB,IAAtB,EAA4B;AAC1B,QAAIoD,KAAK,IAAI,OAAOA,KAAK,CAACpD,IAAD,CAAZ,KAAuB,WAApC,EAAiD;AAC/C,aAAOoD,KAAK,CAACpD,IAAD,CAAZ;AACD;;AACD,QAAIqD,MAAM,IAAI,OAAOA,MAAM,CAACrD,IAAD,CAAb,KAAwB,WAAtC,EAAmD;AACjD,aAAOqD,MAAM,CAACrD,IAAD,CAAb;AACD;;AACD,WAAO,IAAP;AACD;;AAED,MAAIN,iBAAiB,GAAG,EAAxB;AACA,MAAIC,SAAS,GAAG4B,YAAY,CAAC,WAAD,CAA5B;AACA7B,EAAAA,iBAAiB,CAACC,SAAlB,GAA8BC,IAAI,CAACC,KAAL,CAAWF,SAAX,CAA9B;AAEA,MAAI2B,IAAI,GAAGC,YAAY,CAAC,MAAD,CAAvB;;AACA,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B5B,IAAAA,iBAAiB,CAAC4B,IAAlB,GAAyBI,MAAM,CAACJ,IAAD,CAA/B;AACD;;AAED,MAAIY,SAAS,GAAGX,YAAY,CAAC,WAAD,CAA5B;;AACA,MAAI,OAAOW,SAAP,KAAqB,QAAzB,EAAmC;AACjCxC,IAAAA,iBAAiB,CAACwC,SAAlB,GAA8BA,SAA9B;AACD;;AAED,MAAIC,WAAW,GAAGZ,YAAY,CAAC,aAAD,CAA9B;;AACA,MAAI,OAAOY,WAAP,KAAuB,QAA3B,EAAqC;AACnCzC,IAAAA,iBAAiB,CAACyC,WAAlB,GAAgCA,WAAhC;AACD;;AAED,MAAIE,WAAW,GAAGd,YAAY,CAAC,aAAD,CAA9B;;AACA,MAAI,OAAOc,WAAP,KAAuB,QAA3B,EAAqC;AACnC3C,IAAAA,iBAAiB,CAAC2C,WAAlB,GAAgCA,WAAhC;AACD;;AAED,MAAInC,aAAa,GAAGqB,YAAY,CAAC,eAAD,CAAhC;;AACA,MAAI,OAAOrB,aAAP,KAAyB,QAA7B,EAAuC;AACrC;AACA;AACA;AACAR,IAAAA,iBAAiB,CAACQ,aAAlB,GAAkCN,IAAI,CAACC,KAAL,CAAWK,aAAa,GAAG,IAA3B,CAAlC;AACD;;AAED,MAAIC,MAAM,GAAGoB,YAAY,CAAC,QAAD,CAAzB;;AACA,MAAI,OAAOpB,MAAP,KAAkB,QAAtB,EAAgC;AAC9BT,IAAAA,iBAAiB,CAACS,MAAlB,GAA2BP,IAAI,CAACC,KAAL,CAAWM,MAAM,GAAG,IAApB,CAA3B;AACD;;AAED,MAAIQ,aAAa,GAAGY,YAAY,CAAC,eAAD,CAAhC;;AACA,MAAI,OAAOZ,aAAP,KAAyB,QAA7B,EAAuC;AACrCjB,IAAAA,iBAAiB,CAACiB,aAAlB,GAAkCf,IAAI,CAACC,KAAL,CAAWc,aAAX,CAAlC;AACD;;AAED,MAAIsB,aAAa,GAAGV,YAAY,CAAC,eAAD,CAAhC;;AACA,MAAI,OAAOU,aAAP,KAAyB,QAA7B,EAAuC;AACrCvC,IAAAA,iBAAiB,CAACuC,aAAlB,GAAkCA,aAAlC;AACD;;AAED,MAAIG,eAAe,GAAGb,YAAY,CAAC,iBAAD,CAAlC;;AACA,MAAI,OAAOa,eAAP,KAA2B,QAA/B,EAAyC;AACvC1C,IAAAA,iBAAiB,CAAC0C,eAAlB,GAAoCA,eAApC;AACD;;AAED,MAAIxB,iBAAiB,GAAGW,YAAY,CAAC,eAAD,CAApC;;AACA,MAAI,OAAOX,iBAAP,KAA6B,QAAjC,EAA2C;AACzClB,IAAAA,iBAAiB,CAACkB,iBAAlB,GAAsChB,IAAI,CAACC,KAAL,CAAWe,iBAAX,CAAtC;AACD;;AAED,MAAI6B,oBAAoB,GAAGlB,YAAY,CAAC,sBAAD,CAAvC;;AACA,MAAI,OAAOkB,oBAAP,KAAgC,QAApC,EAA8C;AAC5C/C,IAAAA,iBAAiB,CAACgD,oBAAlB,GAAyCD,oBAAzC;AACD;;AAED,MAAIE,eAAe,GAAGpB,YAAY,CAAC,iBAAD,CAAlC;;AACA,MAAI,OAAOoB,eAAP,KAA2B,QAA/B,EAAyC;AACvCjD,IAAAA,iBAAiB,CAACiD,eAAlB,GAAoCA,eAApC;AACD;;AAED,MAAIC,aAAa,GAAGrB,YAAY,CAAC,eAAD,CAAhC;;AACA,MAAI,OAAOqB,aAAP,KAAyB,QAA7B,EAAuC;AACrClD,IAAAA,iBAAiB,CAACkD,aAAlB,GAAkCA,aAAlC;AACD;;AAED,MAAIC,yBAAyB,GAAGtB,YAAY,CAAC,2BAAD,CAA5C;;AACA,MAAI,OAAOsB,yBAAP,KAAqC,QAAzC,EAAmD;AACjDnD,IAAAA,iBAAiB,CAACmD,yBAAlB,GAA8CA,yBAA9C;AACD;;AAED,MAAIC,eAAe,GAAGvB,YAAY,CAAC,iBAAD,CAAlC;;AACA,MAAI,OAAOuB,eAAP,KAA2B,QAA/B,EAAyC;AACvCpD,IAAAA,iBAAiB,CAACoD,eAAlB,GAAoCA,eAApC;AACD;;AAED,MAAIC,aAAa,GAAGxB,YAAY,CAAC,eAAD,CAAhC;;AACA,MAAI,OAAOwB,aAAP,KAAyB,QAA7B,EAAuC;AACrCrD,IAAAA,iBAAiB,CAACqD,aAAlB,GAAkCA,aAAlC;AACD;;AAED,MAAIC,iBAAiB,GAAGzB,YAAY,CAAC,mBAAD,CAApC;;AACA,MAAI,OAAOyB,iBAAP,KAA6B,QAAjC,EAA2C;AACzCtD,IAAAA,iBAAiB,CAACsD,iBAAlB,GAAsCA,iBAAtC;AACD;;AAED,MAAIC,wBAAwB,GAAG1B,YAAY,CAAC,0BAAD,CAA3C;;AACA,MAAI,OAAO0B,wBAAP,KAAoC,QAAxC,EAAkD;AAChDvD,IAAAA,iBAAiB,CAACuD,wBAAlB,GAA6CA,wBAA7C;AACD;;AAED,SAAOvD,iBAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA4D,MAAM,CAACC,OAAP,GAAiB1J,QAAjB","sourcesContent":["'use strict';\n\nvar flatMap = require('./util').flatMap;\nvar guessBrowser = require('./util').guessBrowser;\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\n\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\n\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\n\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n  return _getStats(peerConnection, options);\n}\n\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n\n  var trackStatsPromises = flatMap([\n    [localAudioTracks, 'localAudioTrackStats', false],\n    [localVideoTracks, 'localVideoTrackStats', false],\n    [remoteAudioTracks, 'remoteAudioTrackStats', true],\n    [remoteVideoTracks, 'remoteVideoTrackStats', true]\n  ], function(triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function(track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function(trackStatsArray) {\n        trackStatsArray.forEach(function(trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n\n  return Promise.all(trackStatsPromises).then(function() {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function(activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome\n    || typeof options.testForSafari  !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(\n      standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  var standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', type: 'string' },\n    { key: 'port', type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\n      report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type\n        ? activeLocalCandidateStats[keyInfo.key]\n        : keyInfo.key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type\n        ? activeRemoteCandidateStats[keyInfo.key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string', fixup: function(state) { return state === 'inprogress' ? 'in-progress' : state; } },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce(function(report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n      ? (keyInfo.fixup ? keyInfo.fixup(activeCandidatePairStats[keyInfo.key]) : activeCandidatePairStats[keyInfo.key])\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function(stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n\n  var standardizedCandidateStatsKeys = [\n    { key: 'candidateType', type: 'string' },\n    { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\n    { key: 'port', ffKeys: ['portNumber'], type: 'number' },\n    { key: 'priority', type: 'number' },\n    { key: 'protocol', ffKeys: ['transport'], type: 'string' },\n    { key: 'url', type: 'string' }\n  ];\n\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n    { key: 'deleted', type: 'boolean' },\n    { key: 'relayProtocol', type: 'string' }\n  ]);\n\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n    ? standardizedLocalCandidateStatsKeys.reduce(function(report, keyInfo) {\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\n        return key in activeLocalCandidateStats;\n      }) || keyInfo.key;\n      report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type\n        ? key === 'candidateType'\n          ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key]\n          : activeLocalCandidateStats[key]\n        : key === 'deleted' ? false : null;\n      return report;\n    }, {})\n    : null;\n\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n    ? standardizedCandidateStatsKeys.reduce(function(report, keyInfo) {\n      var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function(key) {\n        return key in activeRemoteCandidateStats;\n      }) || keyInfo.key;\n      report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type\n        ? key === 'candidateType'\n          ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key]\n          : activeRemoteCandidateStats[key]\n        : null;\n      return report;\n    }, {})\n    : null;\n\n  return [\n    { key: 'availableIncomingBitrate', type: 'number' },\n    { key: 'availableOutgoingBitrate', type: 'number' },\n    { key: 'bytesReceived', type: 'number' },\n    { key: 'bytesSent', type: 'number' },\n    { key: 'consentRequestsSent', type: 'number' },\n    { key: 'currentRoundTripTime', type: 'number' },\n    { key: 'lastPacketReceivedTimestamp', type: 'number' },\n    { key: 'lastPacketSentTimestamp', type: 'number' },\n    { key: 'nominated', type: 'boolean' },\n    { key: 'priority', type: 'number' },\n    { key: 'readable', type: 'boolean' },\n    { key: 'requestsReceived', type: 'number' },\n    { key: 'requestsSent', type: 'number' },\n    { key: 'responsesReceived', type: 'number' },\n    { key: 'responsesSent', type: 'number' },\n    { key: 'retransmissionsReceived', type: 'number' },\n    { key: 'retransmissionsSent', type: 'number' },\n    { key: 'state', type: 'string' },\n    { key: 'totalRoundTripTime', type: 'number' },\n    { key: 'transportId', type: 'string' },\n    { key: 'writable', type: 'boolean' }\n  ].reduce(function(report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n      ? activeCandidatePairStats[keyInfo.key]\n      : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function(senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function(track) {\n      return track && track.kind === kind;\n    });\n  }\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function(stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n  if (typeof options.testForFirefox  !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n  if (typeof options.testForSafari  !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari  !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    }\n    // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n    return Promise.reject(new Error([\n      'getStats() is not supported on this version of Safari',\n      'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\n    ].join(' ')));\n  }\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function(resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function(response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n    peerConnection.getStats(track).then(function(response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function(resolve, reject) {\n    peerConnection.getStats(track).then(function(response) {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function(report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function(stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null;\n\n  // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n  var outbound = [];\n\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n\n  response.forEach(function(stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n      case 'track':\n        track = stat;\n        break;\n      case 'codec':\n        codec = stat;\n        break;\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n\n  var isRemote = track && track.remoteSource;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(function(source) {\n    var standardizedStats = {};\n    var statSources = [\n      source, // local rtp stats\n      track,\n      codec,\n      remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null, // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function(statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    var ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n\n    var mimeType = getStatValue('mimeType');\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    var roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    var jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    var frameWidth = getStatValue('frameWidth');\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n      }\n    }\n\n    var frameHeight = getStatValue('frameHeight');\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n      }\n    }\n\n    var framesPerSecond = getStatValue('framesPerSecond');\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats.frameRateSent = framesPerSecond;\n    }\n\n    var bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    var bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    var packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    var packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    var packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    var audioLevel = getStatValue('audioLevel');\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    var framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    var framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n\n  return stats;\n}\n\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n\n  var inbound = null;\n  var outbound = null;\n\n  // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n  response.forEach(function(stat) {\n    if (stat.isRemote) {\n      return;\n    }\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n\n  var ssrc = getStatValue('ssrc');\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  var jitter = getStatValue('jitter');\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  var framesEncoded = getStatValue('framesEncoded');\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  var framesDecoded = getStatValue('framesDecoded');\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\nmodule.exports = getStats;\n"]},"metadata":{},"sourceType":"script"}