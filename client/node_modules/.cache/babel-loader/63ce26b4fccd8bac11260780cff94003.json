{"ast":null,"code":"'use strict';\n/**\n * A {@link Timeout} represents a resettable and clearable timeout.\n */\n\nvar Timeout = function () {\n  /**\n   * Construct a {@link Timeout}.\n   * @param {function} fn - Function to call\n   * @param {number} delay - Delay in milliseconds\n   * @param {boolean} [autoStart=true] - If true, then start the {@link Timeout}.\n   */\n  function Timeout(fn, delay, autoStart) {\n    if (autoStart === void 0) {\n      autoStart = true;\n    }\n\n    Object.defineProperties(this, {\n      _delay: {\n        value: delay,\n        writable: true\n      },\n      _fn: {\n        value: fn\n      },\n      _timeout: {\n        value: null,\n        writable: true\n      }\n    });\n\n    if (autoStart) {\n      this.start();\n    }\n  }\n\n  Object.defineProperty(Timeout.prototype, \"delay\", {\n    /**\n     * The {@link Timeout} delay in milliseconds.\n     * @property {number}\n     */\n    get: function get() {\n      return this._delay;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Timeout.prototype, \"isSet\", {\n    /**\n     * Whether the {@link Timeout} is set.\n     * @property {boolean}\n     */\n    get: function get() {\n      return !!this._timeout;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Update the {@link Timeout} delay.\n   * @param {number} delay\n   * @returns {void}\n   */\n\n  Timeout.prototype.setDelay = function (delay) {\n    this._delay = delay;\n  };\n  /**\n   * Start the {@link Timeout}, if not already started.\n   * @returns {void}\n   */\n\n\n  Timeout.prototype.start = function () {\n    var _this = this;\n\n    if (!this.isSet) {\n      this._timeout = setTimeout(function () {\n        var fn = _this._fn;\n\n        _this.clear();\n\n        fn();\n      }, this._delay);\n    }\n  };\n  /**\n   * Clear the {@link Timeout}.\n   * @returns {void}\n   */\n\n\n  Timeout.prototype.clear = function () {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n  };\n  /**\n   * Reset the {@link Timeout}.\n   * @returns {void}\n   */\n\n\n  Timeout.prototype.reset = function () {\n    this.clear();\n    this.start();\n  };\n\n  return Timeout;\n}();\n\nmodule.exports = Timeout;","map":{"version":3,"sources":["../../lib/util/timeout.js"],"names":[],"mappings":"AAAA;AAEA;;AAEG;;AACH,IAAA,OAAA,GAAA,YAAA;AACE;;;;;AAKG;AACH,WAAA,OAAA,CAAY,EAAZ,EAAgB,KAAhB,EAAuB,SAAvB,EAAuC;AAAhB,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,IAAA;AAAgB;;AACrC,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,MAAM,EAAE;AACN,QAAA,KAAK,EAAE,KADD;AAEN,QAAA,QAAQ,EAAE;AAFJ,OADoB;AAK5B,MAAA,GAAG,EAAE;AACH,QAAA,KAAK,EAAE;AADJ,OALuB;AAQ5B,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAE,IADC;AAER,QAAA,QAAQ,EAAE;AAFF;AARkB,KAA9B;;AAcA,QAAI,SAAJ,EAAe;AACb,WAAK,KAAL;AACD;AACF;;AAMD,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAJT;;;AAGG;SACH,eAAA;AACE,aAAO,KAAK,MAAZ;AACD,KAFQ;qBAAA;;AAAA,GAAT;AAQA,EAAA,MAAA,CAAA,cAAA,CAAI,OAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAJT;;;AAGG;SACH,eAAA;AACE,aAAO,CAAC,CAAC,KAAK,QAAd;AACD,KAFQ;qBAAA;;AAAA,GAAT;AAIA;;;;AAIG;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAc;AACZ,SAAK,MAAL,GAAc,KAAd;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,CAAC,KAAK,KAAV,EAAiB;AACf,WAAK,QAAL,GAAgB,UAAU,CAAC,YAAA;AACzB,YAAM,EAAE,GAAG,KAAI,CAAC,GAAhB;;AACA,QAAA,KAAI,CAAC,KAAL;;AACA,QAAA,EAAE;AACH,OAJyB,EAIvB,KAAK,MAJkB,CAA1B;AAKD;AACF,GARD;AAUA;;;AAGG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,IAAA,YAAY,CAAC,KAAK,QAAN,CAAZ;AACA,SAAK,QAAL,GAAgB,IAAhB;AACD,GAHD;AAKA;;;AAGG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,KAAL;AACA,SAAK,KAAL;AACD,GAHD;;AAIF,SAAA,OAAA;AAAC,CAnFD,EAAA;;AAqFA,MAAM,CAAC,OAAP,GAAiB,OAAjB","sourceRoot":"","sourcesContent":["'use strict';\n/**\n * A {@link Timeout} represents a resettable and clearable timeout.\n */\nvar Timeout = /** @class */ (function () {\n    /**\n     * Construct a {@link Timeout}.\n     * @param {function} fn - Function to call\n     * @param {number} delay - Delay in milliseconds\n     * @param {boolean} [autoStart=true] - If true, then start the {@link Timeout}.\n     */\n    function Timeout(fn, delay, autoStart) {\n        if (autoStart === void 0) { autoStart = true; }\n        Object.defineProperties(this, {\n            _delay: {\n                value: delay,\n                writable: true\n            },\n            _fn: {\n                value: fn\n            },\n            _timeout: {\n                value: null,\n                writable: true\n            }\n        });\n        if (autoStart) {\n            this.start();\n        }\n    }\n    Object.defineProperty(Timeout.prototype, \"delay\", {\n        /**\n         * The {@link Timeout} delay in milliseconds.\n         * @property {number}\n         */\n        get: function () {\n            return this._delay;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Timeout.prototype, \"isSet\", {\n        /**\n         * Whether the {@link Timeout} is set.\n         * @property {boolean}\n         */\n        get: function () {\n            return !!this._timeout;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Update the {@link Timeout} delay.\n     * @param {number} delay\n     * @returns {void}\n     */\n    Timeout.prototype.setDelay = function (delay) {\n        this._delay = delay;\n    };\n    /**\n     * Start the {@link Timeout}, if not already started.\n     * @returns {void}\n     */\n    Timeout.prototype.start = function () {\n        var _this = this;\n        if (!this.isSet) {\n            this._timeout = setTimeout(function () {\n                var fn = _this._fn;\n                _this.clear();\n                fn();\n            }, this._delay);\n        }\n    };\n    /**\n     * Clear the {@link Timeout}.\n     * @returns {void}\n     */\n    Timeout.prototype.clear = function () {\n        clearTimeout(this._timeout);\n        this._timeout = null;\n    };\n    /**\n     * Reset the {@link Timeout}.\n     * @returns {void}\n     */\n    Timeout.prototype.reset = function () {\n        this.clear();\n        this.start();\n    };\n    return Timeout;\n}());\nmodule.exports = Timeout;\n//# sourceMappingURL=timeout.js.map"]},"metadata":{},"sourceType":"script"}