{"ast":null,"code":"/* globals navigator */\n'use strict';\n/**\n * This function is very similar to <code>navigator.mediaDevices.getUserMedia</code>\n * except that if no MediaStreamConstraints are provided, then bot audio and video\n * are requested.\n * @function getUserMedia\n * @param {MediaStreamConstraints} [constraints={audio:true,video:true}] - the\n *   MediaStreamConstraints object specifying what kind of MediaStream to\n *   request from the browser (by default both audio and video)\n * @returns Promise<MediaStream>\n */\n\nfunction getUserMedia(constraints) {\n  if (typeof navigator === 'object' && typeof navigator.mediaDevices === 'object' && typeof navigator.mediaDevices.getUserMedia === 'function') {\n    constraints = constraints || {\n      audio: true,\n      video: true\n    };\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  return Promise.reject(new Error('getUserMedia is not supported'));\n}\n\nmodule.exports = getUserMedia;","map":{"version":3,"sources":["/Users/javierjimenez/cuemeinDeploy/capstone/client/node_modules/@twilio/webrtc/lib/getusermedia.js"],"names":["getUserMedia","constraints","navigator","mediaDevices","audio","video","Promise","reject","Error","module","exports"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBC,WAAtB,EAAmC;AACjC,MAAI,OAAOC,SAAP,KAAqB,QAArB,IACC,OAAOA,SAAS,CAACC,YAAjB,KAAkC,QADnC,IAEC,OAAOD,SAAS,CAACC,YAAV,CAAuBH,YAA9B,KAA+C,UAFpD,EAEgE;AAC9DC,IAAAA,WAAW,GAAGA,WAAW,IAAI;AAAEG,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAA7B;AACA,WAAOH,SAAS,CAACC,YAAV,CAAuBH,YAAvB,CAAoCC,WAApC,CAAP;AACD;;AACD,SAAOK,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBV,YAAjB","sourcesContent":["/* globals navigator */\n'use strict';\n\n/**\n * This function is very similar to <code>navigator.mediaDevices.getUserMedia</code>\n * except that if no MediaStreamConstraints are provided, then bot audio and video\n * are requested.\n * @function getUserMedia\n * @param {MediaStreamConstraints} [constraints={audio:true,video:true}] - the\n *   MediaStreamConstraints object specifying what kind of MediaStream to\n *   request from the browser (by default both audio and video)\n * @returns Promise<MediaStream>\n */\nfunction getUserMedia(constraints) {\n  if (typeof navigator === 'object'\n    && typeof navigator.mediaDevices === 'object'\n    && typeof navigator.mediaDevices.getUserMedia === 'function') {\n    constraints = constraints || { audio: true, video: true };\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n  return Promise.reject(new Error('getUserMedia is not supported'));\n}\n\nmodule.exports = getUserMedia;\n"]},"metadata":{},"sourceType":"script"}