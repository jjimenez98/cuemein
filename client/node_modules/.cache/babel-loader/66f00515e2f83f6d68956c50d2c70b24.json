{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\n\nvar _a = require('./util'),\n    asLocalTrack = _a.asLocalTrack,\n    asLocalTrackPublication = _a.asLocalTrackPublication,\n    trackClass = _a.trackClass;\n\nvar _b = require('./util/constants'),\n    E = _b.typeErrors,\n    trackPriority = _b.trackPriority;\n\nvar validateLocalTrack = require('./util/validate').validateLocalTrack;\n\nvar _c = require('./media/track/es5'),\n    LocalAudioTrack = _c.LocalAudioTrack,\n    LocalDataTrack = _c.LocalDataTrack,\n    LocalVideoTrack = _c.LocalVideoTrack;\n\nvar LocalAudioTrackPublication = require('./media/track/localaudiotrackpublication');\n\nvar LocalDataTrackPublication = require('./media/track/localdatatrackpublication');\n\nvar LocalVideoTrackPublication = require('./media/track/localvideotrackpublication');\n\nvar Participant = require('./participant');\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTracks -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTracks -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.SID, LocalTrackPublication>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTracks -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {string} signalingRegion - The geographical region of the\n *     signaling edge the {@link LocalParticipant} is connected to.\n *\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n */\n\n\nvar LocalParticipant = function (_super) {\n  __extends(LocalParticipant, _super);\n  /**\n   * Construct a {@link LocalParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {Array<LocalTrack>} localTracks\n   * @param {Object} options\n   */\n\n\n  function LocalParticipant(signaling, localTracks, options) {\n    var _this = this;\n\n    options = Object.assign({\n      LocalAudioTrack: LocalAudioTrack,\n      LocalVideoTrack: LocalVideoTrack,\n      LocalDataTrack: LocalDataTrack,\n      MediaStreamTrack: MediaStreamTrack,\n      LocalAudioTrackPublication: LocalAudioTrackPublication,\n      LocalVideoTrackPublication: LocalVideoTrackPublication,\n      LocalDataTrackPublication: LocalDataTrackPublication,\n      shouldStopLocalTracks: false,\n      tracks: localTracks\n    }, options);\n    var tracksToStop = options.shouldStopLocalTracks ? new Set(localTracks.filter(function (localTrack) {\n      return localTrack.kind !== 'data';\n    })) : new Set();\n    _this = _super.call(this, signaling, options) || this;\n    Object.defineProperties(_this, {\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _LocalAudioTrack: {\n        value: options.LocalAudioTrack\n      },\n      _LocalDataTrack: {\n        value: options.LocalDataTrack\n      },\n      _LocalVideoTrack: {\n        value: options.LocalVideoTrack\n      },\n      _MediaStreamTrack: {\n        value: options.MediaStreamTrack\n      },\n      _LocalAudioTrackPublication: {\n        value: options.LocalAudioTrackPublication\n      },\n      _LocalDataTrackPublication: {\n        value: options.LocalDataTrackPublication\n      },\n      _LocalVideoTrackPublication: {\n        value: options.LocalVideoTrackPublication\n      },\n      _tracksToStop: {\n        value: tracksToStop\n      },\n      signalingRegion: {\n        enumerable: true,\n        get: function get() {\n          return signaling.signalingRegion;\n        }\n      }\n    });\n\n    _this._handleTrackSignalingEvents();\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @param {Track.Priority} priority\n   * @returns {?LocalTrack}\n   */\n\n\n  LocalParticipant.prototype._addTrack = function (track, id, priority) {\n    var addedTrack = _super.prototype._addTrack.call(this, track, id);\n\n    if (addedTrack && this.state !== 'disconnected') {\n      this._addLocalTrack(track, priority);\n    }\n\n    return addedTrack;\n  };\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.Priority} priority\n   * @returns {void}\n   */\n\n\n  LocalParticipant.prototype._addLocalTrack = function (track, priority) {\n    this._signaling.addTrack(track._trackSender, track.name, priority);\n\n    this._log.info(\"Added a new \" + trackClass(track, true) + \":\", track.id);\n\n    this._log.debug(trackClass(track, true) + \":\", track);\n  };\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @returns {?LocalTrack}\n   */\n\n\n  LocalParticipant.prototype._removeTrack = function (track, id) {\n    var removedTrack = _super.prototype._removeTrack.call(this, track, id);\n\n    if (removedTrack && this.state !== 'disconnected') {\n      this._signaling.removeTrack(track._trackSender);\n\n      this._log.info(\"Removed a \" + trackClass(track, true) + \":\", track.id);\n\n      this._log.debug(trackClass(track, true) + \":\", track);\n    }\n\n    return removedTrack;\n  };\n  /**\n   * Get the {@link LocalTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n\n\n  LocalParticipant.prototype._getTrackEvents = function () {\n    return _super.prototype._getTrackEvents.call(this).concat([['disabled', 'trackDisabled'], ['enabled', 'trackEnabled'], ['stopped', 'trackStopped']]);\n  };\n\n  LocalParticipant.prototype.toString = function () {\n    return \"[LocalParticipant #\" + this._instanceId + (this.sid ? \": \" + this.sid : '') + \"]\";\n  };\n  /**\n   * @private\n   */\n\n\n  LocalParticipant.prototype._handleTrackSignalingEvents = function () {\n    var _this = this;\n\n    var log = this._log;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    var signaling = this._signaling;\n\n    function localTrackDisabled(localTrack) {\n      var trackSignaling = signaling.getPublication(localTrack._trackSender);\n\n      if (trackSignaling) {\n        trackSignaling.disable();\n        log.debug(\"Disabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n      }\n    }\n\n    function localTrackEnabled(localTrack) {\n      var trackSignaling = signaling.getPublication(localTrack._trackSender);\n\n      if (trackSignaling) {\n        trackSignaling.enable();\n        log.debug(\"Enabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n      }\n    }\n\n    function localTrackStopped(localTrack) {\n      // NOTE(mroberts): We shouldn't need to check for `stop`, since DataTracks\n      // do not emit \"stopped\".\n      var trackSignaling = signaling.getPublication(localTrack._trackSender);\n\n      if (trackSignaling) {\n        trackSignaling.stop();\n      }\n\n      return trackSignaling;\n    }\n\n    this.on('trackDisabled', localTrackDisabled);\n    this.on('trackEnabled', localTrackEnabled);\n    this.on('trackStopped', localTrackStopped);\n\n    this._tracks.forEach(function (track) {\n      _this._addLocalTrack(track, trackPriority.PRIORITY_STANDARD);\n\n      _this._getOrCreateLocalTrackPublication(track).catch(function (error) {\n        // Just log a warning for now.\n        log.warn(\"Failed to get or create LocalTrackPublication for \" + track + \":\", error);\n      });\n    });\n\n    var self = this;\n    signaling.on('stateChanged', function stateChanged(state) {\n      log.debug('Transitioned to state:', state);\n\n      if (state === 'disconnected') {\n        log.debug('Removing LocalTrack event listeners');\n        signaling.removeListener('stateChanged', stateChanged);\n        self.removeListener('trackDisabled', localTrackDisabled);\n        self.removeListener('trackEnabled', localTrackEnabled);\n        self.removeListener('trackStopped', localTrackStopped); // NOTE(mmalavalli): Remove the stale MediaTrackSender clones so that we\n        // do not call replaceTrack() on their RTCRtpSenders.\n\n        self._tracks.forEach(function (track) {\n          var trackSignaling = localTrackStopped(track);\n\n          if (trackSignaling) {\n            track._trackSender.removeClone(trackSignaling._trackTransceiver);\n          }\n        });\n\n        log.info(\"LocalParticipant disconnected. Stopping \" + self._tracksToStop.size + \" automatically-acquired LocalTracks\");\n\n        self._tracksToStop.forEach(function (track) {\n          track.stop();\n        });\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected'); // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n\n        setTimeout(function () {\n          return self.emit('reconnected');\n        }, 0);\n      }\n    });\n  };\n  /**\n   * @private\n   * @param {LocalTrack} localTrack\n   * @returns {Promise<LocalTrackPublication>}\n   */\n\n\n  LocalParticipant.prototype._getOrCreateLocalTrackPublication = function (localTrack) {\n    var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n\n    if (localTrackPublication) {\n      return Promise.resolve(localTrackPublication);\n    }\n\n    var log = this._log;\n    var self = this;\n\n    var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n\n    if (!trackSignaling) {\n      return Promise.reject(new Error(\"Unexpected error: The \" + localTrack + \" cannot be published\"));\n    }\n\n    function unpublish(publication) {\n      self.unpublishTrack(publication.track);\n    }\n\n    return new Promise(function (resolve, reject) {\n      function updated() {\n        var error = trackSignaling.error;\n\n        if (error) {\n          trackSignaling.removeListener('updated', updated);\n          log.warn(\"Failed to publish the \" + trackClass(localTrack, true) + \": \" + error.message);\n\n          self._removeTrack(localTrack, localTrack.id);\n\n          setTimeout(function () {\n            self.emit('trackPublicationFailed', error, localTrack);\n          });\n          reject(error);\n          return;\n        }\n\n        if (!self._tracks.has(localTrack.id)) {\n          trackSignaling.removeListener('updated', updated);\n          reject(new Error(\"The \" + localTrack + \" was unpublished\"));\n          return;\n        }\n\n        var sid = trackSignaling.sid;\n\n        if (!sid) {\n          return;\n        }\n\n        trackSignaling.removeListener('updated', updated);\n        var options = {\n          log: log,\n          LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n          LocalDataTrackPublication: self._LocalDataTrackPublication,\n          LocalVideoTrackPublication: self._LocalVideoTrackPublication\n        };\n        localTrackPublication = getTrackPublication(self.tracks, localTrack);\n\n        if (!localTrackPublication) {\n          localTrackPublication = asLocalTrackPublication(localTrack, trackSignaling, unpublish, options);\n\n          self._addTrackPublication(localTrackPublication);\n        }\n\n        var state = self._signaling.state;\n\n        if (state === 'connected' || state === 'connecting') {\n          if (localTrack._processorEventObserver) {\n            localTrack._processorEventObserver.on('event', function (event) {\n              self._eventObserver.emit('event', {\n                name: event.name,\n                payload: event.data,\n                group: 'video-processor',\n                level: 'info'\n              });\n            });\n          } // NOTE(csantos): For tracks created before joining a room or already joined but about to publish it\n\n\n          if (localTrack.processedTrack) {\n            localTrack._captureFrames();\n\n            localTrack._setSenderMediaStreamTrack(true);\n          }\n        }\n\n        if (state === 'connected') {\n          setTimeout(function () {\n            self.emit('trackPublished', localTrackPublication);\n          });\n        }\n\n        resolve(localTrackPublication);\n      }\n\n      trackSignaling.on('updated', updated);\n    });\n  };\n  /**\n   * Publishes a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n   * @param {LocalTrackPublishOptions} [options] - The {@link LocalTrackPublishOptions}\n   *   for publishing the {@link LocalTrack}\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if either the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return Video.createLocalVideoTrack({\n   *     name: 'camera'\n   *   }).then(function(localVideoTrack) {\n   *     return room.localParticipant.publishTrack(localVideoTrack, {\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n  */\n\n  /**\n  * Publishes a MediaStreamTrack to the {@link Room}.\n  * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n  *   to publish; if a corresponding {@link LocalAudioTrack} or\n  *   {@link LocalVideoTrack} has not yet been published, this method will\n  *   construct one\n  * @param {MediaStreamTrackPublishOptions} [options] - The options for publishing\n  *   the MediaStreamTrack\n  * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n  *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n  *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n  *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n  *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n  * @throws {TypeError}\n  * @throws {RangeError}\n  * @example\n  * var Video = require('twilio-video');\n  *\n  * Video.connect(token, {\n  *   name: 'my-cool-room',\n  *   audio: true\n  * }).then(function(room) {\n  *   return navigator.mediaDevices.getUserMedia({\n  *     video: true\n  *   }).then(function(mediaStream) {\n  *     var mediaStreamTrack = mediaStream.getTracks()[0];\n  *     return room.localParticipant.publishTrack(mediaStreamTrack, {\n  *       name: 'camera',\n  *       priority: 'high'\n  *     });\n  *   });\n  * }).then(function(publication) {\n  *   console.log('The LocalTrack \"' + publication.trackName\n  *     + '\" was successfully published with priority \"'\n  *     * publication.priority + '\"');\n  * });\n  */\n\n\n  LocalParticipant.prototype.publishTrack = function (localTrackOrMediaStreamTrack, options) {\n    var trackPublication = getTrackPublication(this.tracks, localTrackOrMediaStreamTrack);\n\n    if (trackPublication) {\n      return Promise.resolve(trackPublication);\n    }\n\n    options = Object.assign({\n      log: this._log,\n      priority: trackPriority.PRIORITY_STANDARD,\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    }, options);\n    var localTrack;\n\n    try {\n      localTrack = asLocalTrack(localTrackOrMediaStreamTrack, options);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    var priorityValues = Object.values(trackPriority);\n\n    if (!priorityValues.includes(options.priority)) {\n      // eslint-disable-next-line new-cap\n      return Promise.reject(E.INVALID_VALUE('LocalTrackPublishOptions.priority', priorityValues));\n    }\n\n    var addedLocalTrack = this._addTrack(localTrack, localTrack.id, options.priority) || this._tracks.get(localTrack.id);\n\n    return this._getOrCreateLocalTrackPublication(addedLocalTrack);\n  };\n  /**\n   * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to publish; for any MediaStreamTracks provided, if a corresponding\n   *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n   *   published, this method will construct one\n   * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n   *   {@link LocalTrackPublication}s if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}s\n   *   along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   */\n\n\n  LocalParticipant.prototype.publishTracks = function (tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n\n    return Promise.all(tracks.map(this.publishTrack, this));\n  };\n\n  LocalParticipant.prototype.setBandwidthProfile = function () {\n    this._log.warn('setBandwidthProfile is not implemented yet and may be available in future versions of twilio-video.js');\n  };\n  /**\n   * Sets the {@link NetworkQualityVerbosity} for the {@link LocalParticipant} and\n   * {@link RemoteParticipant}s. It does nothing if Network Quality is not enabled\n   * while calling {@link connect}.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration - The new\n   *   {@link NetworkQualityConfiguration}; If either or both of the local and\n   *   remote {@link NetworkQualityVerbosity} values are absent, then the corresponding\n   *   existing values are retained\n   * @returns {this}\n   * @example\n   * // Update verbosity levels for both LocalParticipant and RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1,\n   *   remote: 2\n   * });\n   * @example\n   * // Update verbosity level for only the LocalParticipant\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1\n   * });\n   *  @example\n   * // Update verbosity level for only the RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   remote: 2\n   * });\n   */\n\n\n  LocalParticipant.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n    if (typeof networkQualityConfiguration !== 'object' || networkQualityConfiguration === null) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('networkQualityConfiguration', 'NetworkQualityConfiguration');\n    }\n\n    ['local', 'remote'].forEach(function (prop) {\n      if (prop in networkQualityConfiguration && (typeof networkQualityConfiguration[prop] !== 'number' || isNaN(networkQualityConfiguration[prop]))) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE(\"networkQualityConfiguration.\" + prop, 'number');\n      }\n    });\n\n    this._signaling.setNetworkQualityConfiguration(networkQualityConfiguration);\n\n    return this;\n  };\n  /**\n   * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n   * @param {?EncodingParameters} [encodingParameters] - The new\n   *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n   *   If not specified, then the existing bitrate limits are preserved\n   * @returns {this}\n   * @throws {TypeError}\n   */\n\n\n  LocalParticipant.prototype.setParameters = function (encodingParameters) {\n    if (typeof encodingParameters !== 'undefined' && typeof encodingParameters !== 'object') {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('encodingParameters', 'EncodingParameters, null or undefined');\n    }\n\n    if (encodingParameters) {\n      ['maxAudioBitrate', 'maxVideoBitrate'].forEach(function (prop) {\n        if (typeof encodingParameters[prop] !== 'undefined' && typeof encodingParameters[prop] !== 'number' && encodingParameters[prop] !== null) {\n          // eslint-disable-next-line new-cap\n          throw E.INVALID_TYPE(\"encodingParameters.\" + prop, 'number, null or undefined');\n        }\n      });\n    } else if (encodingParameters === null) {\n      encodingParameters = {\n        maxAudioBitrate: null,\n        maxVideoBitrate: null\n      };\n    }\n\n    this._signaling.setParameters(encodingParameters);\n\n    return this;\n  };\n  /**\n   * Stops publishing a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n   *   to stop publishing; if a MediaStreamTrack is provided, this method\n   *   looks up the corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} to stop publishing\n   * @returns {?LocalTrackPublication} - The corresponding\n   *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n   *   published, null otherwise\n   * @throws {TypeError}\n  */\n\n\n  LocalParticipant.prototype.unpublishTrack = function (track) {\n    validateLocalTrack(track, {\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    });\n\n    var localTrack = this._tracks.get(track.id);\n\n    if (!localTrack) {\n      return null;\n    }\n\n    var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n\n    trackSignaling.publishFailed(new Error(\"The \" + localTrack + \" was unpublished\"));\n    localTrack = this._removeTrack(localTrack, localTrack.id);\n\n    if (!localTrack) {\n      return null;\n    }\n\n    var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n\n    if (localTrackPublication) {\n      this._removeTrackPublication(localTrackPublication);\n    }\n\n    return localTrackPublication;\n  };\n  /**\n   * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to stop publishing; for any MediaStreamTracks provided, this method looks\n   *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n   *   stop publishing\n   * @returns {Array<LocalTrackPublication>} - The corresponding\n   *   {@link LocalTrackPublication}s that were successfully unpublished\n   * @throws {TypeError}\n   */\n\n\n  LocalParticipant.prototype.unpublishTracks = function (tracks) {\n    var _this = this;\n\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n\n    return tracks.reduce(function (unpublishedTracks, track) {\n      var unpublishedTrack = _this.unpublishTrack(track);\n\n      return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n    }, []);\n  };\n\n  return LocalParticipant;\n}(Participant);\n/**\n * The {@link LocalParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnected\n */\n\n/**\n * The {@link LocalParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnecting\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information. In a Large Group Room (Maximum Participants greater than 50),\n * this event is raised with a {@link ParticipantMaxTracksExceededError} either\n * when attempting to publish the {@link LocalTrack} will exceed the Maximum Published\n * Tracks limit of 16, or the {@link LocalTrack} is part of a set of {@link LocalTrack}s\n * which along with the published Tracks exceeds 16.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n\n/**\n * A {@link LocalTrack} was successfully published.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or a\n *   <code>0</code> value removes any previously set bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed bitrate\n *   codecs; Based on our tests, Chrome, Firefox and Safari support a bitrate range of\n *   12000 bps to 256000 bps for Opus codec; This parameter has no effect on iSAC, PCMU\n *   and PCMA codecs\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or\n *   a <code>0</code> value removes any previously set bitrate limit; This value is\n *   set as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs; Based on our tests, Chrome, Firefox and Safari all seem to support\n *   an average bitrate range of 20000 bps (20 kbps) to 8000000 bps (8 mbps) for a\n *   720p VideoTrack.\n *   Note: this limit is not applied for screen share tracks published on Chrome.\n */\n\n/**\n * Options for publishing a {@link LocalTrack}.\n * @typedef {object} LocalTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * Options for publishing a {@link MediaStreamTrack}.\n * @typedef {LocalTrackOptions} MediaStreamTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\n\n\nfunction getTrackPublication(trackPublications, track) {\n  return Array.from(trackPublications.values()).find(function (trackPublication) {\n    return trackPublication.track === track || trackPublication.track.mediaStreamTrack === track;\n  }) || null;\n}\n\nmodule.exports = LocalParticipant;","map":{"version":3,"sources":["../lib/localparticipant.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\nvar _a = require('./util'), asLocalTrack = _a.asLocalTrack, asLocalTrackPublication = _a.asLocalTrackPublication, trackClass = _a.trackClass;\nvar _b = require('./util/constants'), E = _b.typeErrors, trackPriority = _b.trackPriority;\nvar validateLocalTrack = require('./util/validate').validateLocalTrack;\nvar _c = require('./media/track/es5'), LocalAudioTrack = _c.LocalAudioTrack, LocalDataTrack = _c.LocalDataTrack, LocalVideoTrack = _c.LocalVideoTrack;\nvar LocalAudioTrackPublication = require('./media/track/localaudiotrackpublication');\nvar LocalDataTrackPublication = require('./media/track/localdatatrackpublication');\nvar LocalVideoTrackPublication = require('./media/track/localvideotrackpublication');\nvar Participant = require('./participant');\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTracks -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTracks -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.SID, LocalTrackPublication>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTracks -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {string} signalingRegion - The geographical region of the\n *     signaling edge the {@link LocalParticipant} is connected to.\n *\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n */\nvar LocalParticipant = /** @class */ (function (_super) {\n    __extends(LocalParticipant, _super);\n    /**\n     * Construct a {@link LocalParticipant}.\n     * @param {ParticipantSignaling} signaling\n     * @param {Array<LocalTrack>} localTracks\n     * @param {Object} options\n     */\n    function LocalParticipant(signaling, localTracks, options) {\n        var _this = this;\n        options = Object.assign({\n            LocalAudioTrack: LocalAudioTrack,\n            LocalVideoTrack: LocalVideoTrack,\n            LocalDataTrack: LocalDataTrack,\n            MediaStreamTrack: MediaStreamTrack,\n            LocalAudioTrackPublication: LocalAudioTrackPublication,\n            LocalVideoTrackPublication: LocalVideoTrackPublication,\n            LocalDataTrackPublication: LocalDataTrackPublication,\n            shouldStopLocalTracks: false,\n            tracks: localTracks\n        }, options);\n        var tracksToStop = options.shouldStopLocalTracks\n            ? new Set(localTracks.filter(function (localTrack) { return localTrack.kind !== 'data'; }))\n            : new Set();\n        _this = _super.call(this, signaling, options) || this;\n        Object.defineProperties(_this, {\n            _eventObserver: {\n                value: options.eventObserver\n            },\n            _LocalAudioTrack: {\n                value: options.LocalAudioTrack\n            },\n            _LocalDataTrack: {\n                value: options.LocalDataTrack\n            },\n            _LocalVideoTrack: {\n                value: options.LocalVideoTrack\n            },\n            _MediaStreamTrack: {\n                value: options.MediaStreamTrack\n            },\n            _LocalAudioTrackPublication: {\n                value: options.LocalAudioTrackPublication\n            },\n            _LocalDataTrackPublication: {\n                value: options.LocalDataTrackPublication\n            },\n            _LocalVideoTrackPublication: {\n                value: options.LocalVideoTrackPublication\n            },\n            _tracksToStop: {\n                value: tracksToStop\n            },\n            signalingRegion: {\n                enumerable: true,\n                get: function () {\n                    return signaling.signalingRegion;\n                }\n            }\n        });\n        _this._handleTrackSignalingEvents();\n        return _this;\n    }\n    /**\n     * @private\n     * @param {LocalTrack} track\n     * @param {Track.ID} id\n     * @param {Track.Priority} priority\n     * @returns {?LocalTrack}\n     */\n    LocalParticipant.prototype._addTrack = function (track, id, priority) {\n        var addedTrack = _super.prototype._addTrack.call(this, track, id);\n        if (addedTrack && this.state !== 'disconnected') {\n            this._addLocalTrack(track, priority);\n        }\n        return addedTrack;\n    };\n    /**\n     * @private\n     * @param {LocalTrack} track\n     * @param {Track.Priority} priority\n     * @returns {void}\n     */\n    LocalParticipant.prototype._addLocalTrack = function (track, priority) {\n        this._signaling.addTrack(track._trackSender, track.name, priority);\n        this._log.info(\"Added a new \" + trackClass(track, true) + \":\", track.id);\n        this._log.debug(trackClass(track, true) + \":\", track);\n    };\n    /**\n     * @private\n     * @param {LocalTrack} track\n     * @param {Track.ID} id\n     * @returns {?LocalTrack}\n     */\n    LocalParticipant.prototype._removeTrack = function (track, id) {\n        var removedTrack = _super.prototype._removeTrack.call(this, track, id);\n        if (removedTrack && this.state !== 'disconnected') {\n            this._signaling.removeTrack(track._trackSender);\n            this._log.info(\"Removed a \" + trackClass(track, true) + \":\", track.id);\n            this._log.debug(trackClass(track, true) + \":\", track);\n        }\n        return removedTrack;\n    };\n    /**\n     * Get the {@link LocalTrack} events to re-emit.\n     * @private\n     * @returns {Array<Array<string>>} events\n     */\n    LocalParticipant.prototype._getTrackEvents = function () {\n        return _super.prototype._getTrackEvents.call(this).concat([\n            ['disabled', 'trackDisabled'],\n            ['enabled', 'trackEnabled'],\n            ['stopped', 'trackStopped']\n        ]);\n    };\n    LocalParticipant.prototype.toString = function () {\n        return \"[LocalParticipant #\" + this._instanceId + (this.sid ? \": \" + this.sid : '') + \"]\";\n    };\n    /**\n     * @private\n     */\n    LocalParticipant.prototype._handleTrackSignalingEvents = function () {\n        var _this = this;\n        var log = this._log;\n        if (this.state === 'disconnected') {\n            return;\n        }\n        var signaling = this._signaling;\n        function localTrackDisabled(localTrack) {\n            var trackSignaling = signaling.getPublication(localTrack._trackSender);\n            if (trackSignaling) {\n                trackSignaling.disable();\n                log.debug(\"Disabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n            }\n        }\n        function localTrackEnabled(localTrack) {\n            var trackSignaling = signaling.getPublication(localTrack._trackSender);\n            if (trackSignaling) {\n                trackSignaling.enable();\n                log.debug(\"Enabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n            }\n        }\n        function localTrackStopped(localTrack) {\n            // NOTE(mroberts): We shouldn't need to check for `stop`, since DataTracks\n            // do not emit \"stopped\".\n            var trackSignaling = signaling.getPublication(localTrack._trackSender);\n            if (trackSignaling) {\n                trackSignaling.stop();\n            }\n            return trackSignaling;\n        }\n        this.on('trackDisabled', localTrackDisabled);\n        this.on('trackEnabled', localTrackEnabled);\n        this.on('trackStopped', localTrackStopped);\n        this._tracks.forEach(function (track) {\n            _this._addLocalTrack(track, trackPriority.PRIORITY_STANDARD);\n            _this._getOrCreateLocalTrackPublication(track).catch(function (error) {\n                // Just log a warning for now.\n                log.warn(\"Failed to get or create LocalTrackPublication for \" + track + \":\", error);\n            });\n        });\n        var self = this;\n        signaling.on('stateChanged', function stateChanged(state) {\n            log.debug('Transitioned to state:', state);\n            if (state === 'disconnected') {\n                log.debug('Removing LocalTrack event listeners');\n                signaling.removeListener('stateChanged', stateChanged);\n                self.removeListener('trackDisabled', localTrackDisabled);\n                self.removeListener('trackEnabled', localTrackEnabled);\n                self.removeListener('trackStopped', localTrackStopped);\n                // NOTE(mmalavalli): Remove the stale MediaTrackSender clones so that we\n                // do not call replaceTrack() on their RTCRtpSenders.\n                self._tracks.forEach(function (track) {\n                    var trackSignaling = localTrackStopped(track);\n                    if (trackSignaling) {\n                        track._trackSender.removeClone(trackSignaling._trackTransceiver);\n                    }\n                });\n                log.info(\"LocalParticipant disconnected. Stopping \" + self._tracksToStop.size + \" automatically-acquired LocalTracks\");\n                self._tracksToStop.forEach(function (track) {\n                    track.stop();\n                });\n            }\n            else if (state === 'connected') {\n                // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n                // successful signaling reconnection, and not a first-time establishment\n                // of the signaling connection.\n                log.info('reconnected');\n                // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n                // Do not signal  public events synchronously with lock held.\n                setTimeout(function () { return self.emit('reconnected'); }, 0);\n            }\n        });\n    };\n    /**\n     * @private\n     * @param {LocalTrack} localTrack\n     * @returns {Promise<LocalTrackPublication>}\n     */\n    LocalParticipant.prototype._getOrCreateLocalTrackPublication = function (localTrack) {\n        var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n        if (localTrackPublication) {\n            return Promise.resolve(localTrackPublication);\n        }\n        var log = this._log;\n        var self = this;\n        var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n        if (!trackSignaling) {\n            return Promise.reject(new Error(\"Unexpected error: The \" + localTrack + \" cannot be published\"));\n        }\n        function unpublish(publication) {\n            self.unpublishTrack(publication.track);\n        }\n        return new Promise(function (resolve, reject) {\n            function updated() {\n                var error = trackSignaling.error;\n                if (error) {\n                    trackSignaling.removeListener('updated', updated);\n                    log.warn(\"Failed to publish the \" + trackClass(localTrack, true) + \": \" + error.message);\n                    self._removeTrack(localTrack, localTrack.id);\n                    setTimeout(function () {\n                        self.emit('trackPublicationFailed', error, localTrack);\n                    });\n                    reject(error);\n                    return;\n                }\n                if (!self._tracks.has(localTrack.id)) {\n                    trackSignaling.removeListener('updated', updated);\n                    reject(new Error(\"The \" + localTrack + \" was unpublished\"));\n                    return;\n                }\n                var sid = trackSignaling.sid;\n                if (!sid) {\n                    return;\n                }\n                trackSignaling.removeListener('updated', updated);\n                var options = {\n                    log: log,\n                    LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n                    LocalDataTrackPublication: self._LocalDataTrackPublication,\n                    LocalVideoTrackPublication: self._LocalVideoTrackPublication\n                };\n                localTrackPublication = getTrackPublication(self.tracks, localTrack);\n                if (!localTrackPublication) {\n                    localTrackPublication = asLocalTrackPublication(localTrack, trackSignaling, unpublish, options);\n                    self._addTrackPublication(localTrackPublication);\n                }\n                var state = self._signaling.state;\n                if (state === 'connected' || state === 'connecting') {\n                    if (localTrack._processorEventObserver) {\n                        localTrack._processorEventObserver.on('event', function (event) {\n                            self._eventObserver.emit('event', {\n                                name: event.name,\n                                payload: event.data,\n                                group: 'video-processor',\n                                level: 'info'\n                            });\n                        });\n                    }\n                    // NOTE(csantos): For tracks created before joining a room or already joined but about to publish it\n                    if (localTrack.processedTrack) {\n                        localTrack._captureFrames();\n                        localTrack._setSenderMediaStreamTrack(true);\n                    }\n                }\n                if (state === 'connected') {\n                    setTimeout(function () {\n                        self.emit('trackPublished', localTrackPublication);\n                    });\n                }\n                resolve(localTrackPublication);\n            }\n            trackSignaling.on('updated', updated);\n        });\n    };\n    /**\n     * Publishes a {@link LocalTrack} to the {@link Room}.\n     * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n     * @param {LocalTrackPublishOptions} [options] - The {@link LocalTrackPublishOptions}\n     *   for publishing the {@link LocalTrack}\n     * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n     *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n     *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n     *   if either the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n     *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n     * @throws {TypeError}\n     * @throws {RangeError}\n     * @example\n     * var Video = require('twilio-video');\n     *\n     * Video.connect(token, {\n     *   name: 'my-cool-room',\n     *   audio: true\n     * }).then(function(room) {\n     *   return Video.createLocalVideoTrack({\n     *     name: 'camera'\n     *   }).then(function(localVideoTrack) {\n     *     return room.localParticipant.publishTrack(localVideoTrack, {\n     *       priority: 'high'\n     *     });\n     *   });\n     * }).then(function(publication) {\n     *   console.log('The LocalTrack \"' + publication.trackName\n     *     + '\" was successfully published with priority \"'\n     *     * publication.priority + '\"');\n     * });\n    */ /**\n     * Publishes a MediaStreamTrack to the {@link Room}.\n     * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n     *   to publish; if a corresponding {@link LocalAudioTrack} or\n     *   {@link LocalVideoTrack} has not yet been published, this method will\n     *   construct one\n     * @param {MediaStreamTrackPublishOptions} [options] - The options for publishing\n     *   the MediaStreamTrack\n     * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n     *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n     *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n     *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n     *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n     * @throws {TypeError}\n     * @throws {RangeError}\n     * @example\n     * var Video = require('twilio-video');\n     *\n     * Video.connect(token, {\n     *   name: 'my-cool-room',\n     *   audio: true\n     * }).then(function(room) {\n     *   return navigator.mediaDevices.getUserMedia({\n     *     video: true\n     *   }).then(function(mediaStream) {\n     *     var mediaStreamTrack = mediaStream.getTracks()[0];\n     *     return room.localParticipant.publishTrack(mediaStreamTrack, {\n     *       name: 'camera',\n     *       priority: 'high'\n     *     });\n     *   });\n     * }).then(function(publication) {\n     *   console.log('The LocalTrack \"' + publication.trackName\n     *     + '\" was successfully published with priority \"'\n     *     * publication.priority + '\"');\n     * });\n     */\n    LocalParticipant.prototype.publishTrack = function (localTrackOrMediaStreamTrack, options) {\n        var trackPublication = getTrackPublication(this.tracks, localTrackOrMediaStreamTrack);\n        if (trackPublication) {\n            return Promise.resolve(trackPublication);\n        }\n        options = Object.assign({\n            log: this._log,\n            priority: trackPriority.PRIORITY_STANDARD,\n            LocalAudioTrack: this._LocalAudioTrack,\n            LocalDataTrack: this._LocalDataTrack,\n            LocalVideoTrack: this._LocalVideoTrack,\n            MediaStreamTrack: this._MediaStreamTrack\n        }, options);\n        var localTrack;\n        try {\n            localTrack = asLocalTrack(localTrackOrMediaStreamTrack, options);\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n        var priorityValues = Object.values(trackPriority);\n        if (!priorityValues.includes(options.priority)) {\n            // eslint-disable-next-line new-cap\n            return Promise.reject(E.INVALID_VALUE('LocalTrackPublishOptions.priority', priorityValues));\n        }\n        var addedLocalTrack = this._addTrack(localTrack, localTrack.id, options.priority)\n            || this._tracks.get(localTrack.id);\n        return this._getOrCreateLocalTrackPublication(addedLocalTrack);\n    };\n    /**\n     * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n     * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n     *   to publish; for any MediaStreamTracks provided, if a corresponding\n     *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n     *   published, this method will construct one\n     * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n     *   {@link LocalTrackPublication}s if successful; In a Large Group Room (Maximum\n     *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n     *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}s\n     *   along with the published Tracks exceeds 16.\n     * @throws {TypeError}\n     */\n    LocalParticipant.prototype.publishTracks = function (tracks) {\n        if (!Array.isArray(tracks)) {\n            // eslint-disable-next-line new-cap\n            throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n        }\n        return Promise.all(tracks.map(this.publishTrack, this));\n    };\n    LocalParticipant.prototype.setBandwidthProfile = function () {\n        this._log.warn('setBandwidthProfile is not implemented yet and may be available in future versions of twilio-video.js');\n    };\n    /**\n     * Sets the {@link NetworkQualityVerbosity} for the {@link LocalParticipant} and\n     * {@link RemoteParticipant}s. It does nothing if Network Quality is not enabled\n     * while calling {@link connect}.\n     * @param {NetworkQualityConfiguration} networkQualityConfiguration - The new\n     *   {@link NetworkQualityConfiguration}; If either or both of the local and\n     *   remote {@link NetworkQualityVerbosity} values are absent, then the corresponding\n     *   existing values are retained\n     * @returns {this}\n     * @example\n     * // Update verbosity levels for both LocalParticipant and RemoteParticipants\n     * localParticipant.setNetworkQualityConfiguration({\n     *   local: 1,\n     *   remote: 2\n     * });\n     * @example\n     * // Update verbosity level for only the LocalParticipant\n     * localParticipant.setNetworkQualityConfiguration({\n     *   local: 1\n     * });\n     *  @example\n     * // Update verbosity level for only the RemoteParticipants\n     * localParticipant.setNetworkQualityConfiguration({\n     *   remote: 2\n     * });\n     */\n    LocalParticipant.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n        if (typeof networkQualityConfiguration !== 'object'\n            || networkQualityConfiguration === null) {\n            // eslint-disable-next-line new-cap\n            throw E.INVALID_TYPE('networkQualityConfiguration', 'NetworkQualityConfiguration');\n        }\n        ['local', 'remote'].forEach(function (prop) {\n            if (prop in networkQualityConfiguration && (typeof networkQualityConfiguration[prop] !== 'number' || isNaN(networkQualityConfiguration[prop]))) {\n                // eslint-disable-next-line new-cap\n                throw E.INVALID_TYPE(\"networkQualityConfiguration.\" + prop, 'number');\n            }\n        });\n        this._signaling.setNetworkQualityConfiguration(networkQualityConfiguration);\n        return this;\n    };\n    /**\n     * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n     * @param {?EncodingParameters} [encodingParameters] - The new\n     *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n     *   If not specified, then the existing bitrate limits are preserved\n     * @returns {this}\n     * @throws {TypeError}\n     */\n    LocalParticipant.prototype.setParameters = function (encodingParameters) {\n        if (typeof encodingParameters !== 'undefined'\n            && typeof encodingParameters !== 'object') {\n            // eslint-disable-next-line new-cap\n            throw E.INVALID_TYPE('encodingParameters', 'EncodingParameters, null or undefined');\n        }\n        if (encodingParameters) {\n            ['maxAudioBitrate', 'maxVideoBitrate'].forEach(function (prop) {\n                if (typeof encodingParameters[prop] !== 'undefined'\n                    && typeof encodingParameters[prop] !== 'number'\n                    && encodingParameters[prop] !== null) {\n                    // eslint-disable-next-line new-cap\n                    throw E.INVALID_TYPE(\"encodingParameters.\" + prop, 'number, null or undefined');\n                }\n            });\n        }\n        else if (encodingParameters === null) {\n            encodingParameters = { maxAudioBitrate: null, maxVideoBitrate: null };\n        }\n        this._signaling.setParameters(encodingParameters);\n        return this;\n    };\n    /**\n     * Stops publishing a {@link LocalTrack} to the {@link Room}.\n     * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n     *   to stop publishing; if a MediaStreamTrack is provided, this method\n     *   looks up the corresponding {@link LocalAudioTrack} or\n     *   {@link LocalVideoTrack} to stop publishing\n     * @returns {?LocalTrackPublication} - The corresponding\n     *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n     *   published, null otherwise\n     * @throws {TypeError}\n    */\n    LocalParticipant.prototype.unpublishTrack = function (track) {\n        validateLocalTrack(track, {\n            LocalAudioTrack: this._LocalAudioTrack,\n            LocalDataTrack: this._LocalDataTrack,\n            LocalVideoTrack: this._LocalVideoTrack,\n            MediaStreamTrack: this._MediaStreamTrack\n        });\n        var localTrack = this._tracks.get(track.id);\n        if (!localTrack) {\n            return null;\n        }\n        var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n        trackSignaling.publishFailed(new Error(\"The \" + localTrack + \" was unpublished\"));\n        localTrack = this._removeTrack(localTrack, localTrack.id);\n        if (!localTrack) {\n            return null;\n        }\n        var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n        if (localTrackPublication) {\n            this._removeTrackPublication(localTrackPublication);\n        }\n        return localTrackPublication;\n    };\n    /**\n     * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n     * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n     *   to stop publishing; for any MediaStreamTracks provided, this method looks\n     *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n     *   stop publishing\n     * @returns {Array<LocalTrackPublication>} - The corresponding\n     *   {@link LocalTrackPublication}s that were successfully unpublished\n     * @throws {TypeError}\n     */\n    LocalParticipant.prototype.unpublishTracks = function (tracks) {\n        var _this = this;\n        if (!Array.isArray(tracks)) {\n            // eslint-disable-next-line new-cap\n            throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n        }\n        return tracks.reduce(function (unpublishedTracks, track) {\n            var unpublishedTrack = _this.unpublishTrack(track);\n            return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n        }, []);\n    };\n    return LocalParticipant;\n}(Participant));\n/**\n * The {@link LocalParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnected\n */\n/**\n * The {@link LocalParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnecting\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information. In a Large Group Room (Maximum Participants greater than 50),\n * this event is raised with a {@link ParticipantMaxTracksExceededError} either\n * when attempting to publish the {@link LocalTrack} will exceed the Maximum Published\n * Tracks limit of 16, or the {@link LocalTrack} is part of a set of {@link LocalTrack}s\n * which along with the published Tracks exceeds 16.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n/**\n * A {@link LocalTrack} was successfully published.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or a\n *   <code>0</code> value removes any previously set bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed bitrate\n *   codecs; Based on our tests, Chrome, Firefox and Safari support a bitrate range of\n *   12000 bps to 256000 bps for Opus codec; This parameter has no effect on iSAC, PCMU\n *   and PCMA codecs\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or\n *   a <code>0</code> value removes any previously set bitrate limit; This value is\n *   set as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs; Based on our tests, Chrome, Firefox and Safari all seem to support\n *   an average bitrate range of 20000 bps (20 kbps) to 8000000 bps (8 mbps) for a\n *   720p VideoTrack.\n *   Note: this limit is not applied for screen share tracks published on Chrome.\n */\n/**\n * Options for publishing a {@link LocalTrack}.\n * @typedef {object} LocalTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n/**\n * Options for publishing a {@link MediaStreamTrack}.\n * @typedef {LocalTrackOptions} MediaStreamTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\nfunction getTrackPublication(trackPublications, track) {\n    return Array.from(trackPublications.values()).find(function (trackPublication) { return trackPublication.track === track\n        || trackPublication.track.mediaStreamTrack === track; }) || null;\n}\nmodule.exports = LocalParticipant;\n//# sourceMappingURL=localparticipant.js.map"]},"metadata":{},"sourceType":"script"}