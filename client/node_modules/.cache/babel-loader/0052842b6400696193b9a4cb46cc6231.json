{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\n\n\nvar AsyncVar = function () {\n  /**\n   * Construct an {@link AsyncVar}.\n   */\n  function AsyncVar() {\n    Object.defineProperties(this, {\n      _deferreds: {\n        value: []\n      },\n      _hasValue: {\n        value: false,\n        writable: true\n      },\n      _value: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Put a value into the {@link AsyncVar}.\n   * @param {T} value\n   * @returns {this}\n   */\n\n\n  AsyncVar.prototype.put = function (value) {\n    this._hasValue = true;\n    this._value = value;\n\n    var deferred = this._deferreds.shift();\n\n    if (deferred) {\n      deferred.resolve(value);\n    }\n\n    return this;\n  };\n  /**\n   * Take the value out of the {@link AsyncVar}.\n   * @returns {Promise<T>}\n   */\n\n\n  AsyncVar.prototype.take = function () {\n    var _this = this;\n\n    if (this._hasValue && !this._deferreds.length) {\n      this._hasValue = false;\n      return Promise.resolve(this._value);\n    }\n\n    var deferred = defer();\n\n    this._deferreds.push(deferred);\n\n    return deferred.promise.then(function (value) {\n      _this._hasValue = false;\n      return value;\n    });\n  };\n\n  return AsyncVar;\n}();\n\nmodule.exports = AsyncVar;","map":{"version":3,"sources":["../../lib/util/asyncvar.js"],"names":[],"mappings":"AAAA;;AAEQ,IAAA,KAAK,GAAK,OAAO,CAAC,IAAD,CAAP,CAAL,KAAL;AAER;;;;;;;AAOG;;;AACH,IAAA,QAAA,GAAA,YAAA;AACE;;AAEG;AACH,WAAA,QAAA,GAAA;AACE,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,UAAU,EAAE;AACV,QAAA,KAAK,EAAE;AADG,OADgB;AAI5B,MAAA,SAAS,EAAE;AACT,QAAA,KAAK,EAAE,KADE;AAET,QAAA,QAAQ,EAAE;AAFD,OAJiB;AAQ5B,MAAA,MAAM,EAAE;AACN,QAAA,KAAK,EAAE,IADD;AAEN,QAAA,QAAQ,EAAE;AAFJ;AARoB,KAA9B;AAaD;AAED;;;;AAIG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAS;AACP,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,MAAL,GAAc,KAAd;;AACA,QAAM,QAAQ,GAAG,KAAK,UAAL,CAAgB,KAAhB,EAAjB;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,OAAT,CAAiB,KAAjB;AACD;;AACD,WAAO,IAAP;AACD,GARD;AAUA;;;AAGG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,SAAL,IAAkB,CAAC,KAAK,UAAL,CAAgB,MAAvC,EAA+C;AAC7C,WAAK,SAAL,GAAiB,KAAjB;AACA,aAAO,OAAO,CAAC,OAAR,CAAgB,KAAK,MAArB,CAAP;AACD;;AACD,QAAM,QAAQ,GAAG,KAAK,EAAtB;;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB;;AACA,WAAO,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,UAAA,KAAA,EAAK;AAChC,MAAA,KAAI,CAAC,SAAL,GAAiB,KAAjB;AACA,aAAO,KAAP;AACD,KAHM,CAAP;AAID,GAXD;;AAYF,SAAA,QAAA;AAAC,CAnDD,EAAA;;AAqDA,MAAM,CAAC,OAAP,GAAiB,QAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar defer = require('./').defer;\n/**\n * An {@link AsyncVar} is an \"asynchronous variable\" which may or may not\n * contain a value of some type T. You can put a value into the {@link AsyncVar}\n * with {@link AsyncVar#put}. Callers can take a value out of the\n * {@link AsyncVar} by queueing up with {@link AsyncVar#take}. N calls to\n * {@link AsyncVar#take} require N calls to {@link AsyncVar#put} to resolve, and\n * they resolve in order.\n */\nvar AsyncVar = /** @class */ (function () {\n    /**\n     * Construct an {@link AsyncVar}.\n     */\n    function AsyncVar() {\n        Object.defineProperties(this, {\n            _deferreds: {\n                value: []\n            },\n            _hasValue: {\n                value: false,\n                writable: true\n            },\n            _value: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    /**\n     * Put a value into the {@link AsyncVar}.\n     * @param {T} value\n     * @returns {this}\n     */\n    AsyncVar.prototype.put = function (value) {\n        this._hasValue = true;\n        this._value = value;\n        var deferred = this._deferreds.shift();\n        if (deferred) {\n            deferred.resolve(value);\n        }\n        return this;\n    };\n    /**\n     * Take the value out of the {@link AsyncVar}.\n     * @returns {Promise<T>}\n     */\n    AsyncVar.prototype.take = function () {\n        var _this = this;\n        if (this._hasValue && !this._deferreds.length) {\n            this._hasValue = false;\n            return Promise.resolve(this._value);\n        }\n        var deferred = defer();\n        this._deferreds.push(deferred);\n        return deferred.promise.then(function (value) {\n            _this._hasValue = false;\n            return value;\n        });\n    };\n    return AsyncVar;\n}());\nmodule.exports = AsyncVar;\n//# sourceMappingURL=asyncvar.js.map"]},"metadata":{},"sourceType":"script"}