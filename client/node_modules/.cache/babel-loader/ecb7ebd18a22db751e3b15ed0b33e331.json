{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar getSdpFormat = require('@twilio/webrtc/lib/util/sdp').getSdpFormat;\n\nvar packageInfo = require('../../../package.json');\n\nvar InsightsPublisher = require('../../util/insightspublisher');\n\nvar NullInsightsPublisher = require('../../util/insightspublisher/null');\n\nvar StateMachine = require('../../statemachine');\n\nvar TwilioConnection = require('../../twilioconnection');\n\nvar DefaultBackoff = require('backoff');\n\nvar reconnectBackoffConfig = require('../../util/constants').reconnectBackoffConfig;\n\nvar Timeout = require('../../util/timeout');\n\nvar _a = require('../../util'),\n    createBandwidthProfilePayload = _a.createBandwidthProfilePayload,\n    createMediaSignalingPayload = _a.createMediaSignalingPayload,\n    createSubscribePayload = _a.createSubscribePayload,\n    getUserAgent = _a.getUserAgent,\n    isNonArrayObject = _a.isNonArrayObject;\n\nvar _b = require('../../util/twilio-video-errors'),\n    createTwilioError = _b.createTwilioError,\n    RoomCompletedError = _b.RoomCompletedError,\n    SignalingConnectionError = _b.SignalingConnectionError,\n    SignalingServerBusyError = _b.SignalingServerBusyError;\n\nvar ICE_VERSION = 1;\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + \".js\";\nvar SDK_VERSION = packageInfo.version;\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\n\nvar TwilioConnectionTransport = function (_super) {\n  __extends(TwilioConnectionTransport, _super);\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n\n\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    var _this = this;\n\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      InsightsPublisher: InsightsPublisher,\n      NullInsightsPublisher: NullInsightsPublisher,\n      TwilioConnection: TwilioConnection,\n      iceServers: null,\n      sdpFormat: getSdpFormat(options.sdpSemantics),\n      trackPriority: true,\n      trackSwitchOff: true,\n      renderHints: true,\n      userAgent: getUserAgent()\n    }, options);\n    _this = _super.call(this, 'connecting', states) || this;\n    var eventPublisherOptions = {};\n\n    if (options.wsServerInsights) {\n      eventPublisherOptions.gateway = options.wsServerInsights;\n    }\n\n    var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n    var eventPublisher = new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions);\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _disconnectEventPublisher: {\n        value: function value() {\n          return eventPublisher.disconnect();\n        }\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _eventObserver: {\n        value: options.eventObserver,\n        writable: false\n      },\n      _renderHints: {\n        value: options.renderHints\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers) ? 'overrode' : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: isNonArrayObject(options.networkQuality) || options.networkQuality\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0,\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: options.Backoff.exponential(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    }); // eslint-disable-next-line no-warning-comments\n    // TODO(mmalavalli): Create and set EventPublisher outside this class, so\n    // that the EventPublisher constructor is no longer a dependency.\n\n    _this._eventObserver.setPublisher(eventPublisher);\n\n    setupTransport(_this);\n\n    _this.once('connected', function (_a) {\n      var sid = _a.sid,\n          participant = _a.participant;\n      eventPublisher.connect(sid, participant.sid);\n    });\n\n    return _this;\n  }\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n\n\n  TwilioConnectionTransport.prototype._createConnectOrSyncOrDisconnectMessage = function () {\n    if (this.state === 'connected') {\n      return null;\n    }\n\n    if (this.state === 'disconnected') {\n      return {\n        session: this._session,\n        type: 'disconnect',\n        version: RSP_VERSION\n      };\n    }\n\n    var type = {\n      connecting: 'connect',\n      syncing: 'sync'\n    }[this.state];\n    var message = {\n      name: this._name,\n      participant: this._localParticipant.getState(),\n      peer_connections: this._peerConnectionManager.getStates(),\n      type: type,\n      version: RSP_VERSION\n    };\n\n    if (message.type === 'connect') {\n      message.ice_servers = this._iceServersStatus;\n      message.publisher = {\n        name: SDK_NAME,\n        sdk_version: SDK_VERSION,\n        user_agent: this._userAgent\n      };\n\n      if (this._bandwidthProfile) {\n        message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n      }\n\n      message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff, this._renderHints);\n      message.subscribe = createSubscribePayload(this._automaticSubscription);\n      var sdpFormat = this._options.sdpFormat;\n\n      if (sdpFormat) {\n        message.format = sdpFormat;\n      }\n\n      message.token = this._accessToken;\n    } else if (message.type === 'sync') {\n      message.session = this._session;\n      message.token = this._accessToken;\n    } else if (message.type === 'update') {\n      message.session = this._session;\n    }\n\n    return message;\n  };\n  /**\n   * Create an \"ice\" message.\n   * @private\n   */\n\n\n  TwilioConnectionTransport.prototype._createIceMessage = function () {\n    return {\n      edge: 'roaming',\n      token: this._accessToken,\n      type: 'ice',\n      version: ICE_VERSION\n    };\n  };\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n\n\n  TwilioConnectionTransport.prototype._sendConnectOrSyncOrDisconnectMessage = function () {\n    var message = this._createConnectOrSyncOrDisconnectMessage();\n\n    if (message) {\n      this._twilioConnection.sendMessage(message);\n    }\n  };\n  /**\n   * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n   * in disconnection.\n   * @param {TwilioError} [error]\n   * @returns {boolean}\n   */\n\n\n  TwilioConnectionTransport.prototype.disconnect = function (error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n\n      this._sendConnectOrSyncOrDisconnectMessage();\n\n      this._twilioConnection.close();\n\n      this._disconnectEventPublisher();\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Publish an RSP Update. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} update\n   * @returns {boolean}\n   */\n\n\n  TwilioConnectionTransport.prototype.publish = function (update) {\n    switch (this.state) {\n      case 'connected':\n        this._twilioConnection.sendMessage(Object.assign({\n          session: this._session,\n          type: 'update',\n          version: RSP_VERSION\n        }, update));\n\n        return true;\n\n      case 'connecting':\n      case 'syncing':\n        this._updatesToSend.push(update);\n\n        return true;\n\n      case 'disconnected':\n      default:\n        return false;\n    }\n  };\n  /**\n   * Publish (or queue) an event to the Insights gateway.\n   * @param {string} group - Event group name\n   * @param {string} name - Event name\n   * @param {string} level - Event level\n   * @param {object} payload - Event payload\n   * @returns {void}\n   */\n\n\n  TwilioConnectionTransport.prototype.publishEvent = function (group, name, level, payload) {\n    this._eventObserver.emit('event', {\n      group: group,\n      name: name,\n      level: level,\n      payload: payload\n    });\n  };\n  /**\n   * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n   * syncing.\n   * @returns {boolean}\n   */\n\n\n  TwilioConnectionTransport.prototype.sync = function () {\n    if (this.state === 'connected') {\n      this.preempt('syncing');\n\n      this._sendConnectOrSyncOrDisconnectMessage();\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  TwilioConnectionTransport.prototype._setSession = function (session, sessionTimeout) {\n    this._session = session;\n    this._sessionTimeoutMS = sessionTimeout * 1000;\n  };\n  /**\n   * Determines if we should attempt reconnect.\n   * returns a Promise to wait on before attempting to\n   * reconnect. returns null if its not okay to reconnect.\n   * @private\n   * @returns {Promise<void>}\n   */\n\n\n  TwilioConnectionTransport.prototype._getReconnectTimer = function () {\n    var _this = this;\n\n    if (this._sessionTimeoutMS === 0) {\n      // this means either we have never connected.\n      // or we timed out while trying to reconnect\n      // In either case we do not want to reconnect.\n      return null;\n    } // start session timer\n\n\n    if (!this._sessionTimer) {\n      this._sessionTimer = new Timeout(function () {\n        // ensure that _clearReconnectTimer wasn't\n        // called while we were waiting.\n        if (_this._sessionTimer) {\n          // do not allow any more reconnect attempts.\n          _this._sessionTimeoutMS = 0;\n        }\n      }, this._sessionTimeoutMS);\n    } // return promise that waits with exponential backoff.\n\n\n    return new Promise(function (resolve) {\n      _this._reconnectBackoff.once('ready', resolve);\n\n      _this._reconnectBackoff.backoff();\n    });\n  };\n  /**\n   * clears the session reconnect timer.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TwilioConnectionTransport.prototype._clearReconnectTimer = function () {\n    this._reconnectBackoff.reset();\n\n    if (this._sessionTimer) {\n      this._sessionTimer.clear();\n\n      this._sessionTimer = null;\n    }\n  };\n\n  return TwilioConnectionTransport;\n}(StateMachine);\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\n\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update; // First, reduce the top-level `description` property.\n\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    } // Then, reduce the top-level `ice` property.\n\n\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    } // Finally, update the map.\n\n\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    } // Then, reduce the top-level `peer_connections` property.\n\n    /* eslint camelcase:0 */\n\n\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n\n    return reduced;\n  }, {});\n}\n\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n\n    var _iceServersStatus = transport._iceServersStatus,\n        _options = transport._options,\n        _wsServer = transport._wsServer,\n        state = transport.state;\n    var TwilioConnection = _options.TwilioConnection;\n    var twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire' ? transport._createIceMessage() : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n    twilioConnection.once('close', function (reason) {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    var reconnectTimer = transport._getReconnectTimer();\n\n    if (!reconnectTimer) {\n      var twilioError = error.message === TwilioConnection.CloseReason.BUSY ? new SignalingServerBusyError() : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n            transport.emit('message', message);\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(function () {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n\n            return;\n\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'synced':\n            transport._clearReconnectTimer();\n\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n\n          return;\n        }\n\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n\n      case 'syncing':\n        // Do nothing.\n        return;\n\n      default:\n        // Impossible\n        return;\n    }\n  });\n  var _options = transport._options,\n      _iceServersStatus = transport._iceServersStatus;\n  var iceServers = _options.iceServers,\n      onIced = _options.onIced;\n\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\n\nmodule.exports = TwilioConnectionTransport;","map":{"version":3,"sources":["../../../lib/signaling/v2/twilioconnectiontransport.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar getSdpFormat = require('@twilio/webrtc/lib/util/sdp').getSdpFormat;\nvar packageInfo = require('../../../package.json');\nvar InsightsPublisher = require('../../util/insightspublisher');\nvar NullInsightsPublisher = require('../../util/insightspublisher/null');\nvar StateMachine = require('../../statemachine');\nvar TwilioConnection = require('../../twilioconnection');\nvar DefaultBackoff = require('backoff');\nvar reconnectBackoffConfig = require('../../util/constants').reconnectBackoffConfig;\nvar Timeout = require('../../util/timeout');\nvar _a = require('../../util'), createBandwidthProfilePayload = _a.createBandwidthProfilePayload, createMediaSignalingPayload = _a.createMediaSignalingPayload, createSubscribePayload = _a.createSubscribePayload, getUserAgent = _a.getUserAgent, isNonArrayObject = _a.isNonArrayObject;\nvar _b = require('../../util/twilio-video-errors'), createTwilioError = _b.createTwilioError, RoomCompletedError = _b.RoomCompletedError, SignalingConnectionError = _b.SignalingConnectionError, SignalingServerBusyError = _b.SignalingServerBusyError;\nvar ICE_VERSION = 1;\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + \".js\";\nvar SDK_VERSION = packageInfo.version;\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\nvar states = {\n    connecting: [\n        'connected',\n        'disconnected'\n    ],\n    connected: [\n        'disconnected',\n        'syncing'\n    ],\n    syncing: [\n        'connected',\n        'disconnected'\n    ],\n    disconnected: []\n};\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\nvar TwilioConnectionTransport = /** @class */ (function (_super) {\n    __extends(TwilioConnectionTransport, _super);\n    /**\n     * Construct a {@link TwilioConnectionTransport}.\n     * @param {?string} name\n     * @param {string} accessToken\n     * @param {ParticipantSignaling} localParticipant\n     * @param {PeerConnectionManager} peerConnectionManager\n     * @param {string} wsServer\n     * @param {object} [options]\n     */\n    function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n        var _this = this;\n        options = Object.assign({\n            Backoff: DefaultBackoff,\n            InsightsPublisher: InsightsPublisher,\n            NullInsightsPublisher: NullInsightsPublisher,\n            TwilioConnection: TwilioConnection,\n            iceServers: null,\n            sdpFormat: getSdpFormat(options.sdpSemantics),\n            trackPriority: true,\n            trackSwitchOff: true,\n            renderHints: true,\n            userAgent: getUserAgent()\n        }, options);\n        _this = _super.call(this, 'connecting', states) || this;\n        var eventPublisherOptions = {};\n        if (options.wsServerInsights) {\n            eventPublisherOptions.gateway = options.wsServerInsights;\n        }\n        var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n        var eventPublisher = new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions);\n        Object.defineProperties(_this, {\n            _accessToken: {\n                value: accessToken\n            },\n            _automaticSubscription: {\n                value: options.automaticSubscription\n            },\n            _bandwidthProfile: {\n                value: options.bandwidthProfile\n            },\n            _disconnectEventPublisher: {\n                value: function () { return eventPublisher.disconnect(); }\n            },\n            _dominantSpeaker: {\n                value: options.dominantSpeaker\n            },\n            _eventObserver: {\n                value: options.eventObserver,\n                writable: false\n            },\n            _renderHints: {\n                value: options.renderHints\n            },\n            _iceServersStatus: {\n                value: Array.isArray(options.iceServers)\n                    ? 'overrode'\n                    : 'acquire'\n            },\n            _localParticipant: {\n                value: localParticipant\n            },\n            _name: {\n                value: name,\n            },\n            _networkQuality: {\n                value: isNonArrayObject(options.networkQuality) || options.networkQuality\n            },\n            _options: {\n                value: options\n            },\n            _peerConnectionManager: {\n                value: peerConnectionManager\n            },\n            _sessionTimer: {\n                value: null,\n                writable: true\n            },\n            _sessionTimeoutMS: {\n                value: 0,\n                writable: true\n            },\n            _reconnectBackoff: {\n                value: options.Backoff.exponential(reconnectBackoffConfig)\n            },\n            _session: {\n                value: null,\n                writable: true\n            },\n            _trackPriority: {\n                value: options.trackPriority\n            },\n            _trackSwitchOff: {\n                value: options.trackSwitchOff\n            },\n            _twilioConnection: {\n                value: null,\n                writable: true\n            },\n            _updatesReceived: {\n                value: []\n            },\n            _updatesToSend: {\n                value: []\n            },\n            _userAgent: {\n                value: options.userAgent\n            },\n            _wsServer: {\n                value: wsServer\n            }\n        });\n        // eslint-disable-next-line no-warning-comments\n        // TODO(mmalavalli): Create and set EventPublisher outside this class, so\n        // that the EventPublisher constructor is no longer a dependency.\n        _this._eventObserver.setPublisher(eventPublisher);\n        setupTransport(_this);\n        _this.once('connected', function (_a) {\n            var sid = _a.sid, participant = _a.participant;\n            eventPublisher.connect(sid, participant.sid);\n        });\n        return _this;\n    }\n    /**\n     * Create a Connect, Sync or Disconnect RSP message.\n     * @private\n     * @returns {?object}\n     */\n    TwilioConnectionTransport.prototype._createConnectOrSyncOrDisconnectMessage = function () {\n        if (this.state === 'connected') {\n            return null;\n        }\n        if (this.state === 'disconnected') {\n            return {\n                session: this._session,\n                type: 'disconnect',\n                version: RSP_VERSION\n            };\n        }\n        var type = {\n            connecting: 'connect',\n            syncing: 'sync'\n        }[this.state];\n        var message = {\n            name: this._name,\n            participant: this._localParticipant.getState(),\n            peer_connections: this._peerConnectionManager.getStates(),\n            type: type,\n            version: RSP_VERSION\n        };\n        if (message.type === 'connect') {\n            message.ice_servers = this._iceServersStatus;\n            message.publisher = {\n                name: SDK_NAME,\n                sdk_version: SDK_VERSION,\n                user_agent: this._userAgent\n            };\n            if (this._bandwidthProfile) {\n                message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n            }\n            message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff, this._renderHints);\n            message.subscribe = createSubscribePayload(this._automaticSubscription);\n            var sdpFormat = this._options.sdpFormat;\n            if (sdpFormat) {\n                message.format = sdpFormat;\n            }\n            message.token = this._accessToken;\n        }\n        else if (message.type === 'sync') {\n            message.session = this._session;\n            message.token = this._accessToken;\n        }\n        else if (message.type === 'update') {\n            message.session = this._session;\n        }\n        return message;\n    };\n    /**\n     * Create an \"ice\" message.\n     * @private\n     */\n    TwilioConnectionTransport.prototype._createIceMessage = function () {\n        return {\n            edge: 'roaming',\n            token: this._accessToken,\n            type: 'ice',\n            version: ICE_VERSION\n        };\n    };\n    /**\n     * Send a Connect, Sync or Disconnect RSP message.\n     * @private\n     */\n    TwilioConnectionTransport.prototype._sendConnectOrSyncOrDisconnectMessage = function () {\n        var message = this._createConnectOrSyncOrDisconnectMessage();\n        if (message) {\n            this._twilioConnection.sendMessage(message);\n        }\n    };\n    /**\n     * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n     * in disconnection.\n     * @param {TwilioError} [error]\n     * @returns {boolean}\n     */\n    TwilioConnectionTransport.prototype.disconnect = function (error) {\n        if (this.state !== 'disconnected') {\n            this.preempt('disconnected', null, [error]);\n            this._sendConnectOrSyncOrDisconnectMessage();\n            this._twilioConnection.close();\n            this._disconnectEventPublisher();\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Publish an RSP Update. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} update\n     * @returns {boolean}\n     */\n    TwilioConnectionTransport.prototype.publish = function (update) {\n        switch (this.state) {\n            case 'connected':\n                this._twilioConnection.sendMessage(Object.assign({\n                    session: this._session,\n                    type: 'update',\n                    version: RSP_VERSION\n                }, update));\n                return true;\n            case 'connecting':\n            case 'syncing':\n                this._updatesToSend.push(update);\n                return true;\n            case 'disconnected':\n            default:\n                return false;\n        }\n    };\n    /**\n     * Publish (or queue) an event to the Insights gateway.\n     * @param {string} group - Event group name\n     * @param {string} name - Event name\n     * @param {string} level - Event level\n     * @param {object} payload - Event payload\n     * @returns {void}\n     */\n    TwilioConnectionTransport.prototype.publishEvent = function (group, name, level, payload) {\n        this._eventObserver.emit('event', { group: group, name: name, level: level, payload: payload });\n    };\n    /**\n     * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n     * syncing.\n     * @returns {boolean}\n     */\n    TwilioConnectionTransport.prototype.sync = function () {\n        if (this.state === 'connected') {\n            this.preempt('syncing');\n            this._sendConnectOrSyncOrDisconnectMessage();\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TwilioConnectionTransport.prototype._setSession = function (session, sessionTimeout) {\n        this._session = session;\n        this._sessionTimeoutMS = sessionTimeout * 1000;\n    };\n    /**\n     * Determines if we should attempt reconnect.\n     * returns a Promise to wait on before attempting to\n     * reconnect. returns null if its not okay to reconnect.\n     * @private\n     * @returns {Promise<void>}\n     */\n    TwilioConnectionTransport.prototype._getReconnectTimer = function () {\n        var _this = this;\n        if (this._sessionTimeoutMS === 0) {\n            // this means either we have never connected.\n            // or we timed out while trying to reconnect\n            // In either case we do not want to reconnect.\n            return null;\n        }\n        // start session timer\n        if (!this._sessionTimer) {\n            this._sessionTimer = new Timeout(function () {\n                // ensure that _clearReconnectTimer wasn't\n                // called while we were waiting.\n                if (_this._sessionTimer) {\n                    // do not allow any more reconnect attempts.\n                    _this._sessionTimeoutMS = 0;\n                }\n            }, this._sessionTimeoutMS);\n        }\n        // return promise that waits with exponential backoff.\n        return new Promise(function (resolve) {\n            _this._reconnectBackoff.once('ready', resolve);\n            _this._reconnectBackoff.backoff();\n        });\n    };\n    /**\n     * clears the session reconnect timer.\n     *\n     * @private\n     * @returns {void}\n     */\n    TwilioConnectionTransport.prototype._clearReconnectTimer = function () {\n        this._reconnectBackoff.reset();\n        if (this._sessionTimer) {\n            this._sessionTimer.clear();\n            this._sessionTimer = null;\n        }\n    };\n    return TwilioConnectionTransport;\n}(StateMachine));\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\nfunction reducePeerConnections(peerConnections) {\n    return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n        var reduced = peerConnectionsById.get(update.id) || update;\n        // First, reduce the top-level `description` property.\n        if (!reduced.description && update.description) {\n            reduced.description = update.description;\n        }\n        else if (reduced.description && update.description) {\n            if (update.description.revision > reduced.description.revision) {\n                reduced.description = update.description;\n            }\n        }\n        // Then, reduce the top-level `ice` property.\n        if (!reduced.ice && update.ice) {\n            reduced.ice = update.ice;\n        }\n        else if (reduced.ice && update.ice) {\n            if (update.ice.revision > reduced.ice.revision) {\n                reduced.ice = update.ice;\n            }\n        }\n        // Finally, update the map.\n        peerConnectionsById.set(reduced.id, reduced);\n        return peerConnectionsById;\n    }, new Map()).values());\n}\nfunction reduceUpdates(updates) {\n    return updates.reduce(function (reduced, update) {\n        // First, reduce the top-level `participant` property.\n        if (!reduced.participant && update.participant) {\n            reduced.participant = update.participant;\n        }\n        else if (reduced.participant && update.participant) {\n            if (update.participant.revision > reduced.participant.revision) {\n                reduced.participant = update.participant;\n            }\n        }\n        // Then, reduce the top-level `peer_connections` property.\n        /* eslint camelcase:0 */\n        if (!reduced.peer_connections && update.peer_connections) {\n            reduced.peer_connections = reducePeerConnections(update.peer_connections);\n        }\n        else if (reduced.peer_connections && update.peer_connections) {\n            reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n        }\n        return reduced;\n    }, {});\n}\nfunction setupTransport(transport) {\n    function createOrResetTwilioConnection() {\n        if (transport.state === 'disconnected') {\n            return;\n        }\n        if (transport._twilioConnection) {\n            transport._twilioConnection.removeListener('message', handleMessage);\n        }\n        var _iceServersStatus = transport._iceServersStatus, _options = transport._options, _wsServer = transport._wsServer, state = transport.state;\n        var TwilioConnection = _options.TwilioConnection;\n        var twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n            helloBody: state === 'connecting' && _iceServersStatus === 'acquire'\n                ? transport._createIceMessage()\n                : transport._createConnectOrSyncOrDisconnectMessage()\n        }, _options));\n        twilioConnection.once('close', function (reason) {\n            if (reason === TwilioConnection.CloseReason.LOCAL) {\n                disconnect();\n            }\n            else {\n                disconnect(new Error(reason));\n            }\n        });\n        twilioConnection.on('message', handleMessage);\n        transport._twilioConnection = twilioConnection;\n    }\n    function disconnect(error) {\n        if (transport.state === 'disconnected') {\n            return;\n        }\n        if (!error) {\n            transport.disconnect();\n            return;\n        }\n        var reconnectTimer = transport._getReconnectTimer();\n        if (!reconnectTimer) {\n            var twilioError = error.message === TwilioConnection.CloseReason.BUSY\n                ? new SignalingServerBusyError()\n                : new SignalingConnectionError();\n            transport.disconnect(twilioError);\n            return;\n        }\n        if (transport.state === 'connected') {\n            transport.preempt('syncing');\n        }\n        reconnectTimer.then(createOrResetTwilioConnection);\n    }\n    function handleMessage(message) {\n        if (transport.state === 'disconnected') {\n            return;\n        }\n        if (message.type === 'error') {\n            transport.disconnect(createTwilioError(message.code, message.message));\n            return;\n        }\n        switch (transport.state) {\n            case 'connected':\n                switch (message.type) {\n                    case 'connected':\n                    case 'synced':\n                    case 'update':\n                        transport.emit('message', message);\n                        return;\n                    case 'disconnected':\n                        transport.disconnect(message.status === 'completed'\n                            ? new RoomCompletedError()\n                            : null);\n                        return;\n                    default:\n                        // Do nothing.\n                        return;\n                }\n            case 'connecting':\n                switch (message.type) {\n                    case 'iced':\n                        transport._options.onIced(message.ice_servers).then(function () {\n                            transport._sendConnectOrSyncOrDisconnectMessage();\n                        });\n                        return;\n                    case 'connected':\n                        transport._setSession(message.session, message.options.session_timeout);\n                        transport.emit('connected', message);\n                        transport.preempt('connected');\n                        return;\n                    case 'synced':\n                    case 'update':\n                        transport._updatesReceived.push(message);\n                        return;\n                    case 'disconnected':\n                        transport.disconnect(message.status === 'completed'\n                            ? new RoomCompletedError()\n                            : null);\n                        return;\n                    default:\n                        // Do nothing.\n                        return;\n                }\n            case 'syncing':\n                switch (message.type) {\n                    case 'connected':\n                    case 'update':\n                        transport._updatesReceived.push(message);\n                        return;\n                    case 'synced':\n                        transport._clearReconnectTimer();\n                        transport.emit('message', message);\n                        transport.preempt('connected');\n                        return;\n                    case 'disconnected':\n                        transport.disconnect(message.status === 'completed'\n                            ? new RoomCompletedError()\n                            : null);\n                        return;\n                    default:\n                        // Do nothing.\n                        return;\n                }\n            default:\n                // Impossible\n                return;\n        }\n    }\n    transport.on('stateChanged', function stateChanged(state) {\n        switch (state) {\n            case 'connected': {\n                var updates = transport._updatesToSend.splice(0);\n                if (updates.length) {\n                    transport.publish(reduceUpdates(updates));\n                }\n                transport._updatesReceived.splice(0).forEach(function (update) { return transport.emit('message', update); });\n                return;\n            }\n            case 'disconnected':\n                transport._twilioConnection.removeListener('message', handleMessage);\n                transport.removeListener('stateChanged', stateChanged);\n                return;\n            case 'syncing':\n                // Do nothing.\n                return;\n            default:\n                // Impossible\n                return;\n        }\n    });\n    var _options = transport._options, _iceServersStatus = transport._iceServersStatus;\n    var iceServers = _options.iceServers, onIced = _options.onIced;\n    if (_iceServersStatus === 'overrode') {\n        onIced(iceServers).then(createOrResetTwilioConnection);\n    }\n    else {\n        createOrResetTwilioConnection();\n    }\n}\nmodule.exports = TwilioConnectionTransport;\n//# sourceMappingURL=twilioconnectiontransport.js.map"]},"metadata":{},"sourceType":"script"}