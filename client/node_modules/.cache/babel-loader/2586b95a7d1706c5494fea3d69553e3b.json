{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar AudioTrack = require('./audiotrack');\n\nvar mixinRemoteMediaTrack = require('./remotemediatrack');\n\nvar RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteAudioTrack}\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#switchedOff\n * @emits RemoteAudioTrack#switchedOn\n */\n\nvar RemoteAudioTrack = function (_super) {\n  __extends(RemoteAudioTrack, _super);\n  /**\n   * Construct a {@link RemoteAudioTrack}.\n   * @param {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n   * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n   * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n   * @param {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n   * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n   *  {@link Track.Priority} of the {@link RemoteAudioTrack}\n   * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n\n\n  function RemoteAudioTrack(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n    return _super.call(this, sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) || this;\n  }\n\n  RemoteAudioTrack.prototype.toString = function () {\n    return \"[RemoteAudioTrack #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * Update the subscribe {@link Track.Priority} of the {@link RemoteAudioTrack}.\n   * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n   *   Currently setPriority has no effect on audio tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n\n\n  RemoteAudioTrack.prototype.setPriority = function (priority) {\n    return _super.prototype.setPriority.call(this, priority);\n  };\n\n  return RemoteAudioTrack;\n}(RemoteMediaAudioTrack);\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched off.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched off\n * @event RemoteAudioTrack#switchedOff\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched on.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched on\n * @event RemoteAudioTrack#switchedOn\n */\n\n\nmodule.exports = RemoteAudioTrack;","map":{"version":3,"sources":["../../../lib/media/track/remoteaudiotrack.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,UAAU,GAAG,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAM,qBAAqB,GAAG,OAAO,CAAC,oBAAD,CAArC;;AAEA,IAAM,qBAAqB,GAAG,qBAAqB,CAAC,UAAD,CAAnD;AAEA;;;;;;;;;;;;;AAaG;;AACH,IAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AAC7B;;;;;;;;;;AAUG;;;AACH,WAAA,gBAAA,CAAY,GAAZ,EAAiB,kBAAjB,EAAqC,SAArC,EAAgD,aAAhD,EAA+D,WAA/D,EAA4E,aAA5E,EAA2F,OAA3F,EAAkG;WAChG,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,GAAN,EAAW,kBAAX,EAA+B,SAA/B,EAA0C,aAA1C,EAAyD,WAAzD,EAAsE,aAAtE,EAAqF,OAArF,KAA6F,I;AAC9F;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,wBAAsB,KAAK,WAA3B,GAAsC,IAAtC,GAA2C,KAAK,GAAhD,GAAmD,GAA1D;AACD,GAFD;AAIA;;;;;;AAMG;;;AACH,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAoB;AAClB,WAAO,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,QAAlB,CAAP;AACD,GAFD;;AAGF,SAAA,gBAAA;AAAC,CA9BD,CAA+B,qBAA/B,CAAA;AAgCA;;;;;AAKG;;AAEH;;;;;AAKG;;AAEH;;;;;AAKG;;AAEH;;;;;AAKG;;AAEH;;;;;AAKG;;;AAEH,MAAM,CAAC,OAAP,GAAiB,gBAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar AudioTrack = require('./audiotrack');\nvar mixinRemoteMediaTrack = require('./remotemediatrack');\nvar RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteAudioTrack}\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#switchedOff\n * @emits RemoteAudioTrack#switchedOn\n */\nvar RemoteAudioTrack = /** @class */ (function (_super) {\n    __extends(RemoteAudioTrack, _super);\n    /**\n     * Construct a {@link RemoteAudioTrack}.\n     * @param {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n     * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n     * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n     * @param {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n     * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n     *  {@link Track.Priority} of the {@link RemoteAudioTrack}\n     * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n     * @param {{log: Log}} options - The {@link RemoteTrack} options\n     */\n    function RemoteAudioTrack(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n        return _super.call(this, sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) || this;\n    }\n    RemoteAudioTrack.prototype.toString = function () {\n        return \"[RemoteAudioTrack #\" + this._instanceId + \": \" + this.sid + \"]\";\n    };\n    /**\n     * Update the subscribe {@link Track.Priority} of the {@link RemoteAudioTrack}.\n     * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n     *   Currently setPriority has no effect on audio tracks.\n     * @returns {this}\n     * @throws {RangeError}\n     */\n    RemoteAudioTrack.prototype.setPriority = function (priority) {\n        return _super.prototype.setPriority.call(this, priority);\n    };\n    return RemoteAudioTrack;\n}(RemoteMediaAudioTrack));\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n/**\n * A {@link RemoteAudioTrack} was switched off.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched off\n * @event RemoteAudioTrack#switchedOff\n */\n/**\n * A {@link RemoteAudioTrack} was switched on.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched on\n * @event RemoteAudioTrack#switchedOn\n */\nmodule.exports = RemoteAudioTrack;\n//# sourceMappingURL=remoteaudiotrack.js.map"]},"metadata":{},"sourceType":"script"}