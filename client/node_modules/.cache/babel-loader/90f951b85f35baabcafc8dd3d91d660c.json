{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeStat = void 0;\n/**\n * Computes min, max, average for given array.\n * @param {Array<number>} values\n * @returns {{min: number, max: number: average: number}|null}\n */\n\nfunction makeStat(values) {\n  if (values.length) {\n    var min = Math.min.apply(Math, __spreadArray([], __read(values)));\n    var max = Math.max.apply(Math, __spreadArray([], __read(values)));\n    var average = values.reduce(function (total, value) {\n      return total + value;\n    }, 0) / values.length;\n    return {\n      min: min,\n      max: max,\n      average: average\n    };\n  }\n\n  return null;\n}\n\nexports.makeStat = makeStat;","map":{"version":3,"sources":["../../lib/preflight/makestat.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;AAIG;;AACH,SAAgB,QAAhB,CAAyB,MAAzB,EAAyC;AACvC,MAAI,MAAM,CAAC,MAAX,EAAmB;AACjB,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAQ,KAAR,CAAA,IAAA,EAAI,aAAA,CAAA,EAAA,EAAA,MAAA,CAAQ,MAAR,CAAA,CAAJ,CAAZ;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAQ,KAAR,CAAA,IAAA,EAAI,aAAA,CAAA,EAAA,EAAA,MAAA,CAAQ,MAAR,CAAA,CAAJ,CAAZ;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,UAAC,KAAD,EAAQ,KAAR,EAAa;AAAK,aAAA,KAAK,GAAL,KAAA;AAAa,KAA7C,EAA+C,CAA/C,IAAoD,MAAM,CAAC,MAA3E;AACA,WAAO;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,GAAG,EAAA,GAAV;AAAY,MAAA,OAAO,EAAA;AAAnB,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AARD,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeStat = void 0;\n/**\n * Computes min, max, average for given array.\n * @param {Array<number>} values\n * @returns {{min: number, max: number: average: number}|null}\n */\nfunction makeStat(values) {\n    if (values.length) {\n        var min = Math.min.apply(Math, __spreadArray([], __read(values)));\n        var max = Math.max.apply(Math, __spreadArray([], __read(values)));\n        var average = values.reduce(function (total, value) { return total + value; }, 0) / values.length;\n        return { min: min, max: max, average: average };\n    }\n    return null;\n}\nexports.makeStat = makeStat;\n//# sourceMappingURL=makestat.js.map"]},"metadata":{},"sourceType":"script"}