{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar DataTrackTransceiver = require('./transceiver');\n\nvar DataTransport = require('./transport');\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n * @emits DataTrackReceiver#close\n */\n\n\nvar DataTrackReceiver = function (_super) {\n  __extends(DataTrackReceiver, _super);\n  /**\n   * Construct an {@link DataTrackReceiver}.\n   * @param {RTCDataChannel} dataChannel\n   */\n\n\n  function DataTrackReceiver(dataChannel) {\n    var _this = _super.call(this, dataChannel.label, dataChannel.maxPacketLifeTime, dataChannel.maxRetransmits, dataChannel.ordered) || this;\n\n    Object.defineProperties(_this, {\n      _dataChannel: {\n        value: dataChannel\n      }\n    }); // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n    // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n    // and Safari.\n\n    dataChannel.binaryType = 'arraybuffer';\n    dataChannel.addEventListener('message', function (event) {\n      _this.emit('message', event.data);\n    });\n    dataChannel.addEventListener('close', function () {\n      _this.emit('close');\n    });\n    return _this;\n  }\n\n  DataTrackReceiver.prototype.stop = function () {\n    this._dataChannel.close();\n\n    _super.prototype.stop.call(this);\n  };\n  /**\n   * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n   * @returns {DataTransport}\n   */\n\n\n  DataTrackReceiver.prototype.toDataTransport = function () {\n    return new DataTransport(this._dataChannel);\n  };\n\n  return DataTrackReceiver;\n}(DataTrackTransceiver);\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n\n/**\n * @event DataTrackReceiver#close\n */\n\n\nmodule.exports = DataTrackReceiver;","map":{"version":3,"sources":["../../lib/data/receiver.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,oBAAoB,GAAG,OAAO,CAAC,eAAD,CAApC;;AACA,IAAM,aAAa,GAAG,OAAO,CAAC,aAAD,CAA7B;AAEA;;;;;;;AAOG;;;AACH,IAAA,iBAAA,GAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAC9B;;;AAGG;;;AACH,WAAA,iBAAA,CAAY,WAAZ,EAAuB;AAAvB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,WAAW,CAAC,KADd,EAEE,WAAW,CAAC,iBAFd,EAGE,WAAW,CAAC,cAHd,EAIE,WAAW,CAAC,OAJd,KAKC,IANH;;AAQE,IAAA,MAAM,CAAC,gBAAP,CAAwB,KAAxB,EAA8B;AAC5B,MAAA,YAAY,EAAE;AACZ,QAAA,KAAK,EAAE;AADK;AADc,KAA9B,EARqB,CAcrB;AACA;AACA;;AACA,IAAA,WAAW,CAAC,UAAZ,GAAyB,aAAzB;AAEA,IAAA,WAAW,CAAC,gBAAZ,CAA6B,SAA7B,EAAwC,UAAA,KAAA,EAAK;AAC3C,MAAA,KAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,KAAK,CAAC,IAA3B;AACD,KAFD;AAIA,IAAA,WAAW,CAAC,gBAAZ,CAA6B,OAA7B,EAAsC,YAAA;AACpC,MAAA,KAAI,CAAC,IAAL,CAAU,OAAV;AACD,KAFD;;AAGD;;AAED,EAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,SAAK,YAAL,CAAkB,KAAlB;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;AACD,GAHD;AAKA;;;AAGG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,WAAO,IAAI,aAAJ,CAAkB,KAAK,YAAvB,CAAP;AACD,GAFD;;AAGF,SAAA,iBAAA;AAAC,CA7CD,CAAgC,oBAAhC,CAAA;AA+CA;;;AAGG;;AAEH;;AAEG;;;AAEH,MAAM,CAAC,OAAP,GAAiB,iBAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar DataTrackTransceiver = require('./transceiver');\nvar DataTransport = require('./transport');\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n * @emits DataTrackReceiver#close\n */\nvar DataTrackReceiver = /** @class */ (function (_super) {\n    __extends(DataTrackReceiver, _super);\n    /**\n     * Construct an {@link DataTrackReceiver}.\n     * @param {RTCDataChannel} dataChannel\n     */\n    function DataTrackReceiver(dataChannel) {\n        var _this = _super.call(this, dataChannel.label, dataChannel.maxPacketLifeTime, dataChannel.maxRetransmits, dataChannel.ordered) || this;\n        Object.defineProperties(_this, {\n            _dataChannel: {\n                value: dataChannel\n            }\n        });\n        // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n        // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n        // and Safari.\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.addEventListener('message', function (event) {\n            _this.emit('message', event.data);\n        });\n        dataChannel.addEventListener('close', function () {\n            _this.emit('close');\n        });\n        return _this;\n    }\n    DataTrackReceiver.prototype.stop = function () {\n        this._dataChannel.close();\n        _super.prototype.stop.call(this);\n    };\n    /**\n     * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n     * @returns {DataTransport}\n     */\n    DataTrackReceiver.prototype.toDataTransport = function () {\n        return new DataTransport(this._dataChannel);\n    };\n    return DataTrackReceiver;\n}(DataTrackTransceiver));\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n/**\n * @event DataTrackReceiver#close\n */\nmodule.exports = DataTrackReceiver;\n//# sourceMappingURL=receiver.js.map"]},"metadata":{},"sourceType":"script"}