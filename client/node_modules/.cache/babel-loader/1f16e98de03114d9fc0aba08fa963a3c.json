{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar EventEmitter = require('./eventemitter');\n\nvar RemoteAudioTrack = require('./media/track/remoteaudiotrack');\n\nvar RemoteAudioTrackPublication = require('./media/track/remoteaudiotrackpublication');\n\nvar RemoteDataTrack = require('./media/track/remotedatatrack');\n\nvar RemoteDataTrackPublication = require('./media/track/remotedatatrackpublication');\n\nvar RemoteVideoTrack = require('./media/track/remotevideotrack');\n\nvar RemoteVideoTrackPublication = require('./media/track/remotevideotrackpublication');\n\nvar util = require('./util');\n\nvar nInstances = 0;\n/**\n * {@link NetworkQualityLevel} is a value from 0â€“5, inclusive, representing the\n * quality of a network connection.\n * @typedef {number} NetworkQualityLevel\n */\n\n/**\n * @extends EventEmitter\n * @property {Map<Track.SID, AudioTrackPublication>} audioTracks -\n *    The {@link Participant}'s {@link AudioTrackPublication}s\n * @property {Map<Track.SID, DataTrackPublication>} dataTracks -\n *    The {@link Participant}'s {@link DataTrackPublication}s.\n * @property {Participant.Identity} identity - The identity of the {@link Participant}\n * @property {?NetworkQualityLevel} networkQualityLevel - The\n *    {@link Participant}'s current {@link NetworkQualityLevel}, if any\n * @property {?NetworkQualityStats} networkQualityStats - The\n *    {@link Participant}'s current {@link NetworkQualityStats}, if any\n * @property {Participant.SID} sid - The {@link Participant}'s SID\n * @property {string} state - \"connected\", \"disconnected\" or \"reconnecting\"\n * @property {Map<Track.SID, TrackPublication>} tracks -\n *    The {@link Participant}'s {@link TrackPublication}s\n * @property {Map<Track.SID, VideoTrackPublication>} videoTracks -\n *    The {@link Participant}'s {@link VideoTrackPublication}s\n * @emits Participant#disconnected\n * @emits Participant#networkQualityLevelChanged\n * @emits Participant#reconnected\n * @emits Participant#reconnecting\n * @emits Participant#trackDimensionsChanged\n * @emits Participant#trackStarted\n */\n\nvar Participant = function (_super) {\n  __extends(Participant, _super);\n  /**\n   * Construct a {@link Participant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {object} [options]\n   */\n\n\n  function Participant(signaling, options) {\n    var _this = _super.call(this) || this;\n\n    options = Object.assign({\n      RemoteAudioTrack: RemoteAudioTrack,\n      RemoteAudioTrackPublication: RemoteAudioTrackPublication,\n      RemoteDataTrack: RemoteDataTrack,\n      RemoteDataTrackPublication: RemoteDataTrackPublication,\n      RemoteVideoTrack: RemoteVideoTrack,\n      RemoteVideoTrackPublication: RemoteVideoTrackPublication,\n      tracks: []\n    }, options);\n    var indexed = indexTracksById(options.tracks);\n    var log = options.log.createLog('default', _this);\n    var audioTracks = new Map(indexed.audioTracks);\n    var dataTracks = new Map(indexed.dataTracks);\n    var tracks = new Map(indexed.tracks);\n    var videoTracks = new Map(indexed.videoTracks);\n    Object.defineProperties(_this, {\n      _RemoteAudioTrack: {\n        value: options.RemoteAudioTrack\n      },\n      _RemoteAudioTrackPublication: {\n        value: options.RemoteAudioTrackPublication\n      },\n      _RemoteDataTrack: {\n        value: options.RemoteDataTrack\n      },\n      _RemoteDataTrackPublication: {\n        value: options.RemoteDataTrackPublication\n      },\n      _RemoteVideoTrack: {\n        value: options.RemoteVideoTrack\n      },\n      _RemoteVideoTrackPublication: {\n        value: options.RemoteVideoTrackPublication\n      },\n      _audioTracks: {\n        value: audioTracks\n      },\n      _dataTracks: {\n        value: dataTracks\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _clientTrackSwitchOffControl: {\n        value: options.clientTrackSwitchOffControl\n      },\n      _contentPreferencesMode: {\n        value: options.contentPreferencesMode\n      },\n      _log: {\n        value: log\n      },\n      _signaling: {\n        value: signaling\n      },\n      _tracks: {\n        value: tracks\n      },\n      _trackEventReemitters: {\n        value: new Map()\n      },\n      _trackPublicationEventReemitters: {\n        value: new Map()\n      },\n      _trackSignalingUpdatedEventCallbacks: {\n        value: new Map()\n      },\n      _videoTracks: {\n        value: videoTracks\n      },\n      audioTracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      dataTracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      identity: {\n        enumerable: true,\n        get: function get() {\n          return signaling.identity;\n        }\n      },\n      networkQualityLevel: {\n        enumerable: true,\n        get: function get() {\n          return signaling.networkQualityLevel;\n        }\n      },\n      networkQualityStats: {\n        enumerable: true,\n        get: function get() {\n          return signaling.networkQualityStats;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get: function get() {\n          return signaling.sid;\n        }\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      },\n      videoTracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n\n    _this._tracks.forEach(reemitTrackEvents.bind(null, _this));\n\n    signaling.on('networkQualityLevelChanged', function () {\n      return _this.emit('networkQualityLevelChanged', _this.networkQualityLevel, _this.networkQualityStats && (_this.networkQualityStats.audio || _this.networkQualityStats.video) ? _this.networkQualityStats : null);\n    });\n    reemitSignalingStateChangedEvents(_this, signaling);\n    log.info(\"Created a new Participant\" + (_this.identity ? \": \" + _this.identity : ''));\n    return _this;\n  }\n  /**\n   * Get the {@link RemoteTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n\n\n  Participant.prototype._getTrackEvents = function () {\n    return [['dimensionsChanged', 'trackDimensionsChanged'], ['message', 'trackMessage'], ['started', 'trackStarted']];\n  };\n  /**\n   * @private\n   */\n\n\n  Participant.prototype._getTrackPublicationEvents = function () {\n    return [];\n  };\n\n  Participant.prototype.toString = function () {\n    return \"[Participant #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n\n\n  Participant.prototype._addTrack = function (track, id) {\n    var log = this._log;\n\n    if (this._tracks.has(id)) {\n      return null;\n    }\n\n    this._tracks.set(id, track);\n\n    var tracksByKind = {\n      audio: this._audioTracks,\n      video: this._videoTracks,\n      data: this._dataTracks\n    }[track.kind];\n    tracksByKind.set(id, track);\n    reemitTrackEvents(this, track, id);\n    log.info(\"Added a new \" + util.trackClass(track) + \":\", id);\n    log.debug(util.trackClass(track) + \":\", track);\n    return track;\n  };\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n\n\n  Participant.prototype._addTrackPublication = function (publication) {\n    var log = this._log;\n\n    if (this.tracks.has(publication.trackSid)) {\n      return null;\n    }\n\n    this.tracks.set(publication.trackSid, publication);\n    var trackPublicationsByKind = {\n      audio: this.audioTracks,\n      data: this.dataTracks,\n      video: this.videoTracks\n    }[publication.kind];\n    trackPublicationsByKind.set(publication.trackSid, publication);\n    reemitTrackPublicationEvents(this, publication);\n    log.info(\"Added a new \" + util.trackPublicationClass(publication) + \":\", publication.trackSid);\n    log.debug(util.trackPublicationClass(publication) + \":\", publication);\n    return publication;\n  };\n  /**\n   * @private\n   */\n\n\n  Participant.prototype._handleTrackSignalingEvents = function () {\n    var _a = this,\n        log = _a._log,\n        clientTrackSwitchOffControl = _a._clientTrackSwitchOffControl,\n        contentPreferencesMode = _a._contentPreferencesMode;\n\n    var self = this;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    var RemoteAudioTrack = this._RemoteAudioTrack;\n    var RemoteAudioTrackPublication = this._RemoteAudioTrackPublication;\n    var RemoteVideoTrack = this._RemoteVideoTrack;\n    var RemoteVideoTrackPublication = this._RemoteVideoTrackPublication;\n    var RemoteDataTrack = this._RemoteDataTrack;\n    var RemoteDataTrackPublication = this._RemoteDataTrackPublication;\n    var participantSignaling = this._signaling;\n\n    function trackSignalingAdded(signaling) {\n      var RemoteTrackPublication = {\n        audio: RemoteAudioTrackPublication,\n        data: RemoteDataTrackPublication,\n        video: RemoteVideoTrackPublication\n      }[signaling.kind];\n      var publication = new RemoteTrackPublication(signaling, {\n        log: log\n      });\n\n      self._addTrackPublication(publication);\n\n      var isSubscribed = signaling.isSubscribed;\n\n      if (isSubscribed) {\n        trackSignalingSubscribed(signaling);\n      }\n\n      self._trackSignalingUpdatedEventCallbacks.set(signaling.sid, function () {\n        if (isSubscribed !== signaling.isSubscribed) {\n          isSubscribed = signaling.isSubscribed;\n\n          if (isSubscribed) {\n            trackSignalingSubscribed(signaling);\n            return;\n          }\n\n          trackSignalingUnsubscribed(signaling);\n        }\n      });\n\n      signaling.on('updated', self._trackSignalingUpdatedEventCallbacks.get(signaling.sid));\n    }\n\n    function trackSignalingRemoved(signaling) {\n      if (signaling.isSubscribed) {\n        signaling.setTrackTransceiver(null);\n      }\n\n      var updated = self._trackSignalingUpdatedEventCallbacks.get(signaling.sid);\n\n      if (updated) {\n        signaling.removeListener('updated', updated);\n\n        self._trackSignalingUpdatedEventCallbacks.delete(signaling.sid);\n      }\n\n      var publication = self.tracks.get(signaling.sid);\n\n      if (publication) {\n        self._removeTrackPublication(publication);\n      }\n    }\n\n    function trackSignalingSubscribed(signaling) {\n      var isEnabled = signaling.isEnabled,\n          name = signaling.name,\n          kind = signaling.kind,\n          sid = signaling.sid,\n          trackTransceiver = signaling.trackTransceiver,\n          isSwitchedOff = signaling.isSwitchedOff;\n      var RemoteTrack = {\n        audio: RemoteAudioTrack,\n        video: RemoteVideoTrack,\n        data: RemoteDataTrack\n      }[kind];\n      var publication = self.tracks.get(sid); // NOTE(mroberts): It should never be the case that the TrackSignaling and\n      // MediaStreamTrack or DataTrackReceiver kinds disagree; however, just in\n      // case, we handle it here.\n\n      if (!RemoteTrack || kind !== trackTransceiver.kind) {\n        return;\n      }\n\n      var options = {\n        log: log,\n        name: name,\n        clientTrackSwitchOffControl: clientTrackSwitchOffControl,\n        contentPreferencesMode: contentPreferencesMode\n      };\n\n      var setPriority = function setPriority(newPriority) {\n        return participantSignaling.updateSubscriberTrackPriority(sid, newPriority);\n      };\n\n      var setRenderHint = function setRenderHint(renderHint) {\n        if (signaling.isSubscribed) {\n          participantSignaling.updateTrackRenderHint(sid, renderHint);\n        }\n      };\n\n      var track = kind === 'data' ? new RemoteTrack(sid, trackTransceiver, options) : new RemoteTrack(sid, trackTransceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options);\n\n      self._addTrack(track, publication, trackTransceiver.id);\n    }\n\n    function trackSignalingUnsubscribed(signaling) {\n      var _a = __read(Array.from(self._tracks.entries()).find(function (_a) {\n        var _b = __read(_a, 2),\n            track = _b[1];\n\n        return track.sid === signaling.sid;\n      }), 2),\n          id = _a[0],\n          track = _a[1];\n\n      var publication = self.tracks.get(signaling.sid);\n\n      if (track) {\n        self._removeTrack(track, publication, id);\n      }\n    }\n\n    participantSignaling.on('trackAdded', trackSignalingAdded);\n    participantSignaling.on('trackRemoved', trackSignalingRemoved);\n    participantSignaling.tracks.forEach(trackSignalingAdded);\n    participantSignaling.on('stateChanged', function stateChanged(state) {\n      if (state === 'disconnected') {\n        log.debug('Removing event listeners');\n        participantSignaling.removeListener('stateChanged', stateChanged);\n        participantSignaling.removeListener('trackAdded', trackSignalingAdded);\n        participantSignaling.removeListener('trackRemoved', trackSignalingRemoved);\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected'); // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n\n        setTimeout(function () {\n          return self.emit('reconnected');\n        }, 0);\n      }\n    });\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   * @param {Track.ID} id\n   * @returns {?RemoteTrack}\n   */\n\n\n  Participant.prototype._removeTrack = function (track, id) {\n    if (!this._tracks.has(id)) {\n      return null;\n    }\n\n    this._tracks.delete(id);\n\n    var tracksByKind = {\n      audio: this._audioTracks,\n      video: this._videoTracks,\n      data: this._dataTracks\n    }[track.kind];\n    tracksByKind.delete(id);\n    var reemitters = this._trackEventReemitters.get(id) || new Map();\n    reemitters.forEach(function (reemitter, event) {\n      track.removeListener(event, reemitter);\n    });\n    var log = this._log;\n    log.info(\"Removed a \" + util.trackClass(track) + \":\", id);\n    log.debug(util.trackClass(track) + \":\", track);\n    return track;\n  };\n  /**\n   * @private\n   * @param {RemoteTrackPublication} publication\n   * @returns {?RemoteTrackPublication}\n   */\n\n\n  Participant.prototype._removeTrackPublication = function (publication) {\n    publication = this.tracks.get(publication.trackSid);\n\n    if (!publication) {\n      return null;\n    }\n\n    this.tracks.delete(publication.trackSid);\n    var trackPublicationsByKind = {\n      audio: this.audioTracks,\n      data: this.dataTracks,\n      video: this.videoTracks\n    }[publication.kind];\n    trackPublicationsByKind.delete(publication.trackSid);\n    var reemitters = this._trackPublicationEventReemitters.get(publication.trackSid) || new Map();\n    reemitters.forEach(function (reemitter, event) {\n      publication.removeListener(event, reemitter);\n    });\n    var log = this._log;\n    log.info(\"Removed a \" + util.trackPublicationClass(publication) + \":\", publication.trackSid);\n    log.debug(util.trackPublicationClass(publication) + \":\", publication);\n    return publication;\n  };\n\n  Participant.prototype.toJSON = function () {\n    return util.valueToJSON(this);\n  };\n\n  return Participant;\n}(EventEmitter);\n/**\n * A {@link Participant.SID} is a 34-character string starting with \"PA\"\n * that uniquely identifies a {@link Participant}.\n * @type string\n * @typedef Participant.SID\n */\n\n/**\n * A {@link Participant.Identity} is a string that identifies a\n * {@link Participant}. You can think of it like a name.\n * @typedef {string} Participant.Identity\n */\n\n/**\n * The {@link Participant} has disconnected.\n * @param {Participant} participant - The {@link Participant} that disconnected.\n * @event Participant#disconnected\n */\n\n/**\n * The {@link Participant}'s {@link NetworkQualityLevel} changed.\n * @param {NetworkQualityLevel} networkQualityLevel - The new\n *   {@link NetworkQualityLevel}\n * @param {?NetworkQualityStats} networkQualityStats - The {@link NetworkQualityStats}\n *   based on which {@link NetworkQualityLevel} is calculated, if any\n * @event Participant#networkQualityLevelChanged\n */\n\n/**\n * The {@link Participant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnected\n */\n\n/**\n * The {@link Participant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnecting\n */\n\n/**\n * One of the {@link Participant}'s {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event Participant#trackDimensionsChanged\n */\n\n/**\n * One of the {@link Participant}'s {@link Track}s started.\n * @param {Track} track - The {@link Track} that started\n * @event Participant#trackStarted\n */\n\n/**\n * Indexed {@link Track}s by {@link Track.ID}.\n * @typedef {object} IndexedTracks\n * @property {Array<{0: Track.ID, 1: AudioTrack}>} audioTracks - Indexed\n *   {@link AudioTrack}s\n * @property {Array<{0: Track.ID, 1: DataTrack}>} dataTracks - Indexed\n *   {@link DataTrack}s\n * @property {Array<{0: Track.ID, 1: Track}>} tracks - Indexed {@link Track}s\n * @property {Array<{0: Track.ID, 1: VideoTrack}>} videoTracks - Indexed\n *   {@link VideoTrack}s\n * @private\n */\n\n/**\n * Index tracks by {@link Track.ID}.\n * @param {Array<Track>} tracks\n * @returns {IndexedTracks}\n * @private\n */\n\n\nfunction indexTracksById(tracks) {\n  var indexedTracks = tracks.map(function (track) {\n    return [track.id, track];\n  });\n  var indexedAudioTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'audio';\n  });\n  var indexedVideoTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'video';\n  });\n  var indexedDataTracks = indexedTracks.filter(function (keyValue) {\n    return keyValue[1].kind === 'data';\n  });\n  return {\n    audioTracks: indexedAudioTracks,\n    dataTracks: indexedDataTracks,\n    tracks: indexedTracks,\n    videoTracks: indexedVideoTracks\n  };\n}\n/**\n * Re-emit {@link ParticipantSignaling} 'stateChanged' events.\n * @param {Participant} participant\n * @param {ParticipantSignaling} signaling\n * @private\n */\n\n\nfunction reemitSignalingStateChangedEvents(participant, signaling) {\n  var log = participant._log;\n\n  if (participant.state === 'disconnected') {\n    return;\n  } // Reemit state transition events from the ParticipantSignaling.\n\n\n  signaling.on('stateChanged', function stateChanged(state) {\n    log.debug('Transitioned to state:', state);\n    participant.emit(state, participant);\n\n    if (state === 'disconnected') {\n      log.debug('Removing Track event reemitters');\n      signaling.removeListener('stateChanged', stateChanged);\n\n      participant._tracks.forEach(function (track) {\n        var reemitters = participant._trackEventReemitters.get(track.id);\n\n        if (track && reemitters) {\n          reemitters.forEach(function (reemitter, event) {\n            track.removeListener(event, reemitter);\n          });\n        }\n      }); // eslint-disable-next-line no-warning-comments\n      // TODO(joma): Removing this introduced unit test failures in the RemoteParticipant.\n      // Investigate further before removing.\n\n\n      signaling.tracks.forEach(function (trackSignaling) {\n        var track = participant._tracks.get(trackSignaling.id);\n\n        var reemitters = participant._trackEventReemitters.get(trackSignaling.id);\n\n        if (track && reemitters) {\n          reemitters.forEach(function (reemitter, event) {\n            track.removeListener(event, reemitter);\n          });\n        }\n      });\n\n      participant._trackEventReemitters.clear();\n\n      participant.tracks.forEach(function (publication) {\n        participant._trackPublicationEventReemitters.get(publication.trackSid).forEach(function (reemitter, event) {\n          publication.removeListener(event, reemitter);\n        });\n      });\n\n      participant._trackPublicationEventReemitters.clear();\n    }\n  });\n}\n/**\n * Re-emit {@link Track} events.\n * @param {Participant} participant\n * @param {Track} track\n * @param {Track.ID} id\n * @private\n */\n\n\nfunction reemitTrackEvents(participant, track, id) {\n  var trackEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackEvents().forEach(function (eventPair) {\n    var trackEvent = eventPair[0];\n    var participantEvent = eventPair[1];\n    trackEventReemitters.set(trackEvent, function () {\n      var args = [participantEvent].concat([].slice.call(arguments));\n      return participant.emit.apply(participant, __spreadArray([], __read(args)));\n    });\n    track.on(trackEvent, trackEventReemitters.get(trackEvent));\n  });\n\n  participant._trackEventReemitters.set(id, trackEventReemitters);\n}\n/**\n * Re-emit {@link TrackPublication} events.\n * @private\n * @param {Participant} participant\n * @param {TrackPublication} publication\n */\n\n\nfunction reemitTrackPublicationEvents(participant, publication) {\n  var publicationEventReemitters = new Map();\n\n  if (participant.state === 'disconnected') {\n    return;\n  }\n\n  participant._getTrackPublicationEvents().forEach(function (_a) {\n    var _b = __read(_a, 2),\n        publicationEvent = _b[0],\n        participantEvent = _b[1];\n\n    publicationEventReemitters.set(publicationEvent, function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      participant.emit.apply(participant, __spreadArray(__spreadArray([participantEvent], __read(args)), [publication]));\n    });\n    publication.on(publicationEvent, publicationEventReemitters.get(publicationEvent));\n  });\n\n  participant._trackPublicationEventReemitters.set(publication.trackSid, publicationEventReemitters);\n}\n\nmodule.exports = Participant;","map":{"version":3,"sources":["../lib/participant.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar EventEmitter = require('./eventemitter');\nvar RemoteAudioTrack = require('./media/track/remoteaudiotrack');\nvar RemoteAudioTrackPublication = require('./media/track/remoteaudiotrackpublication');\nvar RemoteDataTrack = require('./media/track/remotedatatrack');\nvar RemoteDataTrackPublication = require('./media/track/remotedatatrackpublication');\nvar RemoteVideoTrack = require('./media/track/remotevideotrack');\nvar RemoteVideoTrackPublication = require('./media/track/remotevideotrackpublication');\nvar util = require('./util');\nvar nInstances = 0;\n/**\n * {@link NetworkQualityLevel} is a value from 0â€“5, inclusive, representing the\n * quality of a network connection.\n * @typedef {number} NetworkQualityLevel\n */\n/**\n * @extends EventEmitter\n * @property {Map<Track.SID, AudioTrackPublication>} audioTracks -\n *    The {@link Participant}'s {@link AudioTrackPublication}s\n * @property {Map<Track.SID, DataTrackPublication>} dataTracks -\n *    The {@link Participant}'s {@link DataTrackPublication}s.\n * @property {Participant.Identity} identity - The identity of the {@link Participant}\n * @property {?NetworkQualityLevel} networkQualityLevel - The\n *    {@link Participant}'s current {@link NetworkQualityLevel}, if any\n * @property {?NetworkQualityStats} networkQualityStats - The\n *    {@link Participant}'s current {@link NetworkQualityStats}, if any\n * @property {Participant.SID} sid - The {@link Participant}'s SID\n * @property {string} state - \"connected\", \"disconnected\" or \"reconnecting\"\n * @property {Map<Track.SID, TrackPublication>} tracks -\n *    The {@link Participant}'s {@link TrackPublication}s\n * @property {Map<Track.SID, VideoTrackPublication>} videoTracks -\n *    The {@link Participant}'s {@link VideoTrackPublication}s\n * @emits Participant#disconnected\n * @emits Participant#networkQualityLevelChanged\n * @emits Participant#reconnected\n * @emits Participant#reconnecting\n * @emits Participant#trackDimensionsChanged\n * @emits Participant#trackStarted\n */\nvar Participant = /** @class */ (function (_super) {\n    __extends(Participant, _super);\n    /**\n     * Construct a {@link Participant}.\n     * @param {ParticipantSignaling} signaling\n     * @param {object} [options]\n     */\n    function Participant(signaling, options) {\n        var _this = _super.call(this) || this;\n        options = Object.assign({\n            RemoteAudioTrack: RemoteAudioTrack,\n            RemoteAudioTrackPublication: RemoteAudioTrackPublication,\n            RemoteDataTrack: RemoteDataTrack,\n            RemoteDataTrackPublication: RemoteDataTrackPublication,\n            RemoteVideoTrack: RemoteVideoTrack,\n            RemoteVideoTrackPublication: RemoteVideoTrackPublication,\n            tracks: []\n        }, options);\n        var indexed = indexTracksById(options.tracks);\n        var log = options.log.createLog('default', _this);\n        var audioTracks = new Map(indexed.audioTracks);\n        var dataTracks = new Map(indexed.dataTracks);\n        var tracks = new Map(indexed.tracks);\n        var videoTracks = new Map(indexed.videoTracks);\n        Object.defineProperties(_this, {\n            _RemoteAudioTrack: {\n                value: options.RemoteAudioTrack\n            },\n            _RemoteAudioTrackPublication: {\n                value: options.RemoteAudioTrackPublication\n            },\n            _RemoteDataTrack: {\n                value: options.RemoteDataTrack\n            },\n            _RemoteDataTrackPublication: {\n                value: options.RemoteDataTrackPublication\n            },\n            _RemoteVideoTrack: {\n                value: options.RemoteVideoTrack\n            },\n            _RemoteVideoTrackPublication: {\n                value: options.RemoteVideoTrackPublication\n            },\n            _audioTracks: {\n                value: audioTracks\n            },\n            _dataTracks: {\n                value: dataTracks\n            },\n            _instanceId: {\n                value: ++nInstances\n            },\n            _clientTrackSwitchOffControl: {\n                value: options.clientTrackSwitchOffControl,\n            },\n            _contentPreferencesMode: {\n                value: options.contentPreferencesMode,\n            },\n            _log: {\n                value: log\n            },\n            _signaling: {\n                value: signaling\n            },\n            _tracks: {\n                value: tracks\n            },\n            _trackEventReemitters: {\n                value: new Map()\n            },\n            _trackPublicationEventReemitters: {\n                value: new Map()\n            },\n            _trackSignalingUpdatedEventCallbacks: {\n                value: new Map()\n            },\n            _videoTracks: {\n                value: videoTracks\n            },\n            audioTracks: {\n                enumerable: true,\n                value: new Map()\n            },\n            dataTracks: {\n                enumerable: true,\n                value: new Map()\n            },\n            identity: {\n                enumerable: true,\n                get: function () {\n                    return signaling.identity;\n                }\n            },\n            networkQualityLevel: {\n                enumerable: true,\n                get: function () {\n                    return signaling.networkQualityLevel;\n                }\n            },\n            networkQualityStats: {\n                enumerable: true,\n                get: function () {\n                    return signaling.networkQualityStats;\n                }\n            },\n            sid: {\n                enumerable: true,\n                get: function () {\n                    return signaling.sid;\n                }\n            },\n            state: {\n                enumerable: true,\n                get: function () {\n                    return signaling.state;\n                }\n            },\n            tracks: {\n                enumerable: true,\n                value: new Map()\n            },\n            videoTracks: {\n                enumerable: true,\n                value: new Map()\n            }\n        });\n        _this._tracks.forEach(reemitTrackEvents.bind(null, _this));\n        signaling.on('networkQualityLevelChanged', function () {\n            return _this.emit('networkQualityLevelChanged', _this.networkQualityLevel, _this.networkQualityStats &&\n                (_this.networkQualityStats.audio || _this.networkQualityStats.video)\n                ? _this.networkQualityStats\n                : null);\n        });\n        reemitSignalingStateChangedEvents(_this, signaling);\n        log.info(\"Created a new Participant\" + (_this.identity ? \": \" + _this.identity : ''));\n        return _this;\n    }\n    /**\n     * Get the {@link RemoteTrack} events to re-emit.\n     * @private\n     * @returns {Array<Array<string>>} events\n     */\n    Participant.prototype._getTrackEvents = function () {\n        return [\n            ['dimensionsChanged', 'trackDimensionsChanged'],\n            ['message', 'trackMessage'],\n            ['started', 'trackStarted']\n        ];\n    };\n    /**\n     * @private\n     */\n    Participant.prototype._getTrackPublicationEvents = function () {\n        return [];\n    };\n    Participant.prototype.toString = function () {\n        return \"[Participant #\" + this._instanceId + \": \" + this.sid + \"]\";\n    };\n    /**\n     * @private\n     * @param {RemoteTrack} track\n     * @param {Track.ID} id\n     * @returns {?RemoteTrack}\n     */\n    Participant.prototype._addTrack = function (track, id) {\n        var log = this._log;\n        if (this._tracks.has(id)) {\n            return null;\n        }\n        this._tracks.set(id, track);\n        var tracksByKind = {\n            audio: this._audioTracks,\n            video: this._videoTracks,\n            data: this._dataTracks\n        }[track.kind];\n        tracksByKind.set(id, track);\n        reemitTrackEvents(this, track, id);\n        log.info(\"Added a new \" + util.trackClass(track) + \":\", id);\n        log.debug(util.trackClass(track) + \":\", track);\n        return track;\n    };\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n    Participant.prototype._addTrackPublication = function (publication) {\n        var log = this._log;\n        if (this.tracks.has(publication.trackSid)) {\n            return null;\n        }\n        this.tracks.set(publication.trackSid, publication);\n        var trackPublicationsByKind = {\n            audio: this.audioTracks,\n            data: this.dataTracks,\n            video: this.videoTracks\n        }[publication.kind];\n        trackPublicationsByKind.set(publication.trackSid, publication);\n        reemitTrackPublicationEvents(this, publication);\n        log.info(\"Added a new \" + util.trackPublicationClass(publication) + \":\", publication.trackSid);\n        log.debug(util.trackPublicationClass(publication) + \":\", publication);\n        return publication;\n    };\n    /**\n     * @private\n     */\n    Participant.prototype._handleTrackSignalingEvents = function () {\n        var _a = this, log = _a._log, clientTrackSwitchOffControl = _a._clientTrackSwitchOffControl, contentPreferencesMode = _a._contentPreferencesMode;\n        var self = this;\n        if (this.state === 'disconnected') {\n            return;\n        }\n        var RemoteAudioTrack = this._RemoteAudioTrack;\n        var RemoteAudioTrackPublication = this._RemoteAudioTrackPublication;\n        var RemoteVideoTrack = this._RemoteVideoTrack;\n        var RemoteVideoTrackPublication = this._RemoteVideoTrackPublication;\n        var RemoteDataTrack = this._RemoteDataTrack;\n        var RemoteDataTrackPublication = this._RemoteDataTrackPublication;\n        var participantSignaling = this._signaling;\n        function trackSignalingAdded(signaling) {\n            var RemoteTrackPublication = {\n                audio: RemoteAudioTrackPublication,\n                data: RemoteDataTrackPublication,\n                video: RemoteVideoTrackPublication\n            }[signaling.kind];\n            var publication = new RemoteTrackPublication(signaling, { log: log });\n            self._addTrackPublication(publication);\n            var isSubscribed = signaling.isSubscribed;\n            if (isSubscribed) {\n                trackSignalingSubscribed(signaling);\n            }\n            self._trackSignalingUpdatedEventCallbacks.set(signaling.sid, function () {\n                if (isSubscribed !== signaling.isSubscribed) {\n                    isSubscribed = signaling.isSubscribed;\n                    if (isSubscribed) {\n                        trackSignalingSubscribed(signaling);\n                        return;\n                    }\n                    trackSignalingUnsubscribed(signaling);\n                }\n            });\n            signaling.on('updated', self._trackSignalingUpdatedEventCallbacks.get(signaling.sid));\n        }\n        function trackSignalingRemoved(signaling) {\n            if (signaling.isSubscribed) {\n                signaling.setTrackTransceiver(null);\n            }\n            var updated = self._trackSignalingUpdatedEventCallbacks.get(signaling.sid);\n            if (updated) {\n                signaling.removeListener('updated', updated);\n                self._trackSignalingUpdatedEventCallbacks.delete(signaling.sid);\n            }\n            var publication = self.tracks.get(signaling.sid);\n            if (publication) {\n                self._removeTrackPublication(publication);\n            }\n        }\n        function trackSignalingSubscribed(signaling) {\n            var isEnabled = signaling.isEnabled, name = signaling.name, kind = signaling.kind, sid = signaling.sid, trackTransceiver = signaling.trackTransceiver, isSwitchedOff = signaling.isSwitchedOff;\n            var RemoteTrack = {\n                audio: RemoteAudioTrack,\n                video: RemoteVideoTrack,\n                data: RemoteDataTrack\n            }[kind];\n            var publication = self.tracks.get(sid);\n            // NOTE(mroberts): It should never be the case that the TrackSignaling and\n            // MediaStreamTrack or DataTrackReceiver kinds disagree; however, just in\n            // case, we handle it here.\n            if (!RemoteTrack || kind !== trackTransceiver.kind) {\n                return;\n            }\n            var options = { log: log, name: name, clientTrackSwitchOffControl: clientTrackSwitchOffControl, contentPreferencesMode: contentPreferencesMode };\n            var setPriority = function (newPriority) { return participantSignaling.updateSubscriberTrackPriority(sid, newPriority); };\n            var setRenderHint = function (renderHint) {\n                if (signaling.isSubscribed) {\n                    participantSignaling.updateTrackRenderHint(sid, renderHint);\n                }\n            };\n            var track = kind === 'data'\n                ? new RemoteTrack(sid, trackTransceiver, options)\n                : new RemoteTrack(sid, trackTransceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options);\n            self._addTrack(track, publication, trackTransceiver.id);\n        }\n        function trackSignalingUnsubscribed(signaling) {\n            var _a = __read(Array.from(self._tracks.entries()).find(function (_a) {\n                var _b = __read(_a, 2), track = _b[1];\n                return track.sid === signaling.sid;\n            }), 2), id = _a[0], track = _a[1];\n            var publication = self.tracks.get(signaling.sid);\n            if (track) {\n                self._removeTrack(track, publication, id);\n            }\n        }\n        participantSignaling.on('trackAdded', trackSignalingAdded);\n        participantSignaling.on('trackRemoved', trackSignalingRemoved);\n        participantSignaling.tracks.forEach(trackSignalingAdded);\n        participantSignaling.on('stateChanged', function stateChanged(state) {\n            if (state === 'disconnected') {\n                log.debug('Removing event listeners');\n                participantSignaling.removeListener('stateChanged', stateChanged);\n                participantSignaling.removeListener('trackAdded', trackSignalingAdded);\n                participantSignaling.removeListener('trackRemoved', trackSignalingRemoved);\n            }\n            else if (state === 'connected') {\n                // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n                // successful signaling reconnection, and not a first-time establishment\n                // of the signaling connection.\n                log.info('reconnected');\n                // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n                // Do not signal  public events synchronously with lock held.\n                setTimeout(function () { return self.emit('reconnected'); }, 0);\n            }\n        });\n    };\n    /**\n     * @private\n     * @param {RemoteTrack} track\n     * @param {Track.ID} id\n     * @returns {?RemoteTrack}\n     */\n    Participant.prototype._removeTrack = function (track, id) {\n        if (!this._tracks.has(id)) {\n            return null;\n        }\n        this._tracks.delete(id);\n        var tracksByKind = {\n            audio: this._audioTracks,\n            video: this._videoTracks,\n            data: this._dataTracks\n        }[track.kind];\n        tracksByKind.delete(id);\n        var reemitters = this._trackEventReemitters.get(id) || new Map();\n        reemitters.forEach(function (reemitter, event) {\n            track.removeListener(event, reemitter);\n        });\n        var log = this._log;\n        log.info(\"Removed a \" + util.trackClass(track) + \":\", id);\n        log.debug(util.trackClass(track) + \":\", track);\n        return track;\n    };\n    /**\n     * @private\n     * @param {RemoteTrackPublication} publication\n     * @returns {?RemoteTrackPublication}\n     */\n    Participant.prototype._removeTrackPublication = function (publication) {\n        publication = this.tracks.get(publication.trackSid);\n        if (!publication) {\n            return null;\n        }\n        this.tracks.delete(publication.trackSid);\n        var trackPublicationsByKind = {\n            audio: this.audioTracks,\n            data: this.dataTracks,\n            video: this.videoTracks\n        }[publication.kind];\n        trackPublicationsByKind.delete(publication.trackSid);\n        var reemitters = this._trackPublicationEventReemitters.get(publication.trackSid) || new Map();\n        reemitters.forEach(function (reemitter, event) {\n            publication.removeListener(event, reemitter);\n        });\n        var log = this._log;\n        log.info(\"Removed a \" + util.trackPublicationClass(publication) + \":\", publication.trackSid);\n        log.debug(util.trackPublicationClass(publication) + \":\", publication);\n        return publication;\n    };\n    Participant.prototype.toJSON = function () {\n        return util.valueToJSON(this);\n    };\n    return Participant;\n}(EventEmitter));\n/**\n * A {@link Participant.SID} is a 34-character string starting with \"PA\"\n * that uniquely identifies a {@link Participant}.\n * @type string\n * @typedef Participant.SID\n */\n/**\n * A {@link Participant.Identity} is a string that identifies a\n * {@link Participant}. You can think of it like a name.\n * @typedef {string} Participant.Identity\n */\n/**\n * The {@link Participant} has disconnected.\n * @param {Participant} participant - The {@link Participant} that disconnected.\n * @event Participant#disconnected\n */\n/**\n * The {@link Participant}'s {@link NetworkQualityLevel} changed.\n * @param {NetworkQualityLevel} networkQualityLevel - The new\n *   {@link NetworkQualityLevel}\n * @param {?NetworkQualityStats} networkQualityStats - The {@link NetworkQualityStats}\n *   based on which {@link NetworkQualityLevel} is calculated, if any\n * @event Participant#networkQualityLevelChanged\n */\n/**\n * The {@link Participant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnected\n */\n/**\n * The {@link Participant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event Participant#reconnecting\n */\n/**\n * One of the {@link Participant}'s {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event Participant#trackDimensionsChanged\n */\n/**\n * One of the {@link Participant}'s {@link Track}s started.\n * @param {Track} track - The {@link Track} that started\n * @event Participant#trackStarted\n */\n/**\n * Indexed {@link Track}s by {@link Track.ID}.\n * @typedef {object} IndexedTracks\n * @property {Array<{0: Track.ID, 1: AudioTrack}>} audioTracks - Indexed\n *   {@link AudioTrack}s\n * @property {Array<{0: Track.ID, 1: DataTrack}>} dataTracks - Indexed\n *   {@link DataTrack}s\n * @property {Array<{0: Track.ID, 1: Track}>} tracks - Indexed {@link Track}s\n * @property {Array<{0: Track.ID, 1: VideoTrack}>} videoTracks - Indexed\n *   {@link VideoTrack}s\n * @private\n */\n/**\n * Index tracks by {@link Track.ID}.\n * @param {Array<Track>} tracks\n * @returns {IndexedTracks}\n * @private\n */\nfunction indexTracksById(tracks) {\n    var indexedTracks = tracks.map(function (track) { return [track.id, track]; });\n    var indexedAudioTracks = indexedTracks.filter(function (keyValue) { return keyValue[1].kind === 'audio'; });\n    var indexedVideoTracks = indexedTracks.filter(function (keyValue) { return keyValue[1].kind === 'video'; });\n    var indexedDataTracks = indexedTracks.filter(function (keyValue) { return keyValue[1].kind === 'data'; });\n    return {\n        audioTracks: indexedAudioTracks,\n        dataTracks: indexedDataTracks,\n        tracks: indexedTracks,\n        videoTracks: indexedVideoTracks\n    };\n}\n/**\n * Re-emit {@link ParticipantSignaling} 'stateChanged' events.\n * @param {Participant} participant\n * @param {ParticipantSignaling} signaling\n * @private\n */\nfunction reemitSignalingStateChangedEvents(participant, signaling) {\n    var log = participant._log;\n    if (participant.state === 'disconnected') {\n        return;\n    }\n    // Reemit state transition events from the ParticipantSignaling.\n    signaling.on('stateChanged', function stateChanged(state) {\n        log.debug('Transitioned to state:', state);\n        participant.emit(state, participant);\n        if (state === 'disconnected') {\n            log.debug('Removing Track event reemitters');\n            signaling.removeListener('stateChanged', stateChanged);\n            participant._tracks.forEach(function (track) {\n                var reemitters = participant._trackEventReemitters.get(track.id);\n                if (track && reemitters) {\n                    reemitters.forEach(function (reemitter, event) {\n                        track.removeListener(event, reemitter);\n                    });\n                }\n            });\n            // eslint-disable-next-line no-warning-comments\n            // TODO(joma): Removing this introduced unit test failures in the RemoteParticipant.\n            // Investigate further before removing.\n            signaling.tracks.forEach(function (trackSignaling) {\n                var track = participant._tracks.get(trackSignaling.id);\n                var reemitters = participant._trackEventReemitters.get(trackSignaling.id);\n                if (track && reemitters) {\n                    reemitters.forEach(function (reemitter, event) {\n                        track.removeListener(event, reemitter);\n                    });\n                }\n            });\n            participant._trackEventReemitters.clear();\n            participant.tracks.forEach(function (publication) {\n                participant._trackPublicationEventReemitters.get(publication.trackSid)\n                    .forEach(function (reemitter, event) {\n                    publication.removeListener(event, reemitter);\n                });\n            });\n            participant._trackPublicationEventReemitters.clear();\n        }\n    });\n}\n/**\n * Re-emit {@link Track} events.\n * @param {Participant} participant\n * @param {Track} track\n * @param {Track.ID} id\n * @private\n */\nfunction reemitTrackEvents(participant, track, id) {\n    var trackEventReemitters = new Map();\n    if (participant.state === 'disconnected') {\n        return;\n    }\n    participant._getTrackEvents().forEach(function (eventPair) {\n        var trackEvent = eventPair[0];\n        var participantEvent = eventPair[1];\n        trackEventReemitters.set(trackEvent, function () {\n            var args = [participantEvent].concat([].slice.call(arguments));\n            return participant.emit.apply(participant, __spreadArray([], __read(args)));\n        });\n        track.on(trackEvent, trackEventReemitters.get(trackEvent));\n    });\n    participant._trackEventReemitters.set(id, trackEventReemitters);\n}\n/**\n * Re-emit {@link TrackPublication} events.\n * @private\n * @param {Participant} participant\n * @param {TrackPublication} publication\n */\nfunction reemitTrackPublicationEvents(participant, publication) {\n    var publicationEventReemitters = new Map();\n    if (participant.state === 'disconnected') {\n        return;\n    }\n    participant._getTrackPublicationEvents().forEach(function (_a) {\n        var _b = __read(_a, 2), publicationEvent = _b[0], participantEvent = _b[1];\n        publicationEventReemitters.set(publicationEvent, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            participant.emit.apply(participant, __spreadArray(__spreadArray([participantEvent], __read(args)), [publication]));\n        });\n        publication.on(publicationEvent, publicationEventReemitters.get(publicationEvent));\n    });\n    participant._trackPublicationEventReemitters.set(publication.trackSid, publicationEventReemitters);\n}\nmodule.exports = Participant;\n//# sourceMappingURL=participant.js.map"]},"metadata":{},"sourceType":"script"}