{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar EventEmitter = require('./eventemitter');\n\nvar RemoteParticipant = require('./remoteparticipant');\n\nvar StatsReport = require('./stats/statsreport');\n\nvar valueToJSON = require('./util').valueToJSON;\n\nvar nInstances = 0;\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link module:twilio-video.connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} mediaRegion - String indicating geographical region\n *    where  media is processed for the {@link Room}.\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#participantReconnected\n * @emits Room#participantReconnecting\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackPublishPriorityChanged\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackSwitchedOff\n * @emits Room#trackSwitchedOn\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\n\nvar Room = function (_super) {\n  __extends(Room, _super);\n  /**\n   * Construct a {@link Room}.\n   * @param {RoomSignaling} signaling\n   * @param {?object} [options={}]\n   */\n\n\n  function Room(localParticipant, signaling, options) {\n    var _this = _super.call(this) || this;\n\n    var log = options.log.createLog('default', _this);\n    var participants = new Map();\n    /* istanbul ignore next */\n\n    Object.defineProperties(_this, {\n      _log: {\n        value: log\n      },\n      _clientTrackSwitchOffControl: {\n        value: options.clientTrackSwitchOffControl || 'disabled'\n      },\n      _contentPreferencesMode: {\n        value: options.contentPreferencesMode || 'disabled'\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _options: {\n        value: options\n      },\n      _participants: {\n        value: participants\n      },\n      _signaling: {\n        value: signaling\n      },\n      dominantSpeaker: {\n        enumerable: true,\n        get: function get() {\n          return this.participants.get(signaling.dominantSpeakerSid) || null;\n        }\n      },\n      isRecording: {\n        enumerable: true,\n        get: function get() {\n          return signaling.recording.isEnabled || false;\n        }\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: signaling.name\n      },\n      participants: {\n        enumerable: true,\n        value: participants\n      },\n      sid: {\n        enumerable: true,\n        value: signaling.sid\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: signaling.mediaRegion\n      }\n    });\n    handleRecordingEvents(_this, signaling.recording);\n    handleSignalingEvents(_this, signaling);\n    log.info('Created a new Room:', _this.name);\n    log.debug('Initial RemoteParticipants:', Array.from(_this._participants.values()));\n    return _this;\n  }\n\n  Room.prototype.toString = function () {\n    return \"[Room #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * Disconnect from the {@link Room}.\n   * @returns {this}\n   */\n\n\n  Room.prototype.disconnect = function () {\n    this._log.info('Disconnecting');\n\n    this._signaling.disconnect();\n\n    return this;\n  };\n  /**\n   * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n   * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n   *\n   * @returns {Promise.<Array<StatsReport>>}\n   */\n\n\n  Room.prototype.getStats = function () {\n    var _this = this;\n\n    return this._signaling.getStats().then(function (responses) {\n      return Array.from(responses).map(function (_a) {\n        var _b = __read(_a, 2),\n            id = _b[0],\n            response = _b[1];\n\n        return new StatsReport(id, Object.assign({}, response, {\n          localAudioTrackStats: rewriteLocalTrackIds(_this, response.localAudioTrackStats),\n          localVideoTrackStats: rewriteLocalTrackIds(_this, response.localVideoTrackStats)\n        }));\n      });\n    });\n  };\n\n  Room.prototype.toJSON = function () {\n    return valueToJSON(this);\n  };\n\n  return Room;\n}(EventEmitter);\n\nfunction rewriteLocalTrackIds(room, trackStats) {\n  var localParticipantSignaling = room.localParticipant._signaling;\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var publication = localParticipantSignaling.tracks.get(trackStat.trackId);\n    var trackSender = localParticipantSignaling.getSender(publication);\n    return trackSender ? [Object.assign({}, trackStat, {\n      trackId: trackSender.id\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} joined the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * publishes at least one {@link LocalTrack}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} left the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * unpublishes all its {@link LocalTrack}s.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that has reconnected.\n * @event Room#participantReconnected\n * @example\n * myRoom.on('participantReconnected', participant => {\n *   console.log(participant.identity + ' reconnected to the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that is reconnecting.\n * @event Room#participantReconnecting\n * @example\n * myRoom.on('participantReconnecting', participant => {\n *   console.log(participant.identity + ' is reconnecting to the Room');\n * });\n */\n\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n\n/**\n * Your application is reconnecting to the {@link Room}. This happens when there\n * is a disruption in your signaling connection and/or your media connection. When\n * this event is emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {MediaConnectionError|SignalingConnectionDisconnectedError} error - A\n *   {@link MediaConnectionError} if your application is reconnecting due to a\n *   disruption in your media connection, or a {@link SignalingConnectionDisconnectedError}\n *   if your application is reconnecting due to a disruption in your signaling connection\n * @event Room#reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   if (error.code === 53001) {\n *     console.log('Reconnecting your signaling connection!', error.message);\n *   } else if (error.code === 53405) {\n *     console.log('Reconnecting your media connection!', error.message);\n *   }\n * });\n */\n\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents disabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents enabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, publication, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched off\n * @event Room#trackSwitchedOff\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched on\n * @event Room#trackSwitchedOn\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} changed priority\n * @event Room#trackPublishPriorityChanged\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, publication, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\n\nfunction connectParticipant(room, participantSignaling) {\n  var log = room._log,\n      clientTrackSwitchOffControl = room._clientTrackSwitchOffControl,\n      contentPreferencesMode = room._contentPreferencesMode;\n  var participant = new RemoteParticipant(participantSignaling, {\n    log: log,\n    clientTrackSwitchOffControl: clientTrackSwitchOffControl,\n    contentPreferencesMode: contentPreferencesMode\n  });\n  log.info('A new RemoteParticipant connected:', participant);\n\n  room._participants.set(participant.sid, participant);\n\n  room.emit('participantConnected', participant); // Reemit Track and RemoteParticipant events.\n\n  var eventListeners = [['reconnected', 'participantReconnected'], ['reconnecting', 'participantReconnecting'], 'trackDimensionsChanged', 'trackDisabled', 'trackEnabled', 'trackMessage', 'trackPublished', 'trackPublishPriorityChanged', 'trackStarted', 'trackSubscribed', 'trackSubscriptionFailed', 'trackSwitchedOff', 'trackSwitchedOn', 'trackUnpublished', 'trackUnsubscribed'].map(function (eventOrPair) {\n    var _a = __read(Array.isArray(eventOrPair) ? eventOrPair : [eventOrPair, eventOrPair], 2),\n        event = _a[0],\n        participantEvent = _a[1];\n\n    function reemit() {\n      var args = [].slice.call(arguments);\n      args.unshift(participantEvent);\n      args.push(participant);\n      room.emit.apply(room, __spreadArray([], __read(args)));\n    }\n\n    participant.on(event, reemit);\n    return [event, reemit];\n  });\n  participant.once('disconnected', function participantDisconnected() {\n    var dominantSpeaker = room.dominantSpeaker;\n    log.info('RemoteParticipant disconnected:', participant);\n\n    room._participants.delete(participant.sid);\n\n    eventListeners.forEach(function (args) {\n      participant.removeListener(args[0], args[1]);\n    });\n    room.emit('participantDisconnected', participant);\n\n    if (participant === dominantSpeaker) {\n      room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n    }\n  });\n}\n\nfunction handleRecordingEvents(room, recording) {\n  recording.on('updated', function updated() {\n    var started = recording.isEnabled;\n\n    room._log.info(\"Recording \" + (started ? 'started' : 'stopped'));\n\n    room.emit(\"recording\" + (started ? 'Started' : 'Stopped'));\n  });\n}\n\nfunction handleSignalingEvents(room, signaling) {\n  var log = room._log; // Reemit RemoteParticipant events from the RoomSignaling.\n\n  log.debug('Creating a new RemoteParticipant for each ParticipantSignaling ' + 'in the RoomSignaling');\n  signaling.participants.forEach(connectParticipant.bind(null, room));\n  log.debug('Setting up RemoteParticipant creation for all subsequent ' + 'ParticipantSignalings that connect to the RoomSignaling');\n  signaling.on('participantConnected', connectParticipant.bind(null, room));\n  signaling.on('dominantSpeakerChanged', function () {\n    return room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n  }); // Reemit state transition events from the RoomSignaling.\n\n  signaling.on('stateChanged', function stateChanged(state, error) {\n    log.info('Transitioned to state:', state);\n\n    switch (state) {\n      case 'disconnected':\n        room.participants.forEach(function (participant) {\n          participant._unsubscribeTracks();\n        });\n        room.emit(state, room, error);\n        room.localParticipant.tracks.forEach(function (publication) {\n          publication.unpublish();\n        });\n        signaling.removeListener('stateChanged', stateChanged);\n        break;\n\n      case 'reconnecting':\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnecting', error);\n        }, 0);\n        break;\n\n      default:\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnected');\n        }, 0);\n    }\n  });\n}\n\nmodule.exports = Room;","map":{"version":3,"sources":["../lib/room.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar EventEmitter = require('./eventemitter');\nvar RemoteParticipant = require('./remoteparticipant');\nvar StatsReport = require('./stats/statsreport');\nvar valueToJSON = require('./util').valueToJSON;\nvar nInstances = 0;\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link module:twilio-video.connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} mediaRegion - String indicating geographical region\n *    where  media is processed for the {@link Room}.\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#participantReconnected\n * @emits Room#participantReconnecting\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackPublishPriorityChanged\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackSwitchedOff\n * @emits Room#trackSwitchedOn\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\nvar Room = /** @class */ (function (_super) {\n    __extends(Room, _super);\n    /**\n     * Construct a {@link Room}.\n     * @param {RoomSignaling} signaling\n     * @param {?object} [options={}]\n     */\n    function Room(localParticipant, signaling, options) {\n        var _this = _super.call(this) || this;\n        var log = options.log.createLog('default', _this);\n        var participants = new Map();\n        /* istanbul ignore next */\n        Object.defineProperties(_this, {\n            _log: {\n                value: log\n            },\n            _clientTrackSwitchOffControl: {\n                value: options.clientTrackSwitchOffControl || 'disabled'\n            },\n            _contentPreferencesMode: {\n                value: options.contentPreferencesMode || 'disabled'\n            },\n            _instanceId: {\n                value: ++nInstances\n            },\n            _options: {\n                value: options\n            },\n            _participants: {\n                value: participants\n            },\n            _signaling: {\n                value: signaling\n            },\n            dominantSpeaker: {\n                enumerable: true,\n                get: function () {\n                    return this.participants.get(signaling.dominantSpeakerSid) || null;\n                }\n            },\n            isRecording: {\n                enumerable: true,\n                get: function () {\n                    return signaling.recording.isEnabled || false;\n                }\n            },\n            localParticipant: {\n                enumerable: true,\n                value: localParticipant\n            },\n            name: {\n                enumerable: true,\n                value: signaling.name\n            },\n            participants: {\n                enumerable: true,\n                value: participants\n            },\n            sid: {\n                enumerable: true,\n                value: signaling.sid\n            },\n            state: {\n                enumerable: true,\n                get: function () {\n                    return signaling.state;\n                }\n            },\n            mediaRegion: {\n                enumerable: true,\n                value: signaling.mediaRegion\n            }\n        });\n        handleRecordingEvents(_this, signaling.recording);\n        handleSignalingEvents(_this, signaling);\n        log.info('Created a new Room:', _this.name);\n        log.debug('Initial RemoteParticipants:', Array.from(_this._participants.values()));\n        return _this;\n    }\n    Room.prototype.toString = function () {\n        return \"[Room #\" + this._instanceId + \": \" + this.sid + \"]\";\n    };\n    /**\n     * Disconnect from the {@link Room}.\n     * @returns {this}\n     */\n    Room.prototype.disconnect = function () {\n        this._log.info('Disconnecting');\n        this._signaling.disconnect();\n        return this;\n    };\n    /**\n     * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n     * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n     *\n     * @returns {Promise.<Array<StatsReport>>}\n     */\n    Room.prototype.getStats = function () {\n        var _this = this;\n        return this._signaling.getStats().then(function (responses) {\n            return Array.from(responses).map(function (_a) {\n                var _b = __read(_a, 2), id = _b[0], response = _b[1];\n                return new StatsReport(id, Object.assign({}, response, {\n                    localAudioTrackStats: rewriteLocalTrackIds(_this, response.localAudioTrackStats),\n                    localVideoTrackStats: rewriteLocalTrackIds(_this, response.localVideoTrackStats)\n                }));\n            });\n        });\n    };\n    Room.prototype.toJSON = function () {\n        return valueToJSON(this);\n    };\n    return Room;\n}(EventEmitter));\nfunction rewriteLocalTrackIds(room, trackStats) {\n    var localParticipantSignaling = room.localParticipant._signaling;\n    return trackStats.reduce(function (trackStats, trackStat) {\n        var publication = localParticipantSignaling.tracks.get(trackStat.trackId);\n        var trackSender = localParticipantSignaling.getSender(publication);\n        return trackSender\n            ? [Object.assign({}, trackStat, { trackId: trackSender.id })].concat(trackStats)\n            : trackStats;\n    }, []);\n}\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n/**\n * A {@link RemoteParticipant} joined the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * publishes at least one {@link LocalTrack}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n/**\n * A {@link RemoteParticipant} left the {@link Room}. In Large Group Rooms (Maximum\n * Participants greater than 50), this event is raised only when a {@link RemoteParticipant}\n * unpublishes all its {@link LocalTrack}s.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n/**\n * A {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that has reconnected.\n * @event Room#participantReconnected\n * @example\n * myRoom.on('participantReconnected', participant => {\n *   console.log(participant.identity + ' reconnected to the Room');\n * });\n */\n/**\n * A {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that is reconnecting.\n * @event Room#participantReconnecting\n * @example\n * myRoom.on('participantReconnecting', participant => {\n *   console.log(participant.identity + ' is reconnecting to the Room');\n * });\n */\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n/**\n * Your application is reconnecting to the {@link Room}. This happens when there\n * is a disruption in your signaling connection and/or your media connection. When\n * this event is emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {MediaConnectionError|SignalingConnectionDisconnectedError} error - A\n *   {@link MediaConnectionError} if your application is reconnecting due to a\n *   disruption in your media connection, or a {@link SignalingConnectionDisconnectedError}\n *   if your application is reconnecting due to a disruption in your signaling connection\n * @event Room#reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   if (error.code === 53001) {\n *     console.log('Reconnecting your signaling connection!', error.message);\n *   } else if (error.code === 53405) {\n *     console.log('Reconnecting your media connection!', error.message);\n *   }\n * });\n */\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents disabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents enabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteDataTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, publication, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched off\n * @event Room#trackSwitchedOff\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched on\n * @event Room#trackSwitchedOn\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} changed priority\n * @event Room#trackPublishPriorityChanged\n */\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, publication, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\nfunction connectParticipant(room, participantSignaling) {\n    var log = room._log, clientTrackSwitchOffControl = room._clientTrackSwitchOffControl, contentPreferencesMode = room._contentPreferencesMode;\n    var participant = new RemoteParticipant(participantSignaling, { log: log, clientTrackSwitchOffControl: clientTrackSwitchOffControl, contentPreferencesMode: contentPreferencesMode });\n    log.info('A new RemoteParticipant connected:', participant);\n    room._participants.set(participant.sid, participant);\n    room.emit('participantConnected', participant);\n    // Reemit Track and RemoteParticipant events.\n    var eventListeners = [\n        ['reconnected', 'participantReconnected'],\n        ['reconnecting', 'participantReconnecting'],\n        'trackDimensionsChanged',\n        'trackDisabled',\n        'trackEnabled',\n        'trackMessage',\n        'trackPublished',\n        'trackPublishPriorityChanged',\n        'trackStarted',\n        'trackSubscribed',\n        'trackSubscriptionFailed',\n        'trackSwitchedOff',\n        'trackSwitchedOn',\n        'trackUnpublished',\n        'trackUnsubscribed'\n    ].map(function (eventOrPair) {\n        var _a = __read(Array.isArray(eventOrPair)\n            ? eventOrPair\n            : [eventOrPair, eventOrPair], 2), event = _a[0], participantEvent = _a[1];\n        function reemit() {\n            var args = [].slice.call(arguments);\n            args.unshift(participantEvent);\n            args.push(participant);\n            room.emit.apply(room, __spreadArray([], __read(args)));\n        }\n        participant.on(event, reemit);\n        return [event, reemit];\n    });\n    participant.once('disconnected', function participantDisconnected() {\n        var dominantSpeaker = room.dominantSpeaker;\n        log.info('RemoteParticipant disconnected:', participant);\n        room._participants.delete(participant.sid);\n        eventListeners.forEach(function (args) {\n            participant.removeListener(args[0], args[1]);\n        });\n        room.emit('participantDisconnected', participant);\n        if (participant === dominantSpeaker) {\n            room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n        }\n    });\n}\nfunction handleRecordingEvents(room, recording) {\n    recording.on('updated', function updated() {\n        var started = recording.isEnabled;\n        room._log.info(\"Recording \" + (started ? 'started' : 'stopped'));\n        room.emit(\"recording\" + (started ? 'Started' : 'Stopped'));\n    });\n}\nfunction handleSignalingEvents(room, signaling) {\n    var log = room._log;\n    // Reemit RemoteParticipant events from the RoomSignaling.\n    log.debug('Creating a new RemoteParticipant for each ParticipantSignaling '\n        + 'in the RoomSignaling');\n    signaling.participants.forEach(connectParticipant.bind(null, room));\n    log.debug('Setting up RemoteParticipant creation for all subsequent '\n        + 'ParticipantSignalings that connect to the RoomSignaling');\n    signaling.on('participantConnected', connectParticipant.bind(null, room));\n    signaling.on('dominantSpeakerChanged', function () { return room.emit('dominantSpeakerChanged', room.dominantSpeaker); });\n    // Reemit state transition events from the RoomSignaling.\n    signaling.on('stateChanged', function stateChanged(state, error) {\n        log.info('Transitioned to state:', state);\n        switch (state) {\n            case 'disconnected':\n                room.participants.forEach(function (participant) {\n                    participant._unsubscribeTracks();\n                });\n                room.emit(state, room, error);\n                room.localParticipant.tracks.forEach(function (publication) {\n                    publication.unpublish();\n                });\n                signaling.removeListener('stateChanged', stateChanged);\n                break;\n            case 'reconnecting':\n                // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n                // Do not signal  public events synchronously with lock held.\n                setTimeout(function () { return room.emit('reconnecting', error); }, 0);\n                break;\n            default:\n                // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n                // Do not signal  public events synchronously with lock held.\n                setTimeout(function () { return room.emit('reconnected'); }, 0);\n        }\n    });\n}\nmodule.exports = Room;\n//# sourceMappingURL=room.js.map"]},"metadata":{},"sourceType":"script"}