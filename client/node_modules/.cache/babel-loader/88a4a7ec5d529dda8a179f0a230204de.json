{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar StateMachine = require('./statemachine');\n\nvar _a = require('./util'),\n    buildLogLevels = _a.buildLogLevels,\n    makeUUID = _a.makeUUID;\n\nvar Log = require('./util/log');\n\nvar NetworkMonitor = require('./util/networkmonitor');\n\nvar Timeout = require('./util/timeout');\n\nvar nInstances = 0;\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\n\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\nvar events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\nvar TCMP_VERSION = 2;\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_OPEN_TIMEOUT = 15000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\nvar WS_CLOSE_BUSY_WAIT = 3005;\nvar WS_CLOSE_SERVER_BUSY = 3006;\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\nvar wsCloseCodesToCloseReasons = new Map([[WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT], [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT], [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED], [WS_CLOSE_SEND_FAILED, CloseReason.FAILED], [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT], [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY], [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]]);\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\n\nvar TwilioConnection = function (_super) {\n  __extends(TwilioConnection, _super);\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n\n\n  function TwilioConnection(serverUrl, options) {\n    var _this = _super.call(this, 'early', states) || this;\n\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels, options.loggerName);\n    var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\n      var type = networkMonitor.type;\n      var reason = \"Network changed\" + (type ? \" to \" + type : '');\n      log.debug(reason);\n\n      _this._close({\n        code: WS_CLOSE_NETWORK_CHANGED,\n        reason: reason\n      });\n    }) : null;\n    Object.defineProperties(_this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n    var eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n\n    _this.on('stateChanged', function (state) {\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      if (state in events) {\n        _this.emit.apply(_this, __spreadArray([events[state]], __read(args)));\n      }\n\n      var event = {\n        name: state,\n        group: 'signaling',\n        level: eventsToLevels[_this.state]\n      };\n\n      if (state === 'closed') {\n        var _a = __read(args, 1),\n            reason = _a[0];\n\n        event.payload = {\n          reason: reason\n        };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n\n      _this._eventObserver.emit('event', event);\n    });\n\n    _this._eventObserver.emit('event', {\n      name: _this.state,\n      group: 'signaling',\n      level: eventsToLevels[_this.state]\n    });\n\n    _this._connect();\n\n    return _this;\n  }\n\n  TwilioConnection.prototype.toString = function () {\n    return \"[TwilioConnection #\" + this._instanceId + \": \" + this._ws.url + \"]\";\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n\n\n  TwilioConnection.prototype._close = function (_a) {\n    var code = _a.code,\n        reason = _a.reason;\n\n    if (this.state === 'closed') {\n      return;\n    }\n\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n\n    this._messageQueue.splice(0);\n\n    var log = this._log;\n\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(\"Closed: \" + code + \" - \" + reason);\n\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE]);\n      }\n    }\n\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  };\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._connect = function () {\n    var _this = this;\n\n    var log = this._log;\n\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for connecting to the\" + ' TCMP server.');\n      return;\n    }\n\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    var ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', function (event) {\n      return _this._close(event);\n    });\n    var openTimeout = this._options.openTimeout; // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n\n    this._openTimeout = new Timeout(function () {\n      var reason = \"Failed to open in \" + openTimeout + \" ms\";\n\n      _this._close({\n        code: WS_CLOSE_OPEN_TIMEOUT,\n        reason: reason\n      });\n    }, openTimeout);\n    ws.addEventListener('open', function () {\n      log.debug('WebSocket opened:', ws);\n\n      _this._openTimeout.clear();\n\n      _this._startHandshake();\n\n      if (_this._networkMonitor) {\n        _this._networkMonitor.start();\n      }\n    });\n    ws.addEventListener('message', function (message) {\n      log.debug(\"Incoming: \" + message.data);\n\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        _this.emit('error', error);\n\n        return;\n      }\n\n      switch (message.type) {\n        case 'bad':\n          _this._handleBad(message);\n\n          break;\n\n        case 'busy':\n          _this._handleBusy(message);\n\n          break;\n\n        case 'bye':\n          // Do nothing.\n          break;\n\n        case 'msg':\n          _this._handleMessage(message);\n\n        // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n        // heartbeat intentionally falling through to 'heartbeat' case.\n        // eslint-disable-next-line no-fallthrough\n\n        case 'heartbeat':\n          _this._handleHeartbeat();\n\n          break;\n\n        case 'welcome':\n          _this._handleWelcome(message);\n\n          break;\n\n        default:\n          _this._log.debug(\"Unknown message type: \" + message.type);\n\n          _this.emit('error', new Error(\"Unknown message type: \" + message.type));\n\n          break;\n      }\n    });\n  };\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleBad = function (_a) {\n    var reason = _a.reason;\n    var log = this._log;\n\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"bad\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'connecting') {\n      log.warn(\"Closing: \" + WS_CLOSE_HELLO_FAILED + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_HELLO_FAILED,\n        reason: reason\n      });\n\n      return;\n    }\n\n    log.debug(\"Error: \" + reason);\n    this.emit('error', new Error(reason));\n  };\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleBusy = function (_a) {\n    var _this = this;\n\n    var cookie = _a.cookie,\n        keepAlive = _a.keepAlive,\n        retryAfter = _a.retryAfter;\n    var log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"busy\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n\n    var reason = retryAfter < 0 ? 'Received terminal \"busy\" message' : \"Received \\\"busy\\\" message, retrying after \" + retryAfter + \" ms\";\n\n    if (retryAfter < 0) {\n      log.warn(\"Closing: \" + WS_CLOSE_SERVER_BUSY + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_SERVER_BUSY,\n        reason: reason\n      });\n\n      return;\n    }\n\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._startHandshake();\n      }, retryAfter);\n    } else {\n      log.warn(\"Closing: \" + WS_CLOSE_BUSY_WAIT + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_BUSY_WAIT,\n        reason: reason\n      });\n\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._connect();\n      }, retryAfter);\n    }\n\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  };\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleHeartbeat = function () {\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"heartbeat\\\"\" + ' message from the TCMP server.');\n\n      return;\n    }\n\n    this._heartbeatTimeout.reset();\n  };\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleHeartbeatTimeout = function () {\n    if (this.state !== 'open') {\n      return;\n    }\n\n    var log = this._log;\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    log.debug(\"Consecutive heartbeats missed: \" + maxConsecutiveMissedHeartbeats);\n    var reason = \"Missed \" + maxConsecutiveMissedHeartbeats + \" \\\"heartbeat\\\" messages\";\n    log.warn(\"Closing: \" + WS_CLOSE_HEARTBEATS_MISSED + \" - \" + reason);\n\n    this._close({\n      code: WS_CLOSE_HEARTBEATS_MISSED,\n      reason: reason\n    });\n  };\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleMessage = function (_a) {\n    var body = _a.body;\n\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"msg\\\" message\" + ' from the TCMP server.');\n\n      return;\n    }\n\n    this.emit('message', body);\n  };\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleWelcome = function (_a) {\n    var _this = this;\n\n    var negotiatedTimeout = _a.negotiatedTimeout;\n    var log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"welcome\\\"\" + ' message from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n\n      this._busyWaitTimeout.clear();\n    }\n\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n\n    this._welcomeTimeout.clear();\n\n    this._heartbeatTimeout = new Timeout(function () {\n      return _this._handleHeartbeatTimeout();\n    }, heartbeatTimeout);\n\n    this._messageQueue.splice(0).forEach(function (message) {\n      return _this._send(message);\n    });\n\n    this._sendHeartbeatTimeout = new Timeout(function () {\n      return _this._sendHeartbeat();\n    }, outgoingHeartbeatTimeout);\n    this.transition('open');\n  };\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._handleWelcomeTimeout = function () {\n    if (this.state !== 'connecting') {\n      return;\n    }\n\n    var log = this._log;\n\n    if (this._hellosLeft <= 0) {\n      var reason = 'All handshake attempts failed';\n      log.warn(\"Closing: \" + WS_CLOSE_WELCOME_TIMEOUT + \" - \" + reason);\n\n      this._close({\n        code: WS_CLOSE_WELCOME_TIMEOUT,\n        reason: reason\n      });\n\n      return;\n    }\n\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    log.warn(\"Handshake attempt \" + (maxConsecutiveFailedHellos - this._hellosLeft) + \" failed\");\n\n    this._startHandshake();\n  };\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._send = function (message) {\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n\n    if (readyState === WebSocket.OPEN) {\n      var data = JSON.stringify(message);\n\n      this._log.debug(\"Outgoing: \" + data);\n\n      try {\n        this._ws.send(data);\n\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        var reason = 'Failed to send message';\n\n        this._log.warn(\"Closing: \" + WS_CLOSE_SEND_FAILED + \" - \" + reason);\n\n        this._close({\n          code: WS_CLOSE_SEND_FAILED,\n          reason: reason\n        });\n      }\n    }\n  };\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._sendHeartbeat = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n\n    this._send({\n      type: 'heartbeat'\n    });\n  };\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._sendHello = function () {\n    var _a = this._options,\n        helloBody = _a.helloBody,\n        timeout = _a.requestedHeartbeatTimeout;\n    var hello = {\n      id: makeUUID(),\n      timeout: timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n\n    this._send(hello);\n  };\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n\n\n  TwilioConnection.prototype._sendOrEnqueue = function (message) {\n    var _this = this;\n\n    if (this.state === 'closed') {\n      return;\n    }\n\n    var sendOrEnqueue = this.state === 'open' ? function (message) {\n      return _this._send(message);\n    } : function (message) {\n      return _this._messageQueue.push(message);\n    };\n    sendOrEnqueue(message);\n  };\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n\n\n  TwilioConnection.prototype._startHandshake = function () {\n    var _this = this;\n\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n\n    if (this.state !== 'connecting') {\n      return;\n    }\n\n    this._hellosLeft--;\n\n    this._sendHello();\n\n    var welcomeTimeout = this._options.welcomeTimeout;\n    this._welcomeTimeout = new Timeout(function () {\n      return _this._handleWelcomeTimeout();\n    }, welcomeTimeout);\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n\n\n  TwilioConnection.prototype.close = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n\n    this._sendOrEnqueue({\n      type: 'bye'\n    });\n\n    this._close({\n      code: WS_CLOSE_NORMAL,\n      reason: 'Normal'\n    });\n  };\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n\n\n  TwilioConnection.prototype.sendMessage = function (body) {\n    this._sendOrEnqueue({\n      body: body,\n      type: 'msg'\n    });\n  };\n\n  return TwilioConnection;\n}(StateMachine);\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\n\n\nTwilioConnection.CloseReason = CloseReason;\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\nmodule.exports = TwilioConnection;","map":{"version":3,"sources":["../lib/twilioconnection.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar StateMachine = require('./statemachine');\nvar _a = require('./util'), buildLogLevels = _a.buildLogLevels, makeUUID = _a.makeUUID;\nvar Log = require('./util/log');\nvar NetworkMonitor = require('./util/networkmonitor');\nvar Timeout = require('./util/timeout');\nvar nInstances = 0;\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\nvar states = {\n    closed: [],\n    connecting: ['closed', 'open', 'waiting'],\n    early: ['closed', 'connecting'],\n    open: ['closed'],\n    waiting: ['closed', 'connecting', 'early', 'open']\n};\nvar events = {\n    closed: 'close',\n    open: 'open',\n    waiting: 'waiting'\n};\nvar TCMP_VERSION = 2;\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_OPEN_TIMEOUT = 15000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\nvar WS_CLOSE_BUSY_WAIT = 3005;\nvar WS_CLOSE_SERVER_BUSY = 3006;\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar CloseReason = {\n    BUSY: 'busy',\n    FAILED: 'failed',\n    LOCAL: 'local',\n    REMOTE: 'remote',\n    TIMEOUT: 'timeout'\n};\nvar wsCloseCodesToCloseReasons = new Map([\n    [WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT],\n    [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT],\n    [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED],\n    [WS_CLOSE_SEND_FAILED, CloseReason.FAILED],\n    [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT],\n    [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY],\n    [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]\n]);\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\nvar TwilioConnection = /** @class */ (function (_super) {\n    __extends(TwilioConnection, _super);\n    /**\n     * Construct a {@link TwilioConnection}.\n     * @param {string} serverUrl - TCMP server url\n     * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n     */\n    function TwilioConnection(serverUrl, options) {\n        var _this = _super.call(this, 'early', states) || this;\n        options = Object.assign({\n            helloBody: null,\n            maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n            maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n            requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n            openTimeout: DEFAULT_OPEN_TIMEOUT,\n            welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n            Log: Log,\n            WebSocket: WebSocket\n        }, options);\n        var logLevels = buildLogLevels(options.logLevel);\n        var log = new options.Log('default', _this, logLevels, options.loggerName);\n        var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\n            var type = networkMonitor.type;\n            var reason = \"Network changed\" + (type ? \" to \" + type : '');\n            log.debug(reason);\n            _this._close({ code: WS_CLOSE_NETWORK_CHANGED, reason: reason });\n        }) : null;\n        Object.defineProperties(_this, {\n            _busyWaitTimeout: {\n                value: null,\n                writable: true\n            },\n            _consecutiveHeartbeatsMissed: {\n                value: 0,\n                writable: true\n            },\n            _cookie: {\n                value: null,\n                writable: true\n            },\n            _eventObserver: {\n                value: options.eventObserver\n            },\n            _heartbeatTimeout: {\n                value: null,\n                writable: true\n            },\n            _hellosLeft: {\n                value: options.maxConsecutiveFailedHellos,\n                writable: true\n            },\n            _instanceId: {\n                value: ++nInstances\n            },\n            _log: {\n                value: log\n            },\n            _messageQueue: {\n                value: []\n            },\n            _networkMonitor: {\n                value: networkMonitor\n            },\n            _options: {\n                value: options\n            },\n            _openTimeout: {\n                value: null,\n                writable: true\n            },\n            _sendHeartbeatTimeout: {\n                value: null,\n                writable: true\n            },\n            _serverUrl: {\n                value: serverUrl\n            },\n            _welcomeTimeout: {\n                value: null,\n                writable: true\n            },\n            _ws: {\n                value: null,\n                writable: true\n            }\n        });\n        var eventsToLevels = {\n            connecting: 'info',\n            early: 'info',\n            open: 'info',\n            waiting: 'warning',\n            closed: 'info'\n        };\n        _this.on('stateChanged', function (state) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (state in events) {\n                _this.emit.apply(_this, __spreadArray([events[state]], __read(args)));\n            }\n            var event = { name: state, group: 'signaling', level: eventsToLevels[_this.state] };\n            if (state === 'closed') {\n                var _a = __read(args, 1), reason = _a[0];\n                event.payload = { reason: reason };\n                event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n            }\n            _this._eventObserver.emit('event', event);\n        });\n        _this._eventObserver.emit('event', { name: _this.state, group: 'signaling', level: eventsToLevels[_this.state] });\n        _this._connect();\n        return _this;\n    }\n    TwilioConnection.prototype.toString = function () {\n        return \"[TwilioConnection #\" + this._instanceId + \": \" + this._ws.url + \"]\";\n    };\n    /**\n     * Close the {@link TwilioConnection}.\n     * @param {{code: number, reason: string}} event\n     * @private\n     */\n    TwilioConnection.prototype._close = function (_a) {\n        var code = _a.code, reason = _a.reason;\n        if (this.state === 'closed') {\n            return;\n        }\n        if (this._openTimeout) {\n            this._openTimeout.clear();\n        }\n        if (this._welcomeTimeout) {\n            this._welcomeTimeout.clear();\n        }\n        if (this._heartbeatTimeout) {\n            this._heartbeatTimeout.clear();\n        }\n        if (this._sendHeartbeatTimeout) {\n            this._sendHeartbeatTimeout.clear();\n        }\n        if (this._networkMonitor) {\n            this._networkMonitor.stop();\n        }\n        if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n            this._busyWaitTimeout.clear();\n        }\n        this._messageQueue.splice(0);\n        var log = this._log;\n        if (code === WS_CLOSE_NORMAL) {\n            log.debug('Closed');\n            this.transition('closed', null, [CloseReason.LOCAL]);\n        }\n        else {\n            log.warn(\"Closed: \" + code + \" - \" + reason);\n            if (code !== WS_CLOSE_BUSY_WAIT) {\n                this.transition('closed', null, [\n                    wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE\n                ]);\n            }\n        }\n        var readyState = this._ws.readyState;\n        var WebSocket = this._options.WebSocket;\n        if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n            this._ws.close(code, reason);\n        }\n    };\n    /**\n     * Connect to the TCMP server.\n     * @private\n     */\n    TwilioConnection.prototype._connect = function () {\n        var _this = this;\n        var log = this._log;\n        if (this.state === 'waiting') {\n            this.transition('early');\n        }\n        else if (this.state !== 'early') {\n            log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for connecting to the\"\n                + ' TCMP server.');\n            return;\n        }\n        this._ws = new this._options.WebSocket(this._serverUrl);\n        var ws = this._ws;\n        log.debug('Created a new WebSocket:', ws);\n        ws.addEventListener('close', function (event) { return _this._close(event); });\n        var openTimeout = this._options.openTimeout;\n        // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n        this._openTimeout = new Timeout(function () {\n            var reason = \"Failed to open in \" + openTimeout + \" ms\";\n            _this._close({ code: WS_CLOSE_OPEN_TIMEOUT, reason: reason });\n        }, openTimeout);\n        ws.addEventListener('open', function () {\n            log.debug('WebSocket opened:', ws);\n            _this._openTimeout.clear();\n            _this._startHandshake();\n            if (_this._networkMonitor) {\n                _this._networkMonitor.start();\n            }\n        });\n        ws.addEventListener('message', function (message) {\n            log.debug(\"Incoming: \" + message.data);\n            try {\n                message = JSON.parse(message.data);\n            }\n            catch (error) {\n                _this.emit('error', error);\n                return;\n            }\n            switch (message.type) {\n                case 'bad':\n                    _this._handleBad(message);\n                    break;\n                case 'busy':\n                    _this._handleBusy(message);\n                    break;\n                case 'bye':\n                    // Do nothing.\n                    break;\n                case 'msg':\n                    _this._handleMessage(message);\n                // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n                // heartbeat intentionally falling through to 'heartbeat' case.\n                // eslint-disable-next-line no-fallthrough\n                case 'heartbeat':\n                    _this._handleHeartbeat();\n                    break;\n                case 'welcome':\n                    _this._handleWelcome(message);\n                    break;\n                default:\n                    _this._log.debug(\"Unknown message type: \" + message.type);\n                    _this.emit('error', new Error(\"Unknown message type: \" + message.type));\n                    break;\n            }\n        });\n    };\n    /**\n     * Handle an incoming \"bad\" message.\n     * @param {{reason: string}} message\n     * @private\n     */\n    TwilioConnection.prototype._handleBad = function (_a) {\n        var reason = _a.reason;\n        var log = this._log;\n        if (!['connecting', 'open'].includes(this.state)) {\n            log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"bad\\\" message\"\n                + ' from the TCMP server.');\n            return;\n        }\n        if (this.state === 'connecting') {\n            log.warn(\"Closing: \" + WS_CLOSE_HELLO_FAILED + \" - \" + reason);\n            this._close({ code: WS_CLOSE_HELLO_FAILED, reason: reason });\n            return;\n        }\n        log.debug(\"Error: \" + reason);\n        this.emit('error', new Error(reason));\n    };\n    /**\n     * Handle an incoming \"busy\" message.\n     * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n     * @private\n     */\n    TwilioConnection.prototype._handleBusy = function (_a) {\n        var _this = this;\n        var cookie = _a.cookie, keepAlive = _a.keepAlive, retryAfter = _a.retryAfter;\n        var log = this._log;\n        if (!['connecting', 'waiting'].includes(this.state)) {\n            log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"busy\\\" message\"\n                + ' from the TCMP server.');\n            return;\n        }\n        if (this._busyWaitTimeout) {\n            this._busyWaitTimeout.clear();\n        }\n        if (this._welcomeTimeout) {\n            this._welcomeTimeout.clear();\n        }\n        var reason = retryAfter < 0\n            ? 'Received terminal \"busy\" message'\n            : \"Received \\\"busy\\\" message, retrying after \" + retryAfter + \" ms\";\n        if (retryAfter < 0) {\n            log.warn(\"Closing: \" + WS_CLOSE_SERVER_BUSY + \" - \" + reason);\n            this._close({ code: WS_CLOSE_SERVER_BUSY, reason: reason });\n            return;\n        }\n        var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n        this._hellosLeft = maxConsecutiveFailedHellos;\n        this._cookie = cookie || null;\n        if (keepAlive) {\n            log.warn(reason);\n            this._busyWaitTimeout = new Timeout(function () { return _this._startHandshake(); }, retryAfter);\n        }\n        else {\n            log.warn(\"Closing: \" + WS_CLOSE_BUSY_WAIT + \" - \" + reason);\n            this._close({ code: WS_CLOSE_BUSY_WAIT, reason: reason });\n            this._busyWaitTimeout = new Timeout(function () { return _this._connect(); }, retryAfter);\n        }\n        this.transition('waiting', null, [keepAlive, retryAfter]);\n    };\n    /**\n     * Handle an incoming \"heartbeat\" message.\n     * @private\n     */\n    TwilioConnection.prototype._handleHeartbeat = function () {\n        if (this.state !== 'open') {\n            this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"heartbeat\\\"\"\n                + ' message from the TCMP server.');\n            return;\n        }\n        this._heartbeatTimeout.reset();\n    };\n    /**\n     * Handle a missed \"heartbeat\" message.\n     * @private\n     */\n    TwilioConnection.prototype._handleHeartbeatTimeout = function () {\n        if (this.state !== 'open') {\n            return;\n        }\n        var log = this._log;\n        var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n        log.debug(\"Consecutive heartbeats missed: \" + maxConsecutiveMissedHeartbeats);\n        var reason = \"Missed \" + maxConsecutiveMissedHeartbeats + \" \\\"heartbeat\\\" messages\";\n        log.warn(\"Closing: \" + WS_CLOSE_HEARTBEATS_MISSED + \" - \" + reason);\n        this._close({ code: WS_CLOSE_HEARTBEATS_MISSED, reason: reason });\n    };\n    /**\n     * Handle an incoming \"msg\" message.\n     * @param {{body: object}} message\n     * @private\n     */\n    TwilioConnection.prototype._handleMessage = function (_a) {\n        var body = _a.body;\n        if (this.state !== 'open') {\n            this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"msg\\\" message\"\n                + ' from the TCMP server.');\n            return;\n        }\n        this.emit('message', body);\n    };\n    /**\n     * Handle an incoming \"welcome\" message.\n     * @param {{ negotiatedTimeout: number }} message\n     * @private\n     */\n    TwilioConnection.prototype._handleWelcome = function (_a) {\n        var _this = this;\n        var negotiatedTimeout = _a.negotiatedTimeout;\n        var log = this._log;\n        if (!['connecting', 'waiting'].includes(this.state)) {\n            log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"welcome\\\"\"\n                + ' message from the TCMP server.');\n            return;\n        }\n        if (this.state === 'waiting') {\n            log.debug('Received \"welcome\" message, no need to retry connection.');\n            this._busyWaitTimeout.clear();\n        }\n        var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n        var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n        var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n        this._welcomeTimeout.clear();\n        this._heartbeatTimeout = new Timeout(function () { return _this._handleHeartbeatTimeout(); }, heartbeatTimeout);\n        this._messageQueue.splice(0).forEach(function (message) { return _this._send(message); });\n        this._sendHeartbeatTimeout = new Timeout(function () { return _this._sendHeartbeat(); }, outgoingHeartbeatTimeout);\n        this.transition('open');\n    };\n    /**\n     * Handle a missed \"welcome\" message.\n     * @private\n     */\n    TwilioConnection.prototype._handleWelcomeTimeout = function () {\n        if (this.state !== 'connecting') {\n            return;\n        }\n        var log = this._log;\n        if (this._hellosLeft <= 0) {\n            var reason = 'All handshake attempts failed';\n            log.warn(\"Closing: \" + WS_CLOSE_WELCOME_TIMEOUT + \" - \" + reason);\n            this._close({ code: WS_CLOSE_WELCOME_TIMEOUT, reason: reason });\n            return;\n        }\n        var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n        log.warn(\"Handshake attempt \" + (maxConsecutiveFailedHellos - this._hellosLeft) + \" failed\");\n        this._startHandshake();\n    };\n    /**\n     * Send a message to the TCMP server.\n     * @param {*} message\n     * @private\n     */\n    TwilioConnection.prototype._send = function (message) {\n        var readyState = this._ws.readyState;\n        var WebSocket = this._options.WebSocket;\n        if (readyState === WebSocket.OPEN) {\n            var data = JSON.stringify(message);\n            this._log.debug(\"Outgoing: \" + data);\n            try {\n                this._ws.send(data);\n                if (this._sendHeartbeatTimeout) {\n                    // Each outgoing message is to be treated as an outgoing heartbeat.\n                    this._sendHeartbeatTimeout.reset();\n                }\n            }\n            catch (error) {\n                var reason = 'Failed to send message';\n                this._log.warn(\"Closing: \" + WS_CLOSE_SEND_FAILED + \" - \" + reason);\n                this._close({ code: WS_CLOSE_SEND_FAILED, reason: reason });\n            }\n        }\n    };\n    /**\n     * Send a \"heartbeat\" message.\n     * @private\n     */\n    TwilioConnection.prototype._sendHeartbeat = function () {\n        if (this.state === 'closed') {\n            return;\n        }\n        this._send({ type: 'heartbeat' });\n    };\n    /**\n     * Send a \"hello\" message.\n     * @private\n     */\n    TwilioConnection.prototype._sendHello = function () {\n        var _a = this._options, helloBody = _a.helloBody, timeout = _a.requestedHeartbeatTimeout;\n        var hello = {\n            id: makeUUID(),\n            timeout: timeout,\n            type: 'hello',\n            version: TCMP_VERSION\n        };\n        if (this._cookie) {\n            hello.cookie = this._cookie;\n        }\n        if (helloBody) {\n            hello.body = helloBody;\n        }\n        this._send(hello);\n    };\n    /**\n     * Send or enqueue a message.\n     * @param {*} message\n     * @private\n     */\n    TwilioConnection.prototype._sendOrEnqueue = function (message) {\n        var _this = this;\n        if (this.state === 'closed') {\n            return;\n        }\n        var sendOrEnqueue = this.state === 'open'\n            ? function (message) { return _this._send(message); }\n            : function (message) { return _this._messageQueue.push(message); };\n        sendOrEnqueue(message);\n    };\n    /**\n     * Start the TCMP handshake.\n     * @private\n     */\n    TwilioConnection.prototype._startHandshake = function () {\n        var _this = this;\n        if (['early', 'waiting'].includes(this.state)) {\n            this.transition('connecting');\n        }\n        if (this.state !== 'connecting') {\n            return;\n        }\n        this._hellosLeft--;\n        this._sendHello();\n        var welcomeTimeout = this._options.welcomeTimeout;\n        this._welcomeTimeout = new Timeout(function () { return _this._handleWelcomeTimeout(); }, welcomeTimeout);\n    };\n    /**\n     * Close the {@link TwilioConnection}.\n     * @returns {void}\n     */\n    TwilioConnection.prototype.close = function () {\n        if (this.state === 'closed') {\n            return;\n        }\n        this._sendOrEnqueue({ type: 'bye' });\n        this._close({ code: WS_CLOSE_NORMAL, reason: 'Normal' });\n    };\n    /**\n     * Send a \"msg\" message.\n     * @param {*} body\n     * @returns {void}\n     */\n    TwilioConnection.prototype.sendMessage = function (body) {\n        this._sendOrEnqueue({ body: body, type: 'msg' });\n    };\n    return TwilioConnection;\n}(StateMachine));\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\nTwilioConnection.CloseReason = CloseReason;\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\nmodule.exports = TwilioConnection;\n//# sourceMappingURL=twilioconnection.js.map"]},"metadata":{},"sourceType":"script"}